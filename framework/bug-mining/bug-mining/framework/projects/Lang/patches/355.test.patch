diff --git a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
index 425ec6c50..5a1d69fa0 100644
--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
@@ -108,75 +108,132 @@ public class DateFormatUtilsTest {
         
         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US));
     }
-
-    private void assertFormats(String expectedValue, String pattern, TimeZone timeZone, Calendar cal) {
-        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime(), pattern, timeZone));
-        assertEquals(expectedValue, DateFormatUtils.format(cal.getTime().getTime(), pattern, timeZone));
-        assertEquals(expectedValue, DateFormatUtils.format(cal, pattern, timeZone));
-    }
-
-    private Calendar createFebruaryTestDate(final TimeZone timeZone) {
-        final Calendar cal = Calendar.getInstance(timeZone);
-        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);
-        return cal;
-    }
-
-    private Calendar createJuneTestDate(final TimeZone timeZone) {
-        final Calendar cal = Calendar.getInstance(timeZone);
-        cal.set(2003, Calendar.JUNE, 8, 10, 11, 12);
-        return cal;
-    }
-
-    private void testGmtMinus3(String expectedValue, String pattern) {
-        final TimeZone timeZone = TimeZone.getTimeZone("GMT-3");
-        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));
-    }
-
-    private void testUTC(String expectedValue, String pattern) {
-        final TimeZone timeZone = TimeZone.getTimeZone("UTC");
-        assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));
-    }
     
     @Test
     public void testDateTimeISO() throws Exception {
-        testGmtMinus3("2002-02-23T09:11:12", DateFormatUtils.ISO_DATETIME_FORMAT.getPattern());
-        testGmtMinus3("2002-02-23T09:11:12-03:00", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());
-        testUTC("2002-02-23T09:11:12Z", DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern());
+        final TimeZone timeZone = TimeZone.getTimeZone("GMT-3");
+        final Calendar cal = Calendar.getInstance(timeZone);
+        cal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);
+        String text = DateFormatUtils.format(cal.getTime(), 
+                        DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);
+        assertEquals("2002-02-23T09:11:12", text);
+        text = DateFormatUtils.format(cal.getTime().getTime(), 
+                      DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), timeZone);
+        assertEquals("2002-02-23T09:11:12", text);
+        text = DateFormatUtils.ISO_DATETIME_FORMAT.format(cal);
+        assertEquals("2002-02-23T09:11:12", text);
+        
+        text = DateFormatUtils.format(cal.getTime(), 
+                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);
+        assertEquals("2002-02-23T09:11:12-03:00", text);
+        text = DateFormatUtils.format(cal.getTime().getTime(), 
+                      DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);
+        assertEquals("2002-02-23T09:11:12-03:00", text);
+        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);
+        assertEquals("2002-02-23T09:11:12-03:00", text);
+        
+        Calendar utcCal = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
+        utcCal.set(2002, Calendar.FEBRUARY, 23, 9, 11, 12);
+        utcCal.set(Calendar.MILLISECOND, 0);
+        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(utcCal);
+        assertEquals("2002-02-23T09:11:12Z", text);
+        Date date = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.parse(text);
+        assertEquals(utcCal.getTime(), date);
     }
 
     @Test
     public void testDateISO(){
-        testGmtMinus3("2002-02-23", DateFormatUtils.ISO_DATE_FORMAT.getPattern());
-        testGmtMinus3("2002-02-23-03:00", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());
-        testUTC("2002-02-23Z", DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern());
+        final TimeZone timeZone = TimeZone.getTimeZone("GMT-3");
+        final Calendar cal = Calendar.getInstance(timeZone);
+        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);
+        String text = DateFormatUtils.format(cal.getTime(), 
+                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);
+        assertEquals("2002-02-23", text);
+        text = DateFormatUtils.format(cal.getTime().getTime(), 
+                        DateFormatUtils.ISO_DATE_FORMAT.getPattern(), timeZone);
+        assertEquals("2002-02-23", text);
+        text = DateFormatUtils.ISO_DATE_FORMAT.format(cal);
+        assertEquals("2002-02-23", text);
+        
+        text = DateFormatUtils.format(cal.getTime(), 
+                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);
+        assertEquals("2002-02-23-03:00", text);
+        text = DateFormatUtils.format(cal.getTime().getTime(), 
+                      DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.getPattern(), timeZone);
+        assertEquals("2002-02-23-03:00", text);
+        text = DateFormatUtils.ISO_DATE_TIME_ZONE_FORMAT.format(cal);
+        assertEquals("2002-02-23-03:00", text);
     }
 
     @Test
     public void testTimeISO(){
-        testGmtMinus3("T09:11:12", DateFormatUtils.ISO_TIME_FORMAT.getPattern());
-        testGmtMinus3("T09:11:12-03:00", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());
-        testUTC("T09:11:12Z", DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern());
+        final TimeZone timeZone = TimeZone.getTimeZone("GMT-3");
+        final Calendar cal = Calendar.getInstance(timeZone);
+        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);
+        String text = DateFormatUtils.format(cal.getTime(), 
+                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);
+        assertEquals("T10:11:12", text);
+        text = DateFormatUtils.format(cal.getTime().getTime(), 
+                        DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone);
+        assertEquals("T10:11:12", text);
+        text = DateFormatUtils.ISO_TIME_FORMAT.format(cal);
+        assertEquals("T10:11:12", text);
+        
+        text = DateFormatUtils.format(cal.getTime(), 
+                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);
+        assertEquals("T10:11:12-03:00", text);
+        text = DateFormatUtils.format(cal.getTime().getTime(), 
+                      DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone);
+        assertEquals("T10:11:12-03:00", text);
+        text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal);
+        assertEquals("T10:11:12-03:00", text);
     }
 
     @Test
     public void testTimeNoTISO(){
-        testGmtMinus3("09:11:12", DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern());
-        testGmtMinus3("09:11:12-03:00", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());
-        testUTC("09:11:12Z", DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern());
+        final TimeZone timeZone = TimeZone.getTimeZone("GMT-3");
+        final Calendar cal = Calendar.getInstance(timeZone);
+        cal.set(2002, Calendar.FEBRUARY, 23, 10, 11, 12);
+        String text = DateFormatUtils.format(cal.getTime(), 
+                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);
+        assertEquals("10:11:12", text);
+        text = DateFormatUtils.format(cal.getTime().getTime(), 
+                        DateFormatUtils.ISO_TIME_NO_T_FORMAT.getPattern(), timeZone);
+        assertEquals("10:11:12", text);
+        text = DateFormatUtils.ISO_TIME_NO_T_FORMAT.format(cal);
+        assertEquals("10:11:12", text);
+        
+        text = DateFormatUtils.format(cal.getTime(), 
+                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);
+        assertEquals("10:11:12-03:00", text);
+        text = DateFormatUtils.format(cal.getTime().getTime(), 
+                      DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.getPattern(), timeZone);
+        assertEquals("10:11:12-03:00", text);
+        text = DateFormatUtils.ISO_TIME_NO_T_TIME_ZONE_FORMAT.format(cal);
+        assertEquals("10:11:12-03:00", text);
     }
 
     @Test
     public void testSMTP(){
-        TimeZone timeZone = TimeZone.getTimeZone("GMT-3");
-        Calendar june = createJuneTestDate(timeZone);
+        final TimeZone timeZone = TimeZone.getTimeZone("GMT-3");
+        final Calendar cal = Calendar.getInstance(timeZone);
+        cal.set(2003, Calendar.JUNE, 8, 10, 11, 12);
+        String text = DateFormatUtils.format(cal.getTime(), 
+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,
+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());
+        assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text);
+        text = DateFormatUtils.format(cal.getTime().getTime(), 
+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone,
+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());
+        assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text);
+        text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal);
+        assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text);
         
-        assertFormats("Sun, 08 Jun 2003 10:11:12 -0300", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),
-                timeZone, june);
-
-        timeZone = TimeZone.getTimeZone("UTC");
-        june = createJuneTestDate(timeZone);
-        assertFormats("Sun, 08 Jun 2003 10:11:12 +0000", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),
-                timeZone, june);
+        // format UTC
+        text = DateFormatUtils.formatUTC(cal.getTime().getTime(), 
+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),
+                        DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale());
+        assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text);
     }
 
     /*
@@ -228,46 +285,4 @@ public class DateFormatUtilsTest {
             TimeZone.setDefault(save);
         }
     }
-
-    /**
-     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),
-     * the format method did contain a bug: it did not use the TimeZone data.
-     *
-     * This method test that the bug is fixed.
-     */
-    @Test
-    public void testLang916() throws Exception {
-
-        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("Europe/Paris"));
-        cal.clear();
-        cal.set(2009, 9, 16, 8, 42, 16);
-
-        // Long.
-        {
-            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone("Europe/Paris"));
-            assertEquals("long", "2009-10-16T08:42:16+02:00", value);
-        }
-        {
-            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone("Asia/Kolkata"));
-            assertEquals("long", "2009-10-16T12:12:16+05:30", value);
-        }
-        {
-            String value = DateFormatUtils.format(cal.getTimeInMillis(), DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone("Europe/London"));
-            assertEquals("long", "2009-10-16T07:42:16+01:00", value);
-        }
-
-        // Calendar.
-        {
-            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone("Europe/Paris"));
-            assertEquals("calendar", "2009-10-16T08:42:16+02:00", value);
-        }
-        {
-            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone("Asia/Kolkata"));
-            assertEquals("calendar", "2009-10-16T12:12:16+05:30", value);
-        }
-        {
-            String value = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), TimeZone.getTimeZone("Europe/London"));
-            assertEquals("calendar", "2009-10-16T07:42:16+01:00", value);
-        }
-    }
 }
diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
index 6941f42f2..15456428a 100644
--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
@@ -266,7 +266,7 @@ public class DurationFormatUtilsTest {
         cal.set(Calendar.MILLISECOND, 1);
         String text;
         // repeat a test from testDateTimeISO to compare extended and not extended.
-        text = DateFormatUtils.format(cal, DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.getPattern(), timeZone);
+        text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal);
         assertEquals("2002-02-23T09:11:12-03:00", text);
         // test fixture is the same as above, but now with extended format.
         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(),
diff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java
index 5aaa67024..f8b4930dc 100644
--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java
@@ -214,7 +214,7 @@ public class FastDatePrinterTest {
 
         final DatePrinter format = getInstance("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", TimeZone.getTimeZone("GMT"));
         assertEquals("dateTime", "2009-10-16T16:42:16.000Z", format.format(cal.getTime()));
-        assertEquals("dateTime", "2009-10-16T16:42:16.000Z", format.format(cal));
+        assertEquals("dateTime", "2009-10-16T08:42:16.000Z", format.format(cal));
     }
 
     @Test
@@ -339,32 +339,4 @@ public class FastDatePrinterTest {
         assertEquals("0002", getInstance("dddd", SWEDEN).format(cal));
         assertEquals("00002", getInstance("ddddd", SWEDEN).format(cal));
     }
-
-    /**
-     * According to LANG-916 (https://issues.apache.org/jira/browse/LANG-916),
-     * the format method did contain a bug: it did not use the TimeZone data.
-     *
-     * This method test that the bug is fixed.
-     */
-    @Test
-    public void testLang916() throws Exception {
-
-        Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("Europe/Paris"));
-        cal.clear();
-        cal.set(2009, 9, 16, 8, 42, 16);
-
-        // calendar fast.
-        {
-            String value = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss Z", TimeZone.getTimeZone("Europe/Paris")).format(cal);
-            assertEquals("calendar", "2009-10-16T08:42:16 +0200", value);
-        }
-        {
-            String value = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss Z", TimeZone.getTimeZone("Asia/Kolkata")).format(cal);
-            assertEquals("calendar", "2009-10-16T12:12:16 +0530", value);
-        }
-        {
-            String value = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss Z", TimeZone.getTimeZone("Europe/London")).format(cal);
-            assertEquals("calendar", "2009-10-16T07:42:16 +0100", value);
-        }
-    }
 }
diff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java
index 3ae5f5625..34ff2f516 100644
--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTimeZonesTest.java
@@ -57,7 +57,7 @@ public class FastDatePrinterTimeZonesTest {
         final SimpleDateFormat sdf = new SimpleDateFormat(PATTERN);
         sdf.setTimeZone(timeZone);
         final String expectedValue = sdf.format(cal.getTime());
-        final String actualValue = FastDateFormat.getInstance(PATTERN, this.timeZone).format(cal);
+        final String actualValue = FastDateFormat.getInstance(PATTERN).format(cal);
         assertEquals(expectedValue, actualValue);
     }
 
