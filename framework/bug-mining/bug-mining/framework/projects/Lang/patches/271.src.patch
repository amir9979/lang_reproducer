diff --git a/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java b/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java
index 9ca6a96cf..4f65f727d 100644
--- a/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java
+++ b/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java
@@ -410,45 +410,6 @@ public class StrSubstitutor {
         substitute(buf, 0, length);
         return buf.toString();
     }
-    
-    /**
-     * Replaces all the occurrences of variables with their matching values
-     * from the resolver using the given source as a template.
-     * The source is not altered by this method.
-     *
-     * @param source  the buffer to use as a template, not changed, null returns null
-     * @return the result of the replace operation
-     * @since TODO
-     */
-    public String replace(CharSequence source) {
-        if (source == null) {
-            return null;
-        }
-        return replace(source, 0, source.length());
-    }
-
-    /**
-     * Replaces all the occurrences of variables with their matching values
-     * from the resolver using the given source as a template.
-     * The source is not altered by this method.
-     * <p>
-     * Only the specified portion of the buffer will be processed.
-     * The rest of the buffer is not processed, and is not returned.
-     *
-     * @param source  the buffer to use as a template, not changed, null returns null
-     * @param offset  the start offset within the array, must be valid
-     * @param length  the length within the array to be processed, must be valid
-     * @return the result of the replace operation
-     * @since TODO
-     */
-    public String replace(CharSequence source, int offset, int length) {
-        if (source == null) {
-            return null;
-        }
-        StrBuilder buf = new StrBuilder(length).append(source, offset, length);
-        substitute(buf, 0, length);
-        return buf.toString();
-    }
 
     //-----------------------------------------------------------------------
     /**
@@ -549,49 +510,6 @@ public class StrSubstitutor {
         return true;
     }
 
-  //-----------------------------------------------------------------------
-    /**
-     * Replaces all the occurrences of variables within the given source buffer
-     * with their matching values from the resolver.
-     * The buffer is updated with the result.
-     *
-     * @param source  the buffer to replace in, updated, null returns zero
-     * @return true if altered
-     * @since TODO
-     */
-    public boolean replaceIn(StringBuilder source) {
-        if (source == null) {
-            return false;
-        }
-        return replaceIn(source, 0, source.length());
-    }
-
-    /**
-     * Replaces all the occurrences of variables within the given source builder
-     * with their matching values from the resolver.
-     * The builder is updated with the result.
-     * <p>
-     * Only the specified portion of the buffer will be processed.
-     * The rest of the buffer is not processed, but it is not deleted.
-     *
-     * @param source  the buffer to replace in, updated, null returns zero
-     * @param offset  the start offset within the array, must be valid
-     * @param length  the length within the buffer to be processed, must be valid
-     * @return true if altered
-     * @since TODO
-     */
-    public boolean replaceIn(StringBuilder source, int offset, int length) {
-        if (source == null) {
-            return false;
-        }
-        StrBuilder buf = new StrBuilder(length).append(source, offset, length);
-        if (substitute(buf, 0, length) == false) {
-            return false;
-        }
-        source.replace(offset, offset + length, buf.toString());
-        return true;
-    }
-    
     //-----------------------------------------------------------------------
     /**
      * Replaces all the occurrences of variables within the given source
