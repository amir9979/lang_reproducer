diff --git a/src/java/org/apache/commons/lang/time/StopWatch.java b/src/java/org/apache/commons/lang/time/StopWatch.java
index de9193ce6..0dd3d021b 100644
--- a/src/java/org/apache/commons/lang/time/StopWatch.java
+++ b/src/java/org/apache/commons/lang/time/StopWatch.java
@@ -56,8 +56,6 @@ package org.apache.commons.lang.time;
  */
 public class StopWatch {
 
-    private static final long NANO_2_MILLIS = 1000000L;
-
     // running states
     private static final int STATE_UNSTARTED = 0;
 
@@ -87,13 +85,6 @@ public class StopWatch {
      */
     private long startTime;
 
-    /**
-     * The start time in Millis - nanoTime is only for elapsed time so we 
-     * need to also store the currentTimeMillis to maintain the old 
-     * getStartTime API.
-     */
-    private long startTimeMillis;
-
     /**
      * The stop time.
      */
@@ -127,8 +118,7 @@ public class StopWatch {
         if (this.runningState != STATE_UNSTARTED) {
             throw new IllegalStateException("Stopwatch already started. ");
         }
-        this.startTime = System.nanoTime();
-        this.startTimeMillis = System.currentTimeMillis();
+        this.startTime = System.currentTimeMillis();
         this.runningState = STATE_RUNNING;
     }
 
@@ -149,7 +139,7 @@ public class StopWatch {
             throw new IllegalStateException("Stopwatch is not running. ");
         }
         if (this.runningState == STATE_RUNNING) {
-            this.stopTime = System.nanoTime();
+            this.stopTime = System.currentTimeMillis();
         }
         this.runningState = STATE_STOPPED;
     }
@@ -185,7 +175,7 @@ public class StopWatch {
         if (this.runningState != STATE_RUNNING) {
             throw new IllegalStateException("Stopwatch is not running. ");
         }
-        this.stopTime = System.nanoTime();
+        this.stopTime = System.currentTimeMillis();
         this.splitState = STATE_SPLIT;
     }
 
@@ -226,7 +216,7 @@ public class StopWatch {
         if (this.runningState != STATE_RUNNING) {
             throw new IllegalStateException("Stopwatch must be running to suspend. ");
         }
-        this.stopTime = System.nanoTime();
+        this.stopTime = System.currentTimeMillis();
         this.runningState = STATE_SUSPENDED;
     }
 
@@ -247,7 +237,7 @@ public class StopWatch {
         if (this.runningState != STATE_SUSPENDED) {
             throw new IllegalStateException("Stopwatch must be suspended to resume. ");
         }
-        this.startTime += (System.nanoTime() - this.stopTime);
+        this.startTime += (System.currentTimeMillis() - this.stopTime);
         this.runningState = STATE_RUNNING;
     }
 
@@ -264,28 +254,12 @@ public class StopWatch {
      * @return the time in milliseconds
      */
     public long getTime() {
-        return getNanoTime() / NANO_2_MILLIS;
-    }
-    /**
-     * <p>
-     * Get the time on the stopwatch in nanoseconds.
-     * </p>
-     * 
-     * <p>
-     * This is either the time between the start and the moment this method is called, or the amount of time between
-     * start and stop.
-     * </p>
-     * 
-     * @return the time in nanoseconds
-     * @since 3.0
-     */
-    public long getNanoTime() {
         if (this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {
             return this.stopTime - this.startTime;
         } else if (this.runningState == STATE_UNSTARTED) {
             return 0;
         } else if (this.runningState == STATE_RUNNING) {
-            return System.nanoTime() - this.startTime;
+            return System.currentTimeMillis() - this.startTime;
         }
         throw new RuntimeException("Illegal running state has occured. ");
     }
@@ -306,24 +280,6 @@ public class StopWatch {
      * @since 2.1
      */
     public long getSplitTime() {
-        return getSplitNanoTime() / NANO_2_MILLIS;
-    }
-    /**
-     * <p>
-     * Get the split time on the stopwatch in nanoseconds.
-     * </p>
-     * 
-     * <p>
-     * This is the time between start and latest split.
-     * </p>
-     * 
-     * @return the split time in nanoseconds
-     * 
-     * @throws IllegalStateException
-     *             if the StopWatch has not yet been split.
-     * @since 3.0
-     */
-    public long getSplitNanoTime() {
         if (this.splitState != STATE_SPLIT) {
             throw new IllegalStateException("Stopwatch must be split to get the split time. ");
         }
@@ -342,8 +298,7 @@ public class StopWatch {
         if (this.runningState == STATE_UNSTARTED) {
             throw new IllegalStateException("Stopwatch has not been started");
         }
-        // System.nanoTime is for elapsed time
-        return this.startTimeMillis;
+        return this.startTime;
     }
 
     /**
