diff --git a/src/java/org/apache/commons/lang/enum/Enum.java b/src/java/org/apache/commons/lang/enum/Enum.java
index 89e9de267..de57cc05c 100644
--- a/src/java/org/apache/commons/lang/enum/Enum.java
+++ b/src/java/org/apache/commons/lang/enum/Enum.java
@@ -256,11 +256,7 @@ public abstract class Enum implements Comparable, Serializable {
     /**
      * <code>Map</code>, key of class name, value of <code>Entry</code>.
      */
-    private static Map cEnumClasses
-        // LANG-334: To avoid exposing a mutating map,
-        // we copy it each time we add to it. This is cheaper than
-        // using a synchronized map since we are almost entirely reads
-        = new WeakHashMap();
+    private static final Map cEnumClasses = new WeakHashMap();
     
     /**
      * The string representation of the Enum.
@@ -353,17 +349,12 @@ public abstract class Enum implements Comparable, Serializable {
         if (ok == false) {
             throw new IllegalArgumentException("getEnumClass() must return a superclass of this class");
         }
-
-        Entry entry;
-        synchronized( Enum.class ) { // LANG-334
-            // create entry
-            entry = (Entry) cEnumClasses.get(enumClass);
-            if (entry == null) {
-                entry = createEntry(enumClass);
-                Map myMap = new WeakHashMap( cEnumClasses );
-                myMap.put(enumClass, entry);
-                cEnumClasses = myMap;
-            }
+        
+        // create entry
+        Entry entry = (Entry) cEnumClasses.get(enumClass);
+        if (entry == null) {
+            entry = createEntry(enumClass);
+            cEnumClasses.put(enumClass, entry);
         }
         if (entry.map.containsKey(name)) {
             throw new IllegalArgumentException("The Enum name must be unique, '" + name + "' has already been added");
diff --git a/src/java/org/apache/commons/lang/enums/Enum.java b/src/java/org/apache/commons/lang/enums/Enum.java
index c26c474c0..6fce6fbc3 100644
--- a/src/java/org/apache/commons/lang/enums/Enum.java
+++ b/src/java/org/apache/commons/lang/enums/Enum.java
@@ -302,11 +302,7 @@ public abstract class Enum implements Comparable, Serializable {
     /**
      * <code>Map</code>, key of class name, value of <code>Entry</code>.
      */
-    private static Map cEnumClasses
-        // LANG-334: To avoid exposing a mutating map,
-        // we copy it each time we add to it. This is cheaper than
-        // using a synchronized map since we are almost entirely reads
-        = new WeakHashMap();
+    private static final Map cEnumClasses = new WeakHashMap();
     
     /**
      * The string representation of the Enum.
@@ -349,7 +345,7 @@ public abstract class Enum implements Comparable, Serializable {
          * <p>Restrictive constructor.</p>
          */
         protected Entry() {
-            super();
+          super();
         }
     }
 
@@ -399,17 +395,12 @@ public abstract class Enum implements Comparable, Serializable {
         if (ok == false) {
             throw new IllegalArgumentException("getEnumClass() must return a superclass of this class");
         }
-
-        Entry entry;
-        synchronized( Enum.class ) { // LANG-334
-            // create entry
-            entry = (Entry) cEnumClasses.get(enumClass);
-            if (entry == null) {
-                entry = createEntry(enumClass);
-                Map myMap = new WeakHashMap( cEnumClasses );
-                myMap.put(enumClass, entry);
-                cEnumClasses = myMap;
-            }
+        
+        // create entry
+        Entry entry = (Entry) cEnumClasses.get(enumClass);
+        if (entry == null) {
+            entry = createEntry(enumClass);
+            cEnumClasses.put(enumClass, entry);
         }
         if (entry.map.containsKey(name)) {
             throw new IllegalArgumentException("The Enum name must be unique, '" + name + "' has already been added");
