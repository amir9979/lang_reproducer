diff --git a/src/java/org/apache/commons/lang/ObjectUtils.java b/src/java/org/apache/commons/lang/ObjectUtils.java
index b8b27a365..02904b365 100644
--- a/src/java/org/apache/commons/lang/ObjectUtils.java
+++ b/src/java/org/apache/commons/lang/ObjectUtils.java
@@ -68,7 +68,7 @@ import java.io.Serializable;
  * @author Stephen Colebourne
  * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a>
  * @since 1.0
- * @version $Id: ObjectUtils.java,v 1.20 2003/08/21 15:52:54 ggregory Exp $
+ * @version $Id: ObjectUtils.java,v 1.19 2003/08/18 02:22:23 bayard Exp $
  */
 public class ObjectUtils {
     
@@ -193,7 +193,6 @@ public class ObjectUtils {
      * @param object  the object to create a toString for, may be <code>null</code>
      * @return the default toString text, or <code>null</code> if
      *  <code>null</code> passed in
-     * @since 2.0
      */
     public static StringBuffer appendIdentityToString(StringBuffer buffer, Object object) {
         if (object == null) {
@@ -225,7 +224,6 @@ public class ObjectUtils {
      * @see String#valueOf(Object)
      * @param obj  the Object to <code>toString</code>, may be null
      * @return the passed in Object's toString, or nullStr if <code>null</code> input
-     * @since 2.0
      */
     public static String toString(Object obj) {
         return (obj == null ? "" : obj.toString());
@@ -248,7 +246,6 @@ public class ObjectUtils {
      * @param obj  the Object to <code>toString</code>, may be null
      * @param nullStr  the String to return if <code>null</code> input, may be null
      * @return the passed in Object's toString, or nullStr if <code>null</code> input
-     * @since 2.0
      */
     public static String toString(Object obj, String nullStr) {
         return (obj == null ? nullStr : obj.toString());
diff --git a/src/java/org/apache/commons/lang/RandomStringUtils.java b/src/java/org/apache/commons/lang/RandomStringUtils.java
index 6457bafe1..a7e03d97d 100644
--- a/src/java/org/apache/commons/lang/RandomStringUtils.java
+++ b/src/java/org/apache/commons/lang/RandomStringUtils.java
@@ -64,7 +64,7 @@ import java.util.Random;
  * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a>
  * @author Phil Steitz
  * @since 1.0
- * @version $Id: RandomStringUtils.java,v 1.23 2003/08/21 15:52:54 ggregory Exp $
+ * @version $Id: RandomStringUtils.java,v 1.22 2003/08/18 02:22:23 bayard Exp $
  */
 public class RandomStringUtils {
 
@@ -250,7 +250,6 @@ public class RandomStringUtils {
      * @throws ArrayIndexOutOfBoundsException if there are not
      *  <code>(end - start) + 1</code> characters in the set array.
      * @throws IllegalArgumentException if <code>count</code> &lt; 0.
-     * @since 2.0
      */
     public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {
         if (count == 0) {
diff --git a/src/java/org/apache/commons/lang/SystemUtils.java b/src/java/org/apache/commons/lang/SystemUtils.java
index edada2dfc..9c6972c92 100644
--- a/src/java/org/apache/commons/lang/SystemUtils.java
+++ b/src/java/org/apache/commons/lang/SystemUtils.java
@@ -68,7 +68,7 @@ package org.apache.commons.lang;
  * @author Michael Becke
  * @author Tetsuya Kaneuchi
  * @since 1.0
- * @version $Id: SystemUtils.java,v 1.21 2003/08/21 15:52:54 ggregory Exp $
+ * @version $Id: SystemUtils.java,v 1.20 2003/08/18 02:22:23 bayard Exp $
  */
 public class SystemUtils {
 
@@ -83,8 +83,7 @@ public class SystemUtils {
      * <p>Defaults to <code>null</code> if the runtime does not have
      * security access to read this property or the property does not exist.</p>
      * 
-     * @since 2.0
-     * @since Java 1.2.
+     * @since Java version 1.2.
      */
     public static final String FILE_ENCODING = getSystemProperty("file.encoding");
 
@@ -95,7 +94,7 @@ public class SystemUtils {
      * <p>Defaults to <code>null</code> if the runtime does not have
      * security access to read this property or the property does not exist.</p>
      * 
-     * @since Java 1.1.
+     * @since Java version 1.1.
      */
     public static final String FILE_SEPARATOR = getSystemProperty("file.separator");
 
@@ -105,7 +104,7 @@ public class SystemUtils {
      * <p>Defaults to <code>null</code> if the runtime does not have
      * security access to read this property or the property does not exist.</p>
      * 
-     * @since Java 1.1.
+     * @since Java version 1.1.
      */
     public static final String JAVA_CLASS_PATH = getSystemProperty("java.class.path");
 
@@ -116,7 +115,7 @@ public class SystemUtils {
      * <p>Defaults to <code>null</code> if the runtime does not have
      * security access to read this property or the property does not exist.</p>
      * 
-     * @since Java 1.1.
+     * @since Java version 1.1.
      */
     public static final String JAVA_CLASS_VERSION = getSystemProperty("java.class.version");
 
@@ -127,7 +126,7 @@ public class SystemUtils {
      * <p>Defaults to <code>null</code> if the runtime does not have
      * security access to read this property or the property does not exist.</p>
      * 
-     * @since Java 1.2. Not used in Sun versions after 1.2.
+     * @since Java version 1.2. Not used in Sun versions after 1.2.
      */
     public static final String JAVA_COMPILER = getSystemProperty("java.compiler");
 
@@ -180,7 +179,6 @@ public class SystemUtils {
      * <p>Defaults to <code>null</code> if the runtime does not have
      * security access to read this property or the property does not exist.</p>
      * 
-     * @since 2.0
      * @since Java 1.3
      */
     public static final String JAVA_RUNTIME_NAME = getSystemProperty("java.runtime.name");
@@ -192,7 +190,6 @@ public class SystemUtils {
      * <p>Defaults to <code>null</code> if the runtime does not have
      * security access to read this property or the property does not exist.</p>
      * 
-     * @since 2.0
      * @since Java 1.3
      */
     public static final String JAVA_RUNTIME_VERSION = getSystemProperty("java.runtime.version");
@@ -267,7 +264,6 @@ public class SystemUtils {
      * <p>Defaults to <code>null</code> if the runtime does not have
      * security access to read this property or the property does not exist.</p>
      * 
-     * @since 2.0
      * @since Java 1.2
      */
     public static final String JAVA_VM_INFO = getSystemProperty("java.vm.info");
@@ -398,7 +394,6 @@ public class SystemUtils {
      * <p>Defaults to <code>null</code> if the runtime does not have
      * security access to read this property or the property does not exist.</p>
      * 
-     * @since 2.0
      * @since Java 1.2
      */
     public static final String USER_COUNTRY = 
@@ -433,7 +428,6 @@ public class SystemUtils {
      * <p>Defaults to <code>null</code> if the runtime does not have
      * security access to read this property or the property does not exist.</p>
      * 
-     * @since 2.0
      * @since Java 1.2
      */
     public static final String USER_LANGUAGE = getSystemProperty("user.language");
@@ -537,8 +531,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_AIX = getOSMatches("AIX");
 
@@ -547,8 +539,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_HP_UX = getOSMatches("HP-UX");
 
@@ -557,8 +547,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_IRIX = getOSMatches("Irix");
 
@@ -567,8 +555,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_LINUX = getOSMatches("Linux") || getOSMatches("LINUX");
 
@@ -577,8 +563,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_MAC = getOSMatches("Mac");
 
@@ -587,8 +571,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_MAC_OSX = getOSMatches("Mac OS X");
 
@@ -597,8 +579,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_OS2 = getOSMatches("OS/2");
 
@@ -607,8 +587,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_SOLARIS = getOSMatches("Solaris");
 
@@ -617,8 +595,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_SUN_OS = getOSMatches("SunOS");
 
@@ -627,8 +603,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_WINDOWS = getOSMatches("Windows");
 
@@ -637,8 +611,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_WINDOWS_2000 = getOSMatches("Windows", "5.0");
 
@@ -647,8 +619,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_WINDOWS_95 = getOSMatches("Windows 9", "4.0");
     // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above
@@ -658,8 +628,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_WINDOWS_98 = getOSMatches("Windows 9", "4.1");
     // JDK 1.2 running on Windows98 returns 'Windows 95', hence the above
@@ -669,8 +637,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_WINDOWS_ME = getOSMatches("Windows", "4.9");
     // JDK 1.2 running on WindowsME may return 'Windows 95', hence the above
@@ -680,8 +646,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_WINDOWS_NT = getOSMatches("Windows NT");
     // Windows 2000 returns 'Windows 2000' but may suffer from same JDK1.2 problem
@@ -691,8 +655,6 @@ public class SystemUtils {
      *
      * <p>The field will return <code>false</code> if <code>OS_NAME</code> is
      * <code>null</code>.</p>
-     * 
-     * @since 2.0
      */
     public static final boolean IS_OS_WINDOWS_XP = getOSMatches("Windows", "5.1");
     // Windows XP returns 'Windows 2000' just for fun...
@@ -873,7 +835,6 @@ public class SystemUtils {
      * @param requiredVersion  the required version, for example 131
      * @return <code>true</code> if the actual version is equal or greater
      *  than the required version
-     * @since 2.0
      */
     public static boolean isJavaVersionAtLeast(int requiredVersion) {
         return (JAVA_VERSION_INT >= requiredVersion);
diff --git a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
index 958acace0..afdd55137 100644
--- a/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
+++ b/src/java/org/apache/commons/lang/builder/EqualsBuilder.java
@@ -111,7 +111,7 @@ import java.lang.reflect.Modifier;
  * @author Gary Gregory
  * @author Pete Gieser
  * @since 1.0
- * @version $Id: EqualsBuilder.java,v 1.19 2003/08/21 15:52:54 ggregory Exp $
+ * @version $Id: EqualsBuilder.java,v 1.18 2003/08/18 02:22:24 bayard Exp $
  */
 public class EqualsBuilder {
     /**
@@ -201,7 +201,6 @@ public class EqualsBuilder {
      * @param reflectUpToClass  the superclass to reflect up to (inclusive),
      *  may be <code>null</code>
      * @return <code>true</code> if the two Objects have tested equals.
-     * @since 2.0
      */
     public static boolean reflectionEquals(Object lhs, Object rhs, boolean testTransients, Class reflectUpToClass) {
         if (lhs == rhs) {
@@ -292,7 +291,6 @@ public class EqualsBuilder {
      *
      * @param superEquals  the result of calling <code>super.equals()</code>
      * @return EqualsBuilder - used to chain calls.
-     * @since 2.0
      */
     public EqualsBuilder appendSuper(boolean superEquals) {
         if (isEquals == false) {
diff --git a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java
index b116e6428..ff7338224 100644
--- a/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java
+++ b/src/java/org/apache/commons/lang/builder/HashCodeBuilder.java
@@ -112,7 +112,7 @@ import java.lang.reflect.Modifier;
  * @author Gary Gregory
  * @author Pete Gieser
  * @since 1.0
- * @version $Id: HashCodeBuilder.java,v 1.19 2003/08/21 15:52:54 ggregory Exp $
+ * @version $Id: HashCodeBuilder.java,v 1.18 2003/08/18 02:22:24 bayard Exp $
  */
 public class HashCodeBuilder {
 
@@ -310,7 +310,6 @@ public class HashCodeBuilder {
      * @return int hash code
      * @throws IllegalArgumentException if the Object is <code>null</code>
      * @throws IllegalArgumentException if the number is zero or even
-     * @since 2.0
      */
     public static int reflectionHashCode(
         int initialNonZeroOddNumber,
@@ -367,7 +366,6 @@ public class HashCodeBuilder {
      *
      * @param superHashCode  the result of calling <code>super.hashCode()</code>
      * @return this HashCodeBuilder, used to chain calls.
-     * @since 2.0
      */
     public HashCodeBuilder appendSuper(int superHashCode) {
         iTotal = iTotal * iConstant + superHashCode;
diff --git a/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java b/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java
index 4140e5194..d9d283310 100644
--- a/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java
+++ b/src/java/org/apache/commons/lang/builder/StandardToStringStyle.java
@@ -66,7 +66,7 @@ package org.apache.commons.lang.builder;
  * @author Stephen Colebourne
  * @author Pete Gieser
  * @since 1.0
- * @version $Id: StandardToStringStyle.java,v 1.14 2003/08/21 15:52:54 ggregory Exp $
+ * @version $Id: StandardToStringStyle.java,v 1.13 2003/08/18 02:22:24 bayard Exp $
  */
 public class StandardToStringStyle extends ToStringStyle {
     
@@ -103,7 +103,6 @@ public class StandardToStringStyle extends ToStringStyle {
      * <p>Gets whether to output short or long class names.</p>
      *
      * @return the current useShortClassName flag
-     * @since 2.0
      */
     public boolean isUseShortClassName() {
         return super.isUseShortClassName();
@@ -124,7 +123,6 @@ public class StandardToStringStyle extends ToStringStyle {
      * <p>Sets whether to output short or long class names.</p>
      *
      * @param useShortClassName  the new useShortClassName flag
-     * @since 2.0
      */
     public void setUseShortClassName(boolean useShortClassName) {
         super.setUseShortClassName(useShortClassName);
@@ -400,7 +398,6 @@ public class StandardToStringStyle extends ToStringStyle {
      * of each buffer.</p>
      * 
      * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag
-     * @since 2.0
      */
     public void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {
         super.setFieldSeparatorAtStart(fieldSeparatorAtStart);
@@ -413,7 +410,6 @@ public class StandardToStringStyle extends ToStringStyle {
      * of each buffer.</p>
      * 
      * @return fieldSeparatorAtEnd flag
-     * @since 2.0
      */
     public boolean isFieldSeparatorAtEnd() {
         return super.isFieldSeparatorAtEnd();
@@ -424,7 +420,6 @@ public class StandardToStringStyle extends ToStringStyle {
      * of each buffer.</p>
      * 
      * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag
-     * @since 2.0
      */
     public void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {
         super.setFieldSeparatorAtEnd(fieldSeparatorAtEnd);
diff --git a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java
index 41836c93a..2529bdca5 100644
--- a/src/java/org/apache/commons/lang/builder/ToStringBuilder.java
+++ b/src/java/org/apache/commons/lang/builder/ToStringBuilder.java
@@ -125,7 +125,7 @@ import org.apache.commons.lang.ObjectUtils;
  * @author Gary Gregory
  * @author Pete Gieser
  * @since 1.0
- * @version $Id: ToStringBuilder.java,v 1.28 2003/08/21 15:52:54 ggregory Exp $
+ * @version $Id: ToStringBuilder.java,v 1.27 2003/08/18 02:22:24 bayard Exp $
  */
 public class ToStringBuilder {
 
@@ -183,7 +183,6 @@ public class ToStringBuilder {
      * <p>Forwards to <code>ReflectionToStringBuilder</code>.</p>
      * 
      * @see ReflectionToStringBuilder#toString(Object,ToStringStyle,boolean,Class)
-     * @since 2.0
      */
     public static String reflectionToString(
         Object object,
@@ -973,7 +972,6 @@ public class ToStringBuilder {
      * {@link System#identityHashCode(java.lang.Object)}.</p>
      * 
      * @param object  the <code>Object</code> whose class name and id to output
-     * @since 2.0
      */
     public ToStringBuilder appendAsObjectToString(Object object) {
         ObjectUtils.appendIdentityToString(this.getStringBuffer(), object);
@@ -992,7 +990,6 @@ public class ToStringBuilder {
      *
      * @param superToString  the result of <code>super.toString()</code>
      * @return this
-     * @since 2.0
      */
     public ToStringBuilder appendSuper(String superToString) {
         if (superToString != null) {
@@ -1026,7 +1023,6 @@ public class ToStringBuilder {
      *
      * @param toString  the result of <code>toString()</code> on another object
      * @return this
-     * @since 2.0
      */
     public ToStringBuilder appendToString(String toString) {
         if (toString != null) {
@@ -1050,7 +1046,6 @@ public class ToStringBuilder {
      * <p>Gets the <code>ToStringStyle</code> being used.</p>
      * 
      * @return the <code>ToStringStyle</code> being used
-     * @since 2.0
      */
     public ToStringStyle getStyle() {
         return style;
@@ -1073,7 +1068,6 @@ public class ToStringBuilder {
      * <p>Returns the <code>Object</code> being output.</p>
      * 
      * @return The object being output.
-     * @since 2.0
      */
     public Object getObject() {
         return object;
diff --git a/src/java/org/apache/commons/lang/builder/ToStringStyle.java b/src/java/org/apache/commons/lang/builder/ToStringStyle.java
index 18866cddb..ba9d8d21c 100644
--- a/src/java/org/apache/commons/lang/builder/ToStringStyle.java
+++ b/src/java/org/apache/commons/lang/builder/ToStringStyle.java
@@ -87,7 +87,7 @@ import org.apache.commons.lang.SystemUtils;
  * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a>
  * @author Pete Gieser
  * @since 1.0
- * @version $Id: ToStringStyle.java,v 1.25 2003/08/21 15:52:54 ggregory Exp $
+ * @version $Id: ToStringStyle.java,v 1.24 2003/08/18 02:22:24 bayard Exp $
  */
 public abstract class ToStringStyle implements Serializable {
 
@@ -221,7 +221,6 @@ public abstract class ToStringStyle implements Serializable {
      * 
      * @param buffer  the <code>StringBuffer</code> to populate
      * @param toString  the additional <code>toString</code>
-     * @since 2.0
      */
     public void appendToString(StringBuffer buffer, String toString) {
         if (toString != null) {
@@ -272,7 +271,6 @@ public abstract class ToStringStyle implements Serializable {
      * <p>Remove the last field separator from the buffer.</p>
      * 
      * @param buffer  the <code>StringBuffer</code> to populate
-     * @since 2.0
      */
     protected void removeLastFieldSeparator(StringBuffer buffer) {
         int len = buffer.length();
@@ -764,7 +762,6 @@ public abstract class ToStringStyle implements Serializable {
      * @param fieldName  the field name, typically not used as already appended
      * @param array  the array to add to the <code>toString</code>,
      *  not <code>null</code>
-     * @since 2.0
      */
     protected void reflectionAppendArrayDetail(StringBuffer buffer, String fieldName, Object array) {
         buffer.append(arrayStart);
@@ -1462,7 +1459,6 @@ public abstract class ToStringStyle implements Serializable {
      * <p>Gets whether to output short or long class names.</p>
      *
      * @return the current useShortClassName flag
-     * @since 2.0
      */
     protected boolean isUseShortClassName() {
         return useShortClassName;
@@ -1483,7 +1479,6 @@ public abstract class ToStringStyle implements Serializable {
      * <p>Sets whether to output short or long class names.</p>
      *
      * @param useShortClassName  the new useShortClassName flag
-     * @since 2.0
      */
     protected void setUseShortClassName(boolean useShortClassName) {
         this.useShortClassName = useShortClassName;
@@ -1771,7 +1766,6 @@ public abstract class ToStringStyle implements Serializable {
      * of each buffer.</p>
      * 
      * @return the fieldSeparatorAtStart flag
-     * @since 2.0
      */
     protected boolean isFieldSeparatorAtStart() {
         return fieldSeparatorAtStart;
@@ -1782,7 +1776,6 @@ public abstract class ToStringStyle implements Serializable {
      * of each buffer.</p>
      * 
      * @param fieldSeparatorAtStart  the fieldSeparatorAtStart flag
-     * @since 2.0
      */
     protected void setFieldSeparatorAtStart(boolean fieldSeparatorAtStart) {
         this.fieldSeparatorAtStart = fieldSeparatorAtStart;
@@ -1795,7 +1788,6 @@ public abstract class ToStringStyle implements Serializable {
      * of each buffer.</p>
      * 
      * @return fieldSeparatorAtEnd flag
-     * @since 2.0
      */
     protected boolean isFieldSeparatorAtEnd() {
         return fieldSeparatorAtEnd;
@@ -1806,7 +1798,6 @@ public abstract class ToStringStyle implements Serializable {
      * of each buffer.</p>
      * 
      * @param fieldSeparatorAtEnd  the fieldSeparatorAtEnd flag
-     * @since 2.0
      */
     protected void setFieldSeparatorAtEnd(boolean fieldSeparatorAtEnd) {
         this.fieldSeparatorAtEnd = fieldSeparatorAtEnd;
diff --git a/src/java/org/apache/commons/lang/enum/Enum.java b/src/java/org/apache/commons/lang/enum/Enum.java
index 293bd3d40..ea2bfc294 100644
--- a/src/java/org/apache/commons/lang/enum/Enum.java
+++ b/src/java/org/apache/commons/lang/enum/Enum.java
@@ -220,7 +220,7 @@ import org.apache.commons.lang.StringUtils;
  * @author Chris Webb
  * @author Mike Bowler
  * @since 1.0
- * @version $Id: Enum.java,v 1.21 2003/08/21 15:52:55 ggregory Exp $
+ * @version $Id: Enum.java,v 1.20 2003/08/18 02:22:24 bayard Exp $
  */
 public abstract class Enum implements Comparable, Serializable {
 
@@ -233,25 +233,20 @@ public abstract class Enum implements Comparable, Serializable {
      * An empty <code>Map</code>, as JDK1.2 didn't have an empty map.
      */
     private static final Map EMPTY_MAP = Collections.unmodifiableMap(new HashMap(0));
-    
     /**
      * <code>Map</code>, key of class name, value of <code>Entry</code>.
      */
     private static final Map cEnumClasses = new HashMap();
-    
     /**
      * The string representation of the Enum.
      */
     private final String iName;
-    
     /**
      * The hashcode representation of the Enum.
      */
     private transient final int iHashCode;
-    
     /**
      * The toString representation of the Enum.
-     * @since 2.0
      */
     protected transient String iToString = null;
 
@@ -498,7 +493,6 @@ public abstract class Enum implements Comparable, Serializable {
      * constant value.</p>
      * 
      * @return the <code>Class</code> of the enum
-     * @since 2.0
      */
     public Class getEnumClass() {
         return getClass();
diff --git a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
index 1a7355f54..84b5e1112 100644
--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
@@ -80,7 +80,7 @@ import org.apache.commons.lang.SystemUtils;
  * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a>
  * @author Pete Gieser
  * @since 1.0
- * @version $Id: ExceptionUtils.java,v 1.34 2003/08/21 15:52:55 ggregory Exp $
+ * @version $Id: ExceptionUtils.java,v 1.33 2003/08/18 02:22:24 bayard Exp $
  */
 public class ExceptionUtils {
     
@@ -134,7 +134,6 @@ public class ExceptionUtils {
      * 
      * @param methodName  the methodName to add to the list, <code>null</code>
      *  and empty strings are ignored
-     * @since 2.0
      */
     public static void addCauseMethodName(String methodName) {
         if (StringUtils.isNotEmpty(methodName)) {
@@ -323,7 +322,6 @@ public class ExceptionUtils {
      * <p>This is true for JDK 1.4 and above.</p>
      * 
      * @return true if Throwable is nestable
-     * @since 2.0
      */
     public static boolean isThrowableNested() {
         return (THROWABLE_CAUSE_METHOD != null);
@@ -336,7 +334,6 @@ public class ExceptionUtils {
      *
      * @param throwable  the <code>Throwable</code> to examine, may be null
      * @return boolean <code>true</code> if nested otherwise <code>false</code>
-     * @since 2.0
      */
     public static boolean isNestedThrowable(Throwable throwable) {
         if (throwable == null) {
@@ -487,7 +484,6 @@ public class ExceptionUtils {
      * that don't have nested causes.</p>
      * 
      * @param throwable  the throwable to output
-     * @since 2.0
      */
     public static void printRootCauseStackTrace(Throwable throwable) {
         printRootCauseStackTrace(throwable, System.err);
@@ -507,7 +503,6 @@ public class ExceptionUtils {
      * @param throwable  the throwable to output, may be null
      * @param stream  the stream to output to, may not be null
      * @throws IllegalArgumentException if the stream is <code>null</code>
-     * @since 2.0
      */
     public static void printRootCauseStackTrace(Throwable throwable, PrintStream stream) {
         if (throwable == null) {
@@ -537,7 +532,6 @@ public class ExceptionUtils {
      * @param throwable  the throwable to output, may be null
      * @param writer  the writer to output to, may not be null
      * @throws IllegalArgumentException if the writer is <code>null</code>
-     * @since 2.0
      */
     public static void printRootCauseStackTrace(Throwable throwable, PrintWriter writer) {
         if (throwable == null) {
@@ -560,7 +554,6 @@ public class ExceptionUtils {
      * 
      * @param throwable  the throwable to examine, may be null
      * @return an array of stack trace frames, never null
-     * @since 2.0
      */
     public static String[] getRootCauseStackTrace(Throwable throwable) {
         if (throwable == null) {
@@ -594,7 +587,6 @@ public class ExceptionUtils {
      * @param causeFrames  stack trace of a cause throwable
      * @param wrapperFrames  stack trace of a wrapper throwable
      * @throws IllegalArgumentException if either argument is null
-     * @since 2.0
      */
     public static void removeCommonFrames(List causeFrames, List wrapperFrames) {
         if (causeFrames == null || wrapperFrames == null) {
@@ -635,7 +627,6 @@ public class ExceptionUtils {
      *
      * @param throwable  the <code>Throwable</code> to be examined
      * @return the nested stack trace, with the root cause first
-     * @since 2.0
      */
     public static String getFullStackTrace(Throwable throwable) {
         StringWriter sw = new StringWriter();
