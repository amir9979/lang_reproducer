diff --git a/src/java/org/apache/commons/lang3/ArrayUtils.java b/src/java/org/apache/commons/lang3/ArrayUtils.java
index 39c173571..7ef7ace81 100644
--- a/src/java/org/apache/commons/lang3/ArrayUtils.java
+++ b/src/java/org/apache/commons/lang3/ArrayUtils.java
@@ -2950,7 +2950,6 @@ public class ArrayUtils {
      *      The type of the new array is the type of the first array,
      *      unless the first array is null, in which case the type is the same as the second array.
      * @since 2.1
-     * @throws IllegalArgumentException if the array types are incompatible
      */
     public static <T> T[] addAll(T[] array1, T... array2) {
         if (array1 == null) {
@@ -2965,15 +2964,10 @@ public class ArrayUtils {
         try {
             System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);
         } catch (ArrayStoreException ase) {
-            // Check if problem was due to incompatible types
-            /*
-             * We do this here, rather than before the copy because:
-             * - it would be a wasted check most of the time
-             * - safer, in case check turns out to be too strict
-             */
+            // Check if problem is incompatible types
             final Class<?> type2 = array2.getClass().getComponentType();
             if (!type1.isAssignableFrom(type2)){
-                throw new IllegalArgumentException("Cannot store "+type2.getName()+" in an array of "+type1.getName(), ase);
+                throw new IllegalArgumentException("Cannot store "+type2.getName()+" in an array of "+type1.getName());
             }
             throw ase; // No, so rethrow original
         }
