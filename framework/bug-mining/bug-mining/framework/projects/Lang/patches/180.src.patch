diff --git a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
index 0e5e36d3e..d4bd7fd50 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
@@ -18,8 +18,6 @@ package org.apache.commons.lang3.text.translate;
 
 import java.io.IOException;
 import java.io.Writer;
-import java.util.Arrays;
-import java.util.EnumSet;
 
 /**
  * Translate XML numeric entities of the form &#[xX]?\d+;? to 
@@ -32,41 +30,6 @@ import java.util.EnumSet;
  */
 public class NumericEntityUnescaper extends CharSequenceTranslator {
 
-    public static enum OPTION { semiColonRequired, semiColonOptional, errorIfNoSemiColon }
-
-    // TODO?: Create an OptionsSet class to hide some of the conditional logic below
-    private final EnumSet<OPTION> options;
-
-    /**
-     * Create a UnicodeUnescaper.
-     *
-     * The constructor takes a list of options, only one of which is currently 
-     * available (whether to allow the semi-colon on the end of a numeric entity to 
-     * be optional. 
-     *
-     * For example, to support numeric entities without a ';':
-     *    new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional)
-     *
-     * @param options to apply to this unescaper
-     */
-    public NumericEntityUnescaper(OPTION... options) {
-        if(options.length > 0) {
-            this.options = EnumSet.copyOf(Arrays.asList(options));
-        } else {
-            this.options = EnumSet.copyOf(Arrays.asList(new OPTION[] { OPTION.semiColonRequired }));
-        }
-    }
-
-    /**
-     * Whether the passed in option is currently set.
-     *
-     * @param option to check state of
-     * @return whether the option is set
-     */
-    public boolean isSet(OPTION option) { 
-        return (options == null) ? false : options.contains(option);
-    }
-
     /**
      * {@inheritDoc}
      */
@@ -98,17 +61,6 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
                 end++;
             }
 
-            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');
-
-            if(!semiNext) {
-                if(isSet(OPTION.semiColonRequired)) {
-                    return 0;
-                } else
-                if(isSet(OPTION.errorIfNoSemiColon)) {
-                    throw new RuntimeException("Semi-colon required at end of numeric entity");
-                }
-            }
-
             int entityValue;
             try {
                 if(isHex) {
@@ -128,6 +80,8 @@ public class NumericEntityUnescaper extends CharSequenceTranslator {
                 out.write(entityValue);
             }
 
+            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');
+
             return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);
         }
         return 0;
