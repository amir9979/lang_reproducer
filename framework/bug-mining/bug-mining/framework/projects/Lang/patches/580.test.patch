diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
index 971bd5c52..db3d5d2ff 100644
--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
@@ -68,12 +68,11 @@ public class NumberUtilsTest {
             + " for isCreatable/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
     }
 
-    @SuppressWarnings("deprecation")
     private void compareIsNumberWithCreateNumber(final String val, final boolean expected) {
-        final boolean isValid = NumberUtils.isNumber(val);
+        final boolean isValid = NumberUtils.isCreatable(val);
         final boolean canCreate = checkCreateNumber(val);
         assertTrue(isValid == expected && canCreate == expected, "Expecting " + expected
-            + " for isNumber/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
+            + " for isCreatable/createNumber using \"" + val + "\" but got " + isValid + " and " + canCreate);
     }
 
     @Test
@@ -639,22 +638,6 @@ public class NumberUtilsTest {
         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal)
         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308"));
 
-        // Requested type is parsed as zero but the value is not zero
-        final Double nonZero1 = Double.valueOf(((double) Float.MIN_VALUE) / 2);
-        assertEquals(nonZero1, NumberUtils.createNumber(nonZero1.toString()));
-        assertEquals(nonZero1, NumberUtils.createNumber(nonZero1.toString() + "F"));
-        // Smallest double is 4.9e-324.
-        // Test a number with zero before and/or after the decimal place to hit edge cases.
-        final BigDecimal nonZero2 = new BigDecimal("4.9e-325");
-        assertEquals(nonZero2, NumberUtils.createNumber("4.9e-325"));
-        assertEquals(nonZero2, NumberUtils.createNumber("4.9e-325D"));
-        final BigDecimal nonZero3 = new BigDecimal("1e-325");
-        assertEquals(nonZero3, NumberUtils.createNumber("1e-325"));
-        assertEquals(nonZero3, NumberUtils.createNumber("1e-325D"));
-        final BigDecimal nonZero4 = new BigDecimal("0.1e-325");
-        assertEquals(nonZero4, NumberUtils.createNumber("0.1e-325"));
-        assertEquals(nonZero4, NumberUtils.createNumber("0.1e-325D"));
-
         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678"));
         assertEquals(Long.valueOf(0x123456789L), NumberUtils.createNumber("0x123456789"));
 
@@ -674,55 +657,6 @@ public class NumberUtilsTest {
         assertEquals(new BigInteger("1777777777777777777777", 8), NumberUtils.createNumber("01777777777777777777777"));
     }
 
-    /**
-     * LANG-1646: Support the requested Number type (Long, Float, Double) of valid zero input.
-     */
-    @Test
-    public void testCreateNumberZero() {
-        // Handle integers
-        assertEquals(Integer.valueOf(0), NumberUtils.createNumber("0"));
-        assertEquals(Integer.valueOf(0), NumberUtils.createNumber("-0"));
-        assertEquals(Long.valueOf(0), NumberUtils.createNumber("0L"));
-        assertEquals(Long.valueOf(0), NumberUtils.createNumber("-0L"));
-
-        // Handle floating-point with optional leading sign, trailing exponent (eX)
-        // and format specifier (F or D).
-        // This should allow: 0. ; .0 ; 0.0 ; 0 (if exponent or format specifier is present)
-
-        // Exponent does not matter for zero
-        final int[] exponents = {-2345, 0, 13};
-        final String[] zeros = {"0.", ".0", "0.0", "0"};
-        final Float f0 = Float.valueOf(0);
-        final Float fn0 = Float.valueOf(-0F);
-        final Double d0 = Double.valueOf(0);
-        final Double dn0 = Double.valueOf(-0D);
-
-        for (final String zero : zeros) {
-            // Assume float if no preference.
-            // This requires a decimal point if there is no exponent.
-            if (zero.indexOf('.') != -1) {
-                assertCreateNumberZero(zero, f0, fn0);
-            }
-            for (final int exp : exponents) {
-                assertCreateNumberZero(zero + "e" + exp, f0, fn0);
-            }
-            // Type preference
-            assertCreateNumberZero(zero + "F", f0, fn0);
-            assertCreateNumberZero(zero + "D", d0, dn0);
-            for (final int exp : exponents) {
-                final String number = zero + "e" + exp;
-                assertCreateNumberZero(number + "F", f0, fn0);
-                assertCreateNumberZero(number + "D", d0, dn0);
-            }
-        }
-    }
-
-    private static void assertCreateNumberZero(String number, Object zero, Object negativeZero) {
-        assertEquals(zero, NumberUtils.createNumber(number), () -> "Input: " + number);
-        assertEquals(zero, NumberUtils.createNumber("+" + number), () -> "Input: +" + number);
-        assertEquals(negativeZero, NumberUtils.createNumber("-" + number), () -> "Input: -" + number);
-    }
-
     /**
      * Tests isCreatable(String) and tests that createNumber(String) returns a valid number iff isCreatable(String)
      * returns false.
@@ -783,14 +717,6 @@ public class NumberUtilsTest {
         compareIsCreatableWithCreateNumber("+0xF", true); // LANG-1645
         compareIsCreatableWithCreateNumber("+0xFFFFFFFF", true); // LANG-1645
         compareIsCreatableWithCreateNumber("+0xFFFFFFFFFFFFFFFF", true); // LANG-1645
-        compareIsCreatableWithCreateNumber(".0", true); // LANG-1646
-        compareIsCreatableWithCreateNumber("0.", true); // LANG-1646
-        compareIsCreatableWithCreateNumber("0.D", true); // LANG-1646
-        compareIsCreatableWithCreateNumber("0e1", true); // LANG-1646
-        compareIsCreatableWithCreateNumber("0e1D", true); // LANG-1646
-        compareIsCreatableWithCreateNumber(".D", false); // LANG-1646
-        compareIsCreatableWithCreateNumber(".e10", false); // LANG-1646
-        compareIsCreatableWithCreateNumber(".e10D", false); // LANG-1646
     }
 
     @Test
@@ -869,14 +795,6 @@ public class NumberUtilsTest {
         compareIsNumberWithCreateNumber("+0xF", true); // LANG-1645
         compareIsNumberWithCreateNumber("+0xFFFFFFFF", true); // LANG-1645
         compareIsNumberWithCreateNumber("+0xFFFFFFFFFFFFFFFF", true); // LANG-1645
-        compareIsNumberWithCreateNumber(".0", true); // LANG-1646
-        compareIsNumberWithCreateNumber("0.", true); // LANG-1646
-        compareIsNumberWithCreateNumber("0.D", true); // LANG-1646
-        compareIsNumberWithCreateNumber("0e1", true); // LANG-1646
-        compareIsNumberWithCreateNumber("0e1D", true); // LANG-1646
-        compareIsNumberWithCreateNumber(".D", false); // LANG-1646
-        compareIsNumberWithCreateNumber(".e10", false); // LANG-1646
-        compareIsNumberWithCreateNumber(".e10D", false); // LANG-1646
     }
 
     @Test
