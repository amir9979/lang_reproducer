diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java
index bbb5e78da..b76e2695e 100644
--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java
+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java
@@ -315,7 +315,7 @@ public class RandomStringUtils {
      * to {@code ' '} and {@code 'z'}, the ASCII printable
      * characters, will be used, unless letters and numbers are both
      * {@code false}, in which case, start and end are set to
-     * {@code 0} and {@link Character#MAX_CODE_POINT}.
+     * {@code 0} and {@code Integer.MAX_VALUE}.
      *
      * <p>If set is not {@code null}, characters between start and
      * end are chosen.</p>
@@ -356,7 +356,7 @@ public class RandomStringUtils {
                 end = chars.length;
             } else {
                 if (!letters && !numbers) {
-                    end = Character.MAX_CODE_POINT;
+                    end = Integer.MAX_VALUE;
                 } else {
                     end = 'z' + 1;
                     start = ' ';                
@@ -379,49 +379,50 @@ public class RandomStringUtils {
             }
         }
 
-        StringBuffer buffer = new StringBuffer(count);
+        final char[] buffer = new char[count];
         final int gap = end - start;
 
         while (count-- != 0) {
-            int codePoint;
+            char ch;
             if (chars == null) {
-                codePoint = random.nextInt(gap) + start;
-                
-                switch (Character.getType(codePoint)) {
-                case Character.UNASSIGNED:
-                case Character.PRIVATE_USE:
-                case Character.SURROGATE:
-                    count++;
-                    continue;
-                }
-                
+                ch = (char) (random.nextInt(gap) + start);
             } else {
-                codePoint = chars[random.nextInt(gap) + start];
-            }
-            
-            final int numberOfChars = Character.charCount(codePoint);
-            if (count == 0 && numberOfChars > 1) {
-                count++;
-                continue;
+                ch = chars[random.nextInt(gap) + start];
             }
-            
-            if (letters && Character.isLetter(codePoint)
-                    || numbers && Character.isDigit(codePoint)
-                    || !letters && !numbers) {               
-                buffer.appendCodePoint(codePoint);
-                
-                if (numberOfChars == 2) {
-                    count--;
+            if (letters && Character.isLetter(ch)
+                    || numbers && Character.isDigit(ch)
+                    || !letters && !numbers) {
+                if(ch >= 56320 && ch <= 57343) {
+                    if(count == 0) {
+                        count++;
+                    } else {
+                        // low surrogate, insert high surrogate after putting it in
+                        buffer[count] = ch;
+                        count--;
+                        buffer[count] = (char) (55296 + random.nextInt(128));
+                    }
+                } else if(ch >= 55296 && ch <= 56191) {
+                    if(count == 0) {
+                        count++;
+                    } else {
+                        // high surrogate, insert low surrogate before putting it in
+                        buffer[count] = (char) (56320 + random.nextInt(128));
+                        count--;
+                        buffer[count] = ch;
+                    }
+                } else if(ch >= 56192 && ch <= 56319) {
+                    // private high surrogate, no effing clue, so skip it
+                    count++;
+                } else {
+                    buffer[count] = ch;
                 }
-                
             } else {
                 count++;
             }
         }
-        return buffer.toString();
+        return new String(buffer);
     }
 
-
     /**
      * <p>Creates a random string whose length is the number of characters
      * specified.</p>
