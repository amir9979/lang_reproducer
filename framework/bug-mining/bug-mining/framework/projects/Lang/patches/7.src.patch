diff --git a/src/java/org/apache/commons/lang/CharEncoding.java b/src/java/org/apache/commons/lang/CharEncoding.java
index 2013e3e9e..651be907c 100644
--- a/src/java/org/apache/commons/lang/CharEncoding.java
+++ b/src/java/org/apache/commons/lang/CharEncoding.java
@@ -19,21 +19,15 @@ package org.apache.commons.lang;
 import java.io.UnsupportedEncodingException;
 
 /**
- * <p>
- * Character encoding names required of every implementation of the Java platform.
- * </p>
+ * <p>Character encoding names required of every implementation of the Java platform.</p>
  * 
- * <p>
- * According to <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character
- * encoding names</a>:
- * <p>
+ * <p>According to the Java documentation
+ * <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding names</a>:<br />
  * <cite>Every implementation of the Java platform is required to support the following character encodings. Consult the
- * release documentation for your implementation to see if any other encodings are supported.</cite>
- * </p>
+ * release documentation for your implementation to see if any other encodings are supported. </cite>
  * </p>
  * 
- * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding
- *      names</a>
+ * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding names</a>
  * @author Apache Software Foundation
  * @since 2.1
  * @version $Id$
@@ -48,8 +42,7 @@ public class CharEncoding {
      * Every implementation of the Java platform is required to support this character encoding.
      * </p>
      * 
-     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character
-     *      encoding names</a>
+     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding names</a>
      */
     public static final String ISO_8859_1 = "ISO-8859-1";
 
@@ -61,8 +54,7 @@ public class CharEncoding {
      * Every implementation of the Java platform is required to support this character encoding.
      * </p>
      * 
-     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character
-     *      encoding names</a>
+     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding names</a>
      */
     public static final String US_ASCII = "US-ASCII";
 
@@ -75,8 +67,7 @@ public class CharEncoding {
      * Every implementation of the Java platform is required to support this character encoding.
      * </p>
      * 
-     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character
-     *      encoding names</a>
+     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding names</a>
      */
     public static final String UTF_16 = "UTF-16";
 
@@ -88,8 +79,7 @@ public class CharEncoding {
      * Every implementation of the Java platform is required to support this character encoding.
      * </p>
      * 
-     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character
-     *      encoding names</a>
+     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding names</a>
      */
     public static final String UTF_16BE = "UTF-16BE";
 
@@ -101,8 +91,7 @@ public class CharEncoding {
      * Every implementation of the Java platform is required to support this character encoding.
      * </p>
      * 
-     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character
-     *      encoding names</a>
+     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding names</a>
      */
     public static final String UTF_16LE = "UTF-16LE";
 
@@ -114,8 +103,7 @@ public class CharEncoding {
      * Every implementation of the Java platform is required to support this character encoding.
      * </p>
      * 
-     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character
-     *      encoding names</a>
+     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding names</a>
      */
     public static final String UTF_8 = "UTF-8";
 
@@ -124,18 +112,14 @@ public class CharEncoding {
      * Returns whether the named charset is supported.
      * </p>
      * <p>
-     * This is similar to <a
-     * href="http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html#isSupported(java.lang.String)">
-     * java.nio.charset.Charset.isSupported(String)</a>
+     * This is similar to
+     * <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/nio/charset/Charset.html#isSupported(java.lang.String)">java.nio.charset.Charset.isSupported(String)</a>
      * </p>
      * 
-     * @param name
-     *            the name of the requested charset; may be either a canonical name or an alias
-     * @return <code>true</code> if, and only if, support for the named charset is available in the current Java
-     *         virtual machine
+     * @param name  the name of the requested charset; may be either a canonical name or an alias
+     * @return <code>true</code> if, and only if, support for the named charset is available in the current Java virtual machine
      * 
-     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character
-     *      encoding names</a>
+     * @see <a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/package-summary.html#charenc">JRE character encoding names</a>
      */
     public static boolean isSupported(String name) {
         if (name == null) {
diff --git a/src/java/org/apache/commons/lang/StringEscapeUtils.java b/src/java/org/apache/commons/lang/StringEscapeUtils.java
index 95e6ef14b..837b6ec6f 100644
--- a/src/java/org/apache/commons/lang/StringEscapeUtils.java
+++ b/src/java/org/apache/commons/lang/StringEscapeUtils.java
@@ -400,12 +400,7 @@ public class StringEscapeUtils {
      * <p>Escapes the characters in a <code>String</code> using HTML entities.</p>
      *
      * <p>
-     * For example:
-     * </p> 
-     * <p><code>"bread" & "butter"</code></p>
-     * becomes:
-     * <p>
-     * <code>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</code>.
+     * For example: <tt>"bread" & "butter"</tt> => <tt>&amp;quot;bread&amp;quot; &amp;amp; &amp;quot;butter&amp;quot;</tt>.
      * </p>
      *
      * <p>Supports all known HTML 4.0 entities, including funky accents.</p>
diff --git a/src/java/org/apache/commons/lang/SystemUtils.java b/src/java/org/apache/commons/lang/SystemUtils.java
index 572d24778..c11a68228 100644
--- a/src/java/org/apache/commons/lang/SystemUtils.java
+++ b/src/java/org/apache/commons/lang/SystemUtils.java
@@ -424,8 +424,7 @@ public class SystemUtils {
      * @since 2.1
      * @since Java 1.4
      */
-    public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = 
-        getSystemProperty("java.util.prefs.PreferencesFactory");
+    public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = getSystemProperty("java.util.prefs.PreferencesFactory");
 
     /**
      * <p>The <code>java.vendor</code> System Property. Java vendor-specific string.</p>
diff --git a/src/java/org/apache/commons/lang/Validate.java b/src/java/org/apache/commons/lang/Validate.java
index 3486b3efd..df0349918 100644
--- a/src/java/org/apache/commons/lang/Validate.java
+++ b/src/java/org/apache/commons/lang/Validate.java
@@ -518,23 +518,18 @@ public class Validate {
     }
 
     /**
-     * <p>
-     * Validate an argument, throwing <code>IllegalArgumentException</code> if the argument collection is
-     * <code>null</code> or has elements that are not of type <code>clazz</code> or a subclass.
-     * </p>
-     * 
+     * <p>Validate an argument, throwing <code>IllegalArgumentException</code>
+     * if the argument collection  is <code>null</code> or has elements that are not of 
+     * type <code>clazz</code> or a subclass.</p>
+     *
      * <pre>
      * Validate.allElementsOfType(collection, String.class);
      * </pre>
+     *
+     * <p>The message in the exception is 'The validated collection contains an element not of type clazz at index: '.</p>
      * 
-     * <p>
-     * The message in the exception is 'The validated collection contains an element not of type clazz at index: '.
-     * </p>
-     * 
-     * @param collection
-     *            the collection to check, not null
-     * @param clazz
-     *            the <code>Class</code> which the collection's elements are expected to be, not null
+     * @param collection  the collection to check, not null
+     * @param clazz the <code>Class</code> which the collection's elements are expected to be, not null
      * @since 2.1
      */
     public static void allElementsOfType(Collection collection, Class clazz) {
diff --git a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java
index 64e767eb1..1663affb8 100644
--- a/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java
+++ b/src/java/org/apache/commons/lang/builder/ReflectionToStringBuilder.java
@@ -401,8 +401,7 @@ public class ReflectionToStringBuilder extends ToStringBuilder {
      *                  if the Object is <code>null</code>
      * @since 2.0
      */
-    public static String toString(Object object, ToStringStyle style, boolean outputTransients, 
-            Class reflectUpToClass) {
+    public static String toString(Object object, ToStringStyle style, boolean outputTransients, Class reflectUpToClass) {
         return new ReflectionToStringBuilder(object, style, null, reflectUpToClass, outputTransients).toString();
     }
 
diff --git a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
index bc1758c86..11350a85d 100644
--- a/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
+++ b/src/java/org/apache/commons/lang/time/DurationFormatUtils.java
@@ -229,7 +229,7 @@ public class DurationFormatUtils {
      * @return the time as a String
      */
     public static String formatPeriodISO(long startMillis, long endMillis) {
-        return formatPeriod(startMillis, endMillis, ISO_EXTENDED_FORMAT_PATTERN, false, TimeZone.getDefault());
+        return formatPeriod(startMillis, endMillis, ISO_EXTENDED_FORMAT_PATTERN, false, TimeZone.getDefault() );
     }
 
     /**
@@ -257,8 +257,7 @@ public class DurationFormatUtils {
      * @param timezone the millis are defined in
      * @return the time as a String
      */
-    public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, 
-            TimeZone timezone) {
+    public static String formatPeriod(long startMillis, long endMillis, String format, boolean padWithZeros, TimeZone timezone) {
 
         long millis = endMillis - startMillis;
         if (millis < 28 * DateUtils.MILLIS_PER_DAY) {
@@ -369,8 +368,9 @@ public class DurationFormatUtils {
      * @param padWithZeros  whether to pad
      * @return the formetted string
      */
-    static String format(Token[] tokens, int years, int months, int days, int hours, int minutes, int seconds,
-            int milliseconds, boolean padWithZeros) {
+    static String format(Token[] tokens, int years, int months, int days, int hours, 
+                                 int minutes, int seconds, int milliseconds, boolean padWithZeros) 
+    { 
         StringBuffer buffer = new StringBuffer();
         boolean lastOutputSeconds = false;
         int sz = tokens.length;
@@ -378,49 +378,40 @@ public class DurationFormatUtils {
             Token token = tokens[i];
             Object value = token.getValue();
             int count = token.getCount();
-            if (value instanceof StringBuffer) {
+            if(value instanceof StringBuffer) {
                 buffer.append(value.toString());
             } else {
                 if (value == y) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer
-                            .toString(years));
+                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(years), count, '0') : Integer.toString(years));
                     lastOutputSeconds = false;
                 } else if (value == M) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer
-                            .toString(months));
+                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(months), count, '0') : Integer.toString(months));
                     lastOutputSeconds = false;
                 } else if (value == d) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer
-                            .toString(days));
+                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(days), count, '0') : Integer.toString(days));
                     lastOutputSeconds = false;
                 } else if (value == H) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer
-                            .toString(hours));
+                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(hours), count, '0') : Integer.toString(hours));
                     lastOutputSeconds = false;
                 } else if (value == m) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer
-                            .toString(minutes));
+                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(minutes), count, '0') : Integer.toString(minutes));
                     lastOutputSeconds = false;
                 } else if (value == s) {
-                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer
-                            .toString(seconds));
+                    buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(seconds), count, '0') : Integer.toString(seconds));
                     lastOutputSeconds = true;
                 } else if (value == S) {
                     if (lastOutputSeconds) {
                         milliseconds += 1000;
-                        String str = padWithZeros
-                                ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0')
-                                : Integer.toString(milliseconds);
+                        String str = padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds);
                         buffer.append(str.substring(1));
                     } else {
-                        buffer.append(padWithZeros
-                                ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0')
-                                : Integer.toString(milliseconds));
+                        buffer.append(padWithZeros ? StringUtils.leftPad(Integer.toString(milliseconds), count, '0') : Integer.toString(milliseconds));
                     }
                     lastOutputSeconds = false;
                 }
             }
         }
+        
         return buffer.toString();
     }
 
diff --git a/src/java/org/apache/commons/lang/time/FastDateFormat.java b/src/java/org/apache/commons/lang/time/FastDateFormat.java
index cb6a5f951..a8d3dd8cc 100644
--- a/src/java/org/apache/commons/lang/time/FastDateFormat.java
+++ b/src/java/org/apache/commons/lang/time/FastDateFormat.java
@@ -445,8 +445,8 @@ public class FastDateFormat extends Format {
      * @throws IllegalArgumentException if the Locale has no date/time
      *  pattern defined
      */
-    public static synchronized FastDateFormat getDateTimeInstance(int dateStyle, int timeStyle, TimeZone timeZone,
-            Locale locale) {
+    public static synchronized FastDateFormat getDateTimeInstance(
+            int dateStyle, int timeStyle, TimeZone timeZone, Locale locale) {
 
         Object key = new Pair(new Integer(dateStyle), new Integer(timeStyle));
         if (timeZone != null) {
@@ -463,12 +463,11 @@ public class FastDateFormat extends Format {
             }
 
             try {
-                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle,
-                        locale);
+                SimpleDateFormat formatter = (SimpleDateFormat) DateFormat.getDateTimeInstance(dateStyle, timeStyle, locale);
                 String pattern = formatter.toPattern();
                 format = getInstance(pattern, timeZone, locale);
                 cDateTimeInstanceCache.put(key, format);
-
+                
             } catch (ClassCastException ex) {
                 throw new IllegalArgumentException("No date time pattern for locale: " + locale);
             }
