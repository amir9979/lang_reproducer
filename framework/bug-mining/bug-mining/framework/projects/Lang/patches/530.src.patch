diff --git a/src/main/java/org/apache/commons/lang3/AnnotationUtils.java b/src/main/java/org/apache/commons/lang3/AnnotationUtils.java
index bc51037c7..81bd0f0e5 100644
--- a/src/main/java/org/apache/commons/lang3/AnnotationUtils.java
+++ b/src/main/java/org/apache/commons/lang3/AnnotationUtils.java
@@ -68,13 +68,19 @@ public class AnnotationUtils {
          * {@inheritDoc}
          */
         @Override
-        protected String getShortClassName(final Class<?> cls) {
+        protected String getShortClassName(final java.lang.Class<?> cls) {
+            Class<? extends Annotation> annotationType = null;
             for (final Class<?> iface : ClassUtils.getAllInterfaces(cls)) {
                 if (Annotation.class.isAssignableFrom(iface)) {
-                    return "@" + iface.getName();
+                    @SuppressWarnings("unchecked") // OK because we just checked the assignability
+                    final
+                    Class<? extends Annotation> found = (Class<? extends Annotation>) iface;
+                    annotationType = found;
+                    break;
                 }
             }
-            return StringUtils.EMPTY;
+            return new StringBuilder(annotationType == null ? StringUtils.EMPTY : annotationType.getName())
+                    .insert(0, '@').toString();
         }
 
         /**
@@ -119,15 +125,15 @@ public class AnnotationUtils {
         if (a1 == null || a2 == null) {
             return false;
         }
-        final Class<? extends Annotation> type1 = a1.annotationType();
+        final Class<? extends Annotation> type = a1.annotationType();
         final Class<? extends Annotation> type2 = a2.annotationType();
-        Validate.notNull(type1, "Annotation %s with null annotationType()", a1);
+        Validate.notNull(type, "Annotation %s with null annotationType()", a1);
         Validate.notNull(type2, "Annotation %s with null annotationType()", a2);
-        if (!type1.equals(type2)) {
+        if (!type.equals(type2)) {
             return false;
         }
         try {
-            for (final Method m : type1.getDeclaredMethods()) {
+            for (final Method m : type.getDeclaredMethods()) {
                 if (m.getParameterTypes().length == 0
                         && isValidAnnotationMemberType(m.getReturnType())) {
                     final Object v1 = m.invoke(a1);
