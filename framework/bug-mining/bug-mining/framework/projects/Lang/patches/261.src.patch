diff --git a/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java b/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java
index d3b969ad1..ec0b931ee 100644
--- a/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java
+++ b/src/main/java/org/apache/commons/lang3/StringEscapeUtils.java
@@ -22,7 +22,6 @@ import java.io.Writer;
 import org.apache.commons.lang3.text.translate.AggregateTranslator;
 import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
 import org.apache.commons.lang3.text.translate.EntityArrays;
-import org.apache.commons.lang3.text.translate.JavaUnicodeEscaper;
 import org.apache.commons.lang3.text.translate.LookupTranslator;
 import org.apache.commons.lang3.text.translate.NumericEntityUnescaper;
 import org.apache.commons.lang3.text.translate.OctalUnescaper;
@@ -58,7 +57,7 @@ public class StringEscapeUtils {
           }).with(
             new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE())
           ).with(
-            JavaUnicodeEscaper.outsideOf(32, 0x7f) 
+            UnicodeEscaper.outsideOf(32, 0x7f) 
         );
 
     /**
@@ -80,7 +79,7 @@ public class StringEscapeUtils {
                             {"/", "\\/"}
                       }),
             new LookupTranslator(EntityArrays.JAVA_CTRL_CHARS_ESCAPE()),
-            JavaUnicodeEscaper.outsideOf(32, 0x7f) 
+            UnicodeEscaper.outsideOf(32, 0x7f) 
         );
             
     /**
diff --git a/src/main/java/org/apache/commons/lang3/text/translate/JavaUnicodeEscaper.java b/src/main/java/org/apache/commons/lang3/text/translate/JavaUnicodeEscaper.java
deleted file mode 100644
index 03f01d715..000000000
--- a/src/main/java/org/apache/commons/lang3/text/translate/JavaUnicodeEscaper.java
+++ /dev/null
@@ -1,96 +0,0 @@
-package org.apache.commons.lang3.text.translate;
-
-/**
- * Translates codepoints to their Unicode escaped value suitable for Java source.
- * 
- * @since 3.2
- * @version $Id$
- */
-public class JavaUnicodeEscaper extends UnicodeEscaper {
-
-    /**
-     * <p>
-     * Constructs a <code>JavaUnicodeEscaper</code> above the specified value (exclusive).
-     * </p>
-     * 
-     * @param codepoint
-     *            above which to escape
-     * @return the newly created {@code UnicodeEscaper} instance
-     */
-    public static JavaUnicodeEscaper above(int codepoint) {
-        return outsideOf(0, codepoint);
-    }
-
-    /**
-     * <p>
-     * Constructs a <code>JavaUnicodeEscaper</code> below the specified value (exclusive).
-     * </p>
-     * 
-     * @param codepoint
-     *            below which to escape
-     * @return the newly created {@code UnicodeEscaper} instance
-     */
-    public static JavaUnicodeEscaper below(int codepoint) {
-        return outsideOf(codepoint, Integer.MAX_VALUE);
-    }
-
-    /**
-     * <p>
-     * Constructs a <code>JavaUnicodeEscaper</code> between the specified values (inclusive).
-     * </p>
-     * 
-     * @param codepointLow
-     *            above which to escape
-     * @param codepointHigh
-     *            below which to escape
-     * @return the newly created {@code UnicodeEscaper} instance
-     */
-    public static JavaUnicodeEscaper between(int codepointLow, int codepointHigh) {
-        return new JavaUnicodeEscaper(codepointLow, codepointHigh, true);
-    }
-
-    /**
-     * <p>
-     * Constructs a <code>JavaUnicodeEscaper</code> outside of the specified values (exclusive).
-     * </p>
-     * 
-     * @param codepointLow
-     *            below which to escape
-     * @param codepointHigh
-     *            above which to escape
-     * @return the newly created {@code UnicodeEscaper} instance
-     */
-    public static JavaUnicodeEscaper outsideOf(int codepointLow, int codepointHigh) {
-        return new JavaUnicodeEscaper(codepointLow, codepointHigh, false);
-    }
-
-    /**
-     * <p>
-     * Constructs a <code>JavaUnicodeEscaper</code> for the specified range. This is the underlying method for the
-     * other constructors/builders. The <code>below</code> and <code>above</code> boundaries are inclusive when
-     * <code>between</code> is <code>true</code> and exclusive when it is <code>false</code>.
-     * </p>
-     * 
-     * @param below
-     *            int value representing the lowest codepoint boundary
-     * @param above
-     *            int value representing the highest codepoint boundary
-     * @param between
-     *            whether to escape between the boundaries or outside them
-     */
-    public JavaUnicodeEscaper(int below, int above, boolean between) {
-        super(below, above, between);
-    }
-
-    /**
-     * Converts the given codepoint to a hex string of the form {@code "\\uXXXX\\uXXXX"}
-     * 
-     * @param codePoint
-     *            a Unicode code point
-     */
-    protected String toUtf16Escape(int codepoint) {
-        char[] surrogatePair = Character.toChars(codepoint);
-        return "\\u" + hex(surrogatePair[0]) + "\\u" + hex(surrogatePair[1]);
-    }
-
-}
diff --git a/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java b/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java
index 4214064ce..05c122291 100644
--- a/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java
+++ b/src/main/java/org/apache/commons/lang3/text/translate/UnicodeEscaper.java
@@ -48,7 +48,7 @@ public class UnicodeEscaper extends CodePointTranslator {
      * @param above int value representing the highest codepoint boundary
      * @param between whether to escape between the boundaries or outside them
      */
-    protected UnicodeEscaper(int below, int above, boolean between) {
+    private UnicodeEscaper(int below, int above, boolean between) {
         this.below = below;
         this.above = above;
         this.between = between;
@@ -101,7 +101,7 @@ public class UnicodeEscaper extends CodePointTranslator {
      */
     @Override
     public boolean translate(int codepoint, Writer out) throws IOException {
-        if (between) {
+        if(between) {
             if (codepoint < below || codepoint > above) {
                 return false;
             }
@@ -113,7 +113,9 @@ public class UnicodeEscaper extends CodePointTranslator {
 
         // TODO: Handle potential + sign per various Unicode escape implementations
         if (codepoint > 0xffff) {
-            out.write(toUtf16Escape(codepoint));
+            // TODO: Figure out what to do. Output as two Unicodes?
+            //       Does this make this a Java-specific output class?
+            out.write("\\u" + hex(codepoint));
         } else if (codepoint > 0xfff) {
             out.write("\\u" + hex(codepoint));
         } else if (codepoint > 0xff) {
@@ -125,8 +127,4 @@ public class UnicodeEscaper extends CodePointTranslator {
         }
         return true;
     }
-
-    protected String toUtf16Escape(int codepoint) {
-        return "\\u" + hex(codepoint);
-    }
 }
