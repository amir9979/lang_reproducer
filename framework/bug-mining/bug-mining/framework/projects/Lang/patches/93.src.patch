diff --git a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
index add3890f3..7f76d9e7c 100644
--- a/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
+++ b/src/java/org/apache/commons/lang/exception/ExceptionUtils.java
@@ -28,9 +28,6 @@ import java.util.Arrays;
 import java.util.List;
 import java.util.StringTokenizer;
 
-import net.jcip.annotations.GuardedBy;
-import net.jcip.annotations.ThreadSafe;
-
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.ClassUtils;
 import org.apache.commons.lang.NullArgumentException;
@@ -49,7 +46,6 @@ import org.apache.commons.lang.SystemUtils;
  * @since 1.0
  * @version $Id$
  */
-@ThreadSafe
 public class ExceptionUtils {
     
     /**
@@ -60,13 +56,9 @@ public class ExceptionUtils {
      */
     static final String WRAPPED_MARKER = " [wrapped] ";
 
-    // Lock object for CAUSE_METHOD_NAMES
-    private static final Object CAUSE_METHOD_NAMES_LOCK = new Object();
-    
     /**
      * <p>The names of methods commonly used to access a wrapped exception.</p>
      */
-    @GuardedBy("CAUSE_METHOD_NAMES_LOCK")
     private static String[] CAUSE_METHOD_NAMES = {
         "getCause",
         "getNextException",
@@ -131,7 +123,7 @@ public class ExceptionUtils {
         if (StringUtils.isNotEmpty(methodName) && !isCauseMethodName(methodName)) {            
             List<String> list = getCauseMethodNameList();
             if (list.add(methodName)) {
-                synchronized(CAUSE_METHOD_NAMES_LOCK) {
+                synchronized(CAUSE_METHOD_NAMES) {
                     CAUSE_METHOD_NAMES = toArray(list);
                 }
             }
@@ -150,7 +142,7 @@ public class ExceptionUtils {
         if (StringUtils.isNotEmpty(methodName)) {
             List<String> list = getCauseMethodNameList();
             if (list.remove(methodName)) {
-                synchronized(CAUSE_METHOD_NAMES_LOCK) {
+                synchronized(CAUSE_METHOD_NAMES) {
                     CAUSE_METHOD_NAMES = toArray(list);
                 }
             }
@@ -230,7 +222,7 @@ public class ExceptionUtils {
      * @return {@link #CAUSE_METHOD_NAMES} as a List.
      */
     private static ArrayList<String> getCauseMethodNameList() {
-        synchronized(CAUSE_METHOD_NAMES_LOCK) {
+        synchronized(CAUSE_METHOD_NAMES) {
             return new ArrayList<String>(Arrays.asList(CAUSE_METHOD_NAMES));
         }
     }
@@ -245,7 +237,7 @@ public class ExceptionUtils {
      * @since 2.1
      */
     public static boolean isCauseMethodName(String methodName) {
-        synchronized(CAUSE_METHOD_NAMES_LOCK) {
+        synchronized(CAUSE_METHOD_NAMES) {
             return ArrayUtils.indexOf(CAUSE_METHOD_NAMES, methodName) >= 0;
         }
     }
@@ -282,7 +274,7 @@ public class ExceptionUtils {
      * @since 1.0
      */
     public static Throwable getCause(Throwable throwable) {
-        synchronized(CAUSE_METHOD_NAMES_LOCK) {
+        synchronized(CAUSE_METHOD_NAMES) {
             return getCause(throwable, CAUSE_METHOD_NAMES);
         }
     }
@@ -312,7 +304,7 @@ public class ExceptionUtils {
         Throwable cause = getCauseUsingWellKnownTypes(throwable);
         if (cause == null) {
             if (methodNames == null) {
-                synchronized(CAUSE_METHOD_NAMES_LOCK) {
+                synchronized(CAUSE_METHOD_NAMES) {
                     methodNames = CAUSE_METHOD_NAMES;
                 }
             }
@@ -471,7 +463,7 @@ public class ExceptionUtils {
         }
 
         Class<? extends Throwable> cls = throwable.getClass();
-        synchronized(CAUSE_METHOD_NAMES_LOCK) {
+        synchronized(CAUSE_METHOD_NAMES) {
             for (int i = 0, isize = CAUSE_METHOD_NAMES.length; i < isize; i++) {
                 try {
                     Method method = cls.getMethod(CAUSE_METHOD_NAMES[i], (Class[]) null);
