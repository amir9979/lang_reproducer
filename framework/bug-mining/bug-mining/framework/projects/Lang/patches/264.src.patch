diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
index 3cad969e9..f37697646 100644
--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
@@ -419,10 +419,11 @@ public class NumberUtils {
     /**
      * <p>Turns a string value into a java.lang.Number.</p>
      *
-     * <p>If the string starts with {@code 0x} or {@code -0x} (lower or upper case) or {@code #} or {@code -#}, it
-     * will be interpreted as a hexadecimal Integer - or Long, if the number of digits after the
-     * prefix is more than 8 - or BigInteger if there are more than 16 digits.
-     * </p>
+     * <p>If the string starts with <code>0x</code> or <code>-0x</code> (lower or upper case), it
+     * will be interpreted as a hexadecimal integer - or long, if the number of digits after the 0x
+     * prefix is more than 8.
+     * Values with leading <code>0</code>'s will not be interpreted as octal.</p>
+     *
      * <p>Then, the value is examined for a type qualifier on the end, i.e. one of
      * <code>'f','F','d','D','l','L'</code>.  If it is found, it starts 
      * trying to create successively larger types from the type specified
@@ -431,12 +432,7 @@ public class NumberUtils {
      * <p>If a type specifier is not found, it will check for a decimal point
      * and then try successively larger types from <code>Integer</code> to
      * <code>BigInteger</code> and from <code>Float</code> to
-    * <code>BigDecimal</code>.</p>
-    * 
-     * <p>
-     * Integral values with a leading {@code 0} will be interpreted as octal; the returned number will
-     * be Integer, Long or BigDecimal as appropriate.
-     * </p>
+     * <code>BigDecimal</code>.</p>
      *
      * <p>Returns <code>null</code> if the string is <code>null</code>.</p>
      *
@@ -463,7 +459,7 @@ public class NumberUtils {
                 break;
             }
         }
-        if (pfxLen > 0) { // we have a hex number
+        if (pfxLen > 0) {
             final int hexDigits = str.length() - pfxLen;
             if (hexDigits > 16) { // too many for Long
                 return createBigInteger(str);
@@ -478,11 +474,11 @@ public class NumberUtils {
         String dec;
         String exp;
         final int decPos = str.indexOf('.');
-        final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // TODO assumes both not present
+        final int expPos = str.indexOf('e') + str.indexOf('E') + 1;
 
-        if (decPos > -1) { // there is a decimal point
+        if (decPos > -1) {
 
-            if (expPos > -1) { // there is an exponent
+            if (expPos > -1) {
                 if (expPos < decPos || expPos > str.length()) {
                     throw new NumberFormatException(str + " is not a valid number.");
                 }
@@ -568,8 +564,8 @@ public class NumberUtils {
         } else {
             exp = null;
         }
-        if (dec == null && exp == null) { // no decimal point and no exponent
-            //Must be an Integer, Long, Biginteger
+        if (dec == null && exp == null) {
+            //Must be an int,long,bigint
             try {
                 return createInteger(str);
             } catch (final NumberFormatException nfe) { // NOPMD
@@ -581,9 +577,9 @@ public class NumberUtils {
                 // ignore the bad number
             }
             return createBigInteger(str);
-        }
 
-        //Must be a Float, Double, BigDecimal
+        }
+        //Must be a float,double,BigDec
         final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
         try {
             final Float f = createFloat(str);
