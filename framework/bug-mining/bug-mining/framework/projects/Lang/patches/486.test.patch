diff --git a/src/test/java/org/apache/commons/lang3/test/SystemDefaultsSwitchTest.java b/src/test/java/org/apache/commons/lang3/test/SystemDefaultsSwitchTest.java
index ed152bb79..f2cd6f52c 100644
--- a/src/test/java/org/apache/commons/lang3/test/SystemDefaultsSwitchTest.java
+++ b/src/test/java/org/apache/commons/lang3/test/SystemDefaultsSwitchTest.java
@@ -21,7 +21,6 @@ import static org.junit.Assert.assertEquals;
 import java.util.Locale;
 import java.util.TimeZone;
 
-import org.apache.commons.lang3.time.FastTimeZone;
 import org.junit.AfterClass;
 import org.junit.BeforeClass;
 import org.junit.Rule;
@@ -47,7 +46,7 @@ public class SystemDefaultsSwitchTest {
         TEST_DEFAULT_LOCALE = Locale.getDefault();
 
         DEFAULT_TIMEZONE_BEFORE_TEST = TimeZone.getDefault();
-        final TimeZone utc = FastTimeZone.getGmtTimeZone();
+        final TimeZone utc = TimeZone.getTimeZone("UTC");
         if (!DEFAULT_TIMEZONE_BEFORE_TEST.equals(utc)) {
             TimeZone.setDefault(utc);
         } else {
diff --git a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
index 603e7def9..a938caad4 100644
--- a/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/DateFormatUtilsTest.java
@@ -57,7 +57,7 @@ public class DateFormatUtilsTest {
     //-----------------------------------------------------------------------
     @Test
     public void testFormat() {
-        final Calendar c = Calendar.getInstance(FastTimeZone.getGmtTimeZone());
+        final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
         c.set(2005, Calendar.JANUARY, 1, 12, 0, 0);
         c.setTimeZone(TimeZone.getDefault());
         final StringBuilder buffer = new StringBuilder ();
@@ -81,7 +81,7 @@ public class DateFormatUtilsTest {
     //-----------------------------------------------------------------------
     @Test
     public void testFormatCalendar() {
-        final Calendar c = Calendar.getInstance(FastTimeZone.getGmtTimeZone());
+        final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
         c.set(2005, Calendar.JANUARY, 1, 12, 0, 0);
         c.setTimeZone(TimeZone.getDefault());
         final StringBuilder buffer = new StringBuilder ();
@@ -104,7 +104,7 @@ public class DateFormatUtilsTest {
 
     @Test
     public void testFormatUTC() {
-        final Calendar c = Calendar.getInstance(FastTimeZone.getGmtTimeZone());
+        final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
         c.set(2005, Calendar.JANUARY, 1, 12, 0, 0);
         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern()));
 
@@ -139,7 +139,7 @@ public class DateFormatUtilsTest {
     }
 
     private void testUTC(final String expectedValue, final String pattern) {
-        final TimeZone timeZone = FastTimeZone.getGmtTimeZone();
+        final TimeZone timeZone = TimeZone.getTimeZone("UTC");
         assertFormats(expectedValue, pattern, timeZone, createFebruaryTestDate(timeZone));
     }
 
@@ -180,7 +180,7 @@ public class DateFormatUtilsTest {
         assertFormats("Sun, 08 Jun 2003 10:11:12 -0300", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),
                 timeZone, june);
 
-        timeZone = FastTimeZone.getGmtTimeZone();
+        timeZone = TimeZone.getTimeZone("UTC");
         june = createJuneTestDate(timeZone);
         assertFormats("Sun, 08 Jun 2003 10:11:12 +0000", DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(),
                 timeZone, june);
diff --git a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
index 7dd3c8eb4..b5eb0fac8 100644
--- a/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/DurationFormatUtilsTest.java
@@ -452,7 +452,7 @@ public class DurationFormatUtilsTest {
     @Test
     public void testEdgeDurations() {
         // This test case must use a time zone without DST
-        TimeZone.setDefault(FastTimeZone.getGmtTimeZone());
+        TimeZone.setDefault(TimeZone.getTimeZone("UTC"));
         assertEqualDuration( "01", new int[] { 2006, 0, 15, 0, 0, 0 },
                              new int[] { 2006, 2, 10, 0, 0, 0 }, "MM");
         assertEqualDuration( "12", new int[] { 2005, 0, 15, 0, 0, 0 },
diff --git a/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java b/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
index be2d801ce..cf7c8fea8 100644
--- a/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java
@@ -311,7 +311,7 @@ public class FastDateFormatTest {
 
     @Test
     public void testLANG_1152() {
-        final TimeZone utc = FastTimeZone.getGmtTimeZone();
+        final TimeZone utc = TimeZone.getTimeZone("UTC");
         final Date date = new Date(Long.MAX_VALUE);
 
         String dateAsString = FastDateFormat.getInstance("yyyy-MM-dd", utc, Locale.US).format(date);
diff --git a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java
index e6243e41b..ff9180ce5 100644
--- a/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java
+++ b/src/test/java/org/apache/commons/lang3/time/FastDatePrinterTest.java
@@ -265,7 +265,7 @@ public class FastDatePrinterTest {
     @SystemDefaults(timezone="UTC")
     @Test
     public void testTimeZoneAsZ() throws Exception {
-        final Calendar c = Calendar.getInstance(FastTimeZone.getGmtTimeZone());
+        final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
         final FastDateFormat noColonFormat = FastDateFormat.getInstance("Z");
         assertEquals("+0000", noColonFormat.format(c));
 
diff --git a/src/test/java/org/apache/commons/lang3/time/FastTimeZoneTest.java b/src/test/java/org/apache/commons/lang3/time/FastTimeZoneTest.java
deleted file mode 100644
index acd750097..000000000
--- a/src/test/java/org/apache/commons/lang3/time/FastTimeZoneTest.java
+++ /dev/null
@@ -1,99 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.lang3.time;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-import java.util.TimeZone;
-
-/**
- * Tests for FastTimeZone
- */
-public class FastTimeZoneTest {
-
-    private static final int HOURS_23 = 23 * 60 * 60 * 1000;
-    private static final int HOURS_2 = 2 * 60 * 60 * 1000;
-    private static final int MINUTES_59 = 59 * 60 * 1000;
-    private static final int MINUTES_5 = 5 * 60 * 1000;
-
-    @Test
-    public void testGetGmtTimeZone() {
-        Assert.assertEquals(0, FastTimeZone.getGmtTimeZone().getRawOffset());
-    }
-
-    @Test
-    public void testBareGmt() {
-        Assert.assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("GMT"));
-    }
-
-    @Test
-    public void testZ() {
-        Assert.assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("Z"));
-    }
-
-    @Test
-    public void testUTC() {
-        Assert.assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("UTC"));
-    }
-
-    @Test
-    public void testZeroOffsetsReturnSingleton() {
-        Assert.assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("+0"));
-        Assert.assertEquals(FastTimeZone.getGmtTimeZone(), FastTimeZone.getTimeZone("-0"));
-    }
-
-    @Test
-    public void testOlson() {
-        Assert.assertEquals(TimeZone.getTimeZone("America/New_York"), FastTimeZone.getTimeZone("America/New_York"));
-    }
-
-    @Test
-    public void testGmtPrefix() {
-        Assert.assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("GMT+23:00").getRawOffset());
-        Assert.assertEquals(-HOURS_23, FastTimeZone.getGmtTimeZone("GMT-23:00").getRawOffset());
-    }
-
-    @Test
-    public void testSign() {
-        Assert.assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("+23:00").getRawOffset());
-        Assert.assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone("+2:00").getRawOffset());
-        Assert.assertEquals(-HOURS_23, FastTimeZone.getGmtTimeZone("-23:00").getRawOffset());
-        Assert.assertEquals(-HOURS_2, FastTimeZone.getGmtTimeZone("-2:00").getRawOffset());
-    }
-
-    @Test
-    public void testHoursColonMinutes() {
-        Assert.assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("23:00").getRawOffset());
-        Assert.assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone("2:00").getRawOffset());
-        Assert.assertEquals(MINUTES_59, FastTimeZone.getGmtTimeZone("00:59").getRawOffset());
-        Assert.assertEquals(MINUTES_5, FastTimeZone.getGmtTimeZone("00:5").getRawOffset());
-        Assert.assertEquals(HOURS_23+MINUTES_59, FastTimeZone.getGmtTimeZone("23:59").getRawOffset());
-        Assert.assertEquals(HOURS_2+MINUTES_5, FastTimeZone.getGmtTimeZone("2:5").getRawOffset());
-    }
-
-    @Test
-    public void testHoursMinutes() {
-        Assert.assertEquals(HOURS_23, FastTimeZone.getGmtTimeZone("2300").getRawOffset());
-        Assert.assertEquals(HOURS_2, FastTimeZone.getGmtTimeZone("0200").getRawOffset());
-        Assert.assertEquals(MINUTES_59, FastTimeZone.getGmtTimeZone("0059").getRawOffset());
-        Assert.assertEquals(MINUTES_5, FastTimeZone.getGmtTimeZone("0005").getRawOffset());
-        Assert.assertEquals(HOURS_23+MINUTES_59, FastTimeZone.getGmtTimeZone("2359").getRawOffset());
-        Assert.assertEquals(HOURS_2+MINUTES_5, FastTimeZone.getGmtTimeZone("0205").getRawOffset());
-    }
-
-}
diff --git a/src/test/java/org/apache/commons/lang3/time/GmtTimeZoneTest.java b/src/test/java/org/apache/commons/lang3/time/GmtTimeZoneTest.java
deleted file mode 100644
index b4c139b67..000000000
--- a/src/test/java/org/apache/commons/lang3/time/GmtTimeZoneTest.java
+++ /dev/null
@@ -1,92 +0,0 @@
-/*
- * Licensed to the Apache Software Foundation (ASF) under one or more
- * contributor license agreements.  See the NOTICE file distributed with
- * this work for additional information regarding copyright ownership.
- * The ASF licenses this file to You under the Apache License, Version 2.0
- * (the "License"); you may not use this file except in compliance with
- * the License.  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.apache.commons.lang3.time;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-/**
- * Tests for GmtTimeZone
- */
-public class GmtTimeZoneTest {
-
-    @Test(expected = IllegalArgumentException.class)
-    public void hoursOutOfRange() {
-        new GmtTimeZone(false, 24, 0);
-    }
-
-    @Test
-    public void hoursInRange() {
-        Assert.assertEquals(23 * 60 * 60 * 1000, new GmtTimeZone(false, 23, 0).getRawOffset());
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void minutesOutOfRange() {
-        new GmtTimeZone(false, 0, 60);
-    }
-
-    @Test
-    public void minutesInRange() {
-        Assert.assertEquals(59 * 60 * 1000, new GmtTimeZone(false, 0, 59).getRawOffset());
-    }
-
-    @Test
-    public void getOffset() {
-        Assert.assertEquals(0, new GmtTimeZone(false, 0, 0).getOffset(234304));
-    }
-
-    @Test(expected = UnsupportedOperationException.class)
-    public void setRawOffset() {
-        new GmtTimeZone(false, 0, 0).setRawOffset(0);
-    }
-
-    @Test
-    public void getRawOffset() {
-        Assert.assertEquals(0, new GmtTimeZone(false, 0, 0).getRawOffset());
-    }
-
-    @Test
-    public void getID() {
-        Assert.assertEquals("GMT+00:00", new GmtTimeZone(false, 0, 0).getID());
-        Assert.assertEquals("GMT+01:02", new GmtTimeZone(false, 1, 2).getID());
-        Assert.assertEquals("GMT+11:22", new GmtTimeZone(false, 11, 22).getID());
-        Assert.assertEquals("GMT-01:02", new GmtTimeZone(true, 1, 2).getID());
-        Assert.assertEquals("GMT-11:22", new GmtTimeZone(true, 11, 22).getID());
-    }
-
-    @Test
-    public void useDaylightTime() {
-        Assert.assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
-    }
-
-    @Test
-    public void inDaylightTime() {
-        Assert.assertFalse(new GmtTimeZone(false, 0, 0).useDaylightTime());
-    }
-
-    @Test
-    public void testToString() {
-        Assert.assertEquals("[GmtTimeZone id=\"GMT-12:00\",offset=-43200000]",
-            new GmtTimeZone(true, 12, 0).toString());
-    }
-
-    @Test
-    public void testGetOffset() {
-        Assert.assertEquals(-(6 * 60 + 30) * 60 * 1000,
-            new GmtTimeZone(true, 6, 30).getOffset(1, 1, 1, 1, 1, 1));
-    }
-}
