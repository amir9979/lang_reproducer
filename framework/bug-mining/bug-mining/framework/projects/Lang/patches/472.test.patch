diff --git a/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java
index df57a13fd..351bed1ba 100644
--- a/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/reflect/MethodUtilsTest.java
@@ -96,10 +96,6 @@ public class MethodUtilsTest {
             return "bar(String...)";
         }
 
-        public static String bar(final long... s) {
-            return "bar(long...)";
-        }
-
         public static String bar(final Integer i, final String... s) {
             return "bar(int, String...)";
         }
@@ -142,6 +138,7 @@ public class MethodUtilsTest {
             return "privateStringStuff(Object)";
         }
 
+
         public String foo() {
             return "foo()";
         }
@@ -158,10 +155,6 @@ public class MethodUtilsTest {
             return "foo(double)";
         }
 
-        public String foo(final long l) {
-            return "foo(long)";
-        }
-
         public String foo(final String s) {
             return "foo(String)";
         }
@@ -174,10 +167,6 @@ public class MethodUtilsTest {
             return "foo(String...)";
         }
 
-        public String foo(final long... l) {
-            return "foo(long...)";
-        }
-
         public String foo(final Integer i, final String... s) {
             return "foo(int, String...)";
         }
@@ -367,7 +356,7 @@ public class MethodUtilsTest {
                 NumberUtils.INTEGER_ONE));
         assertEquals("foo(int)", MethodUtils.invokeMethod(testBean, "foo",
                 NumberUtils.BYTE_ONE));
-        assertEquals("foo(long)", MethodUtils.invokeMethod(testBean, "foo",
+        assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo",
                 NumberUtils.LONG_ONE));
         assertEquals("foo(double)", MethodUtils.invokeMethod(testBean, "foo",
                 NumberUtils.DOUBLE_ONE));
@@ -377,15 +366,6 @@ public class MethodUtilsTest {
                 "a", "b", "c"));
         assertEquals("foo(int, String...)", MethodUtils.invokeMethod(testBean, "foo",
                 5, "a", "b", "c"));
-        assertEquals("foo(long...)", MethodUtils.invokeMethod(testBean, "foo",
-                1L, 2L));
-
-        try {
-            MethodUtils.invokeMethod(testBean, "foo",
-                    1, 2);
-            fail("should throw NoSuchMethodException");
-        } catch (NoSuchMethodException expected) {
-        }
 
         TestBean.verify(new ImmutablePair<String, Object[]>("String...", new String[]{"x", "y"}),
                         MethodUtils.invokeMethod(testBean, "varOverloadEcho", "x", "y"));
@@ -453,12 +433,12 @@ public class MethodUtilsTest {
                 TestBean.class, "bar", NumberUtils.INTEGER_ONE));
         assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class,
                 "bar", NumberUtils.BYTE_ONE));
+        assertEquals("bar(double)", MethodUtils.invokeStaticMethod(
+                TestBean.class, "bar", NumberUtils.LONG_ONE));
         assertEquals("bar(double)", MethodUtils.invokeStaticMethod(
                 TestBean.class, "bar", NumberUtils.DOUBLE_ONE));
         assertEquals("bar(String...)", MethodUtils.invokeStaticMethod(
                 TestBean.class, "bar", "a", "b"));
-        assertEquals("bar(long...)", MethodUtils.invokeStaticMethod(
-                TestBean.class, "bar", 1L, 2L));
         assertEquals("bar(int, String...)", MethodUtils.invokeStaticMethod(
                 TestBean.class, "bar", NumberUtils.INTEGER_ONE, "a", "b"));
 
@@ -596,9 +576,9 @@ public class MethodUtilsTest {
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",
                 singletonArray(Integer.TYPE), singletonArray(Integer.TYPE));
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",
-                singletonArray(Long.class), singletonArray(Long.TYPE));
+                singletonArray(Long.class), singletonArray(Double.TYPE));
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",
-                singletonArray(Long.TYPE), singletonArray(Long.TYPE));
+                singletonArray(Long.TYPE), singletonArray(Double.TYPE));
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",
                 singletonArray(Float.class), singletonArray(Double.TYPE));
         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo",
