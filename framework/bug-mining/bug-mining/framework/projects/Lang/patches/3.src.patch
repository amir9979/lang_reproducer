diff --git a/src/java/org/apache/commons/lang/StringUtils.java b/src/java/org/apache/commons/lang/StringUtils.java
index 0fd5ae9ca..f6b141e69 100644
--- a/src/java/org/apache/commons/lang/StringUtils.java
+++ b/src/java/org/apache/commons/lang/StringUtils.java
@@ -145,7 +145,7 @@ import java.util.List;
  * @author <a href="mailto:ggregory@seagullsw.com">Gary Gregory</a>
  * @author Phil Steitz
  * @since 1.0
- * @version $Id: StringUtils.java,v 1.104 2003/08/21 05:57:21 ggregory Exp $
+ * @version $Id: StringUtils.java,v 1.103 2003/08/19 00:11:20 scolebourne Exp $
  */
 public class StringUtils {
     // Performance testing notes (JDK 1.4, Jul03, scolebourne)
@@ -166,7 +166,6 @@ public class StringUtils {
     
     /**
      * The empty String <code>""</code>.
-     * @since 2.0
      */
     public static final String EMPTY = "";
     
@@ -253,7 +252,6 @@ public class StringUtils {
      *
      * @param str  the String to check, may be null
      * @return <code>true</code> if the String is null, empty or whitespace
-     * @since 2.0
      */
     public static boolean isBlank(String str) {
         int strLen;
@@ -282,7 +280,6 @@ public class StringUtils {
      * @param str  the String to check, may be null
      * @return <code>true</code> if the String is 
      *  not empty and not null and not whitespace
-     * @since 2.0
      */
     public static boolean isNotBlank(String str) {
         int strLen;
@@ -369,7 +366,6 @@ public class StringUtils {
      * @param str  the String to be trimmed, may be null
      * @return the trimmed String, 
      *  <code>null</code> if only chars &lt;= 32, empty or null String input
-     * @since 2.0
      */
     public static String trimToNull(String str) {
         String ts = trim(str);
@@ -395,7 +391,6 @@ public class StringUtils {
      *  
      * @param str  the String to be trimmed, may be null
      * @return the trimmed String, or an empty String if <code>null</code> input
-     * @since 2.0
      */
     public static String trimToEmpty(String str) {
         return (str == null ? EMPTY : str.trim());
@@ -450,7 +445,6 @@ public class StringUtils {
      * @param str  the String to be stripped, may be null
      * @return the stripped String, 
      *  <code>null</code> if whitespace, empty or null String input
-     * @since 2.0
      */
     public static String stripToNull(String str) {
         if (str == null) {
@@ -480,7 +474,6 @@ public class StringUtils {
      *  
      * @param str  the String to be stripped, may be null
      * @return the trimmed String, or an empty String if <code>null</code> input
-     * @since 2.0
      */
     public static String stripToEmpty(String str) {
         return (str == null ? EMPTY : strip(str, null));
@@ -740,7 +733,6 @@ public class StringUtils {
      * @param searchChar  the character to find
      * @return the first index of the search character, 
      *  -1 if no match or <code>null</code> string input
-     * @since 2.0
      */
     public static int indexOf(String str, char searchChar) {
         if (str == null || str.length() == 0) {
@@ -772,7 +764,6 @@ public class StringUtils {
      * @param startPos  the start position, negative treated as zero
      * @return the first index of the search character, 
      *  -1 if no match or <code>null</code> string input
-     * @since 2.0
      */
     public static int indexOf(String str, char searchChar, int startPos) {
         if (str == null || str.length() == 0) {
@@ -801,7 +792,6 @@ public class StringUtils {
      * @param searchStr  the String to find, may be null
      * @return the first index of the search String,
      *  -1 if no match or <code>null</code> string input
-     * @since 2.0
      */
     public static int indexOf(String str, String searchStr) {
         if (str == null || searchStr == null) {
@@ -839,7 +829,6 @@ public class StringUtils {
      * @param startPos  the start position, negative treated as zero
      * @return the first index of the search String,
      *  -1 if no match or <code>null</code> string input
-     * @since 2.0
      */
     public static int indexOf(String str, String searchStr, int startPos) {
         if (str == null || searchStr == null) {
@@ -871,7 +860,6 @@ public class StringUtils {
      * @param searchChar  the character to find
      * @return the last index of the search character, 
      *  -1 if no match or <code>null</code> string input
-     * @since 2.0
      */
     public static int lastIndexOf(String str, char searchChar) {
         if (str == null || str.length() == 0) {
@@ -905,7 +893,6 @@ public class StringUtils {
      * @param startPos  the start position
      * @return the last index of the search character, 
      *  -1 if no match or <code>null</code> string input
-     * @since 2.0
      */
     public static int lastIndexOf(String str, char searchChar, int startPos) {
         if (str == null || str.length() == 0) {
@@ -934,7 +921,6 @@ public class StringUtils {
      * @param searchStr  the String to find, may be null
      * @return the last index of the search String,
      *  -1 if no match or <code>null</code> string input
-     * @since 2.0
      */
     public static int lastIndexOf(String str, String searchStr) {
         if (str == null || searchStr == null) {
@@ -969,7 +955,6 @@ public class StringUtils {
      * @param startPos  the start position, negative treated as zero
      * @return the first index of the search String,
      *  -1 if no match or <code>null</code> string input
-     * @since 2.0
      */
     public static int lastIndexOf(String str, String searchStr, int startPos) {
         if (str == null || searchStr == null) {
@@ -997,7 +982,6 @@ public class StringUtils {
      * @param searchChar  the character to find
      * @return true if the String contains the search character, 
      *  false if not or <code>null</code> string input
-     * @since 2.0
      */
     public static boolean contains(String str, char searchChar) {
         if (str == null || str.length() == 0) {
@@ -1025,7 +1009,6 @@ public class StringUtils {
      * @param searchStr  the String to find, may be null
      * @return true if the String contains the search character, 
      *  false if not or <code>null</code> string input
-     * @since 2.0
      */
     public static boolean contains(String str, String searchStr) {
         if (str == null || searchStr == null) {
@@ -1056,7 +1039,6 @@ public class StringUtils {
      * @param str  the String to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the index of any of the chars, -1 if no match or null input
-     * @since 2.0
      */
      public static int indexOfAny(String str, char[] searchChars) {
          if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {
@@ -1093,7 +1075,6 @@ public class StringUtils {
      * @param str  the String to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the index of any of the chars, -1 if no match or null input
-     * @since 2.0
      */
     public static int indexOfAny(String str, String searchChars) {
         if (str == null || str.length() == 0 || searchChars == null || searchChars.length() == 0) {
@@ -1124,7 +1105,6 @@ public class StringUtils {
      * @param str  the String to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the index of any of the chars, -1 if no match or null input
-     * @since 2.0
      */
      public static int indexOfAnyBut(String str, char[] searchChars) {
          if (str == null || str.length() == 0 || searchChars == null || searchChars.length == 0) {
@@ -1162,7 +1142,6 @@ public class StringUtils {
      * @param str  the String to check, may be null
      * @param searchChars  the chars to search for, may be null
      * @return the index of any of the chars, -1 if no match or null input
-     * @since 2.0
      */
     public static int indexOfAnyBut(String str, String searchChars) {
         if (str == null || str.length() == 0 || searchChars == null || searchChars.length() == 0) {
@@ -1233,7 +1212,6 @@ public class StringUtils {
      * @param str  the String to check, may be null
      * @param validChars  a String of valid chars, may be null
      * @return true if it only contains valid chars and is non-null
-     * @since 2.0
      */
     public static boolean containsOnly(String str, String validChars) {
         if (str == null || validChars == null) {
@@ -1264,7 +1242,6 @@ public class StringUtils {
      * @param str  the String to check, may be null
      * @param invalidChars  an array of invalid chars, may be null
      * @return true if it contains none of the invalid chars, or is null
-     * @since 2.0
      */
     public static boolean containsNone(String str, char[] invalidChars) {
         if (str == null || invalidChars == null) {
@@ -1303,7 +1280,6 @@ public class StringUtils {
      * @param str  the String to check, may be null
      * @param invalidChars  a String of invalid chars, may be null
      * @return true if it contains none of the invalid chars, or is null
-     * @since 2.0
      */
     public static boolean containsNone(String str, String invalidChars) {
         if (str == null || invalidChars == null) {
@@ -1663,7 +1639,6 @@ public class StringUtils {
      * @param separator  the String to search for, may be null
      * @return the substring before the first occurance of the separator,
      *  <code>null</code> if null String input
-     * @since 2.0
      */
     public static String substringBefore(String str, String separator) {
         if (str == null || separator == null || str.length() == 0) {
@@ -1703,7 +1678,6 @@ public class StringUtils {
      * @param separator  the String to search for, may be null
      * @return the substring after the first occurance of the separator,
      *  <code>null</code> if null String input
-     * @since 2.0
      */
     public static String substringAfter(String str, String separator) {
         if (str == null || str.length() == 0) {
@@ -1742,7 +1716,6 @@ public class StringUtils {
      * @param separator  the String to search for, may be null
      * @return the substring before the last occurance of the separator,
      *  <code>null</code> if null String input
-     * @since 2.0
      */
     public static String substringBeforeLast(String str, String separator) {
         if (str == null || separator == null || str.length() == 0 || separator.length() == 0) {
@@ -1780,7 +1753,6 @@ public class StringUtils {
      * @param separator  the String to search for, may be null
      * @return the substring after the last occurance of the separator,
      *  <code>null</code> if null String input
-     * @since 2.0
      */
     public static String substringAfterLast(String str, String separator) {
         if (str == null || str.length() == 0) {
@@ -1817,7 +1789,6 @@ public class StringUtils {
      * @param str  the String containing the substring, may be null
      * @param tag  the String before and after the substring, may be null
      * @return the substring, <code>null</code> if no match
-     * @since 2.0
      */
     public static String substringBetween(String str, String tag) {
         return substringBetween(str, tag, tag);
@@ -1846,7 +1817,6 @@ public class StringUtils {
      * @param open  the String before the substring, may be null
      * @param close  the String after the substring, may be null
      * @return the substring, <code>null</code> if no match
-     * @since 2.0
      */
     public static String substringBetween(String str, String open, String close) {
         if (str == null || open == null || close == null) {
@@ -1970,7 +1940,6 @@ public class StringUtils {
      * @param separatorChar  the character used as the delimiter,
      *  <code>null</code> splits on whitespace
      * @return an array of parsed Strings, <code>null</code> if null String input
-     * @since 2.0
      */
     public static String[] split(String str, char separatorChar) {
         // Performance tuned for 2.0 (JDK1.4)
@@ -2174,7 +2143,6 @@ public class StringUtils {
      * 
      * @param array  the array of values to join together, may be null
      * @return the joined String, <code>null</code> if null array input
-     * @since 2.0
      */
     public static String join(Object[] array) {
         return join(array, null);
@@ -2200,7 +2168,6 @@ public class StringUtils {
      * @param array  the array of values to join together, may be null
      * @param separator  the separator character to use
      * @return the joined String, <code>null</code> if null array input
-     * @since 2.0
      */
     public static String join(Object[] array, char separator) {
         if (array == null) {
@@ -2286,7 +2253,6 @@ public class StringUtils {
      * @param iterator  the <code>Iterator</code> of values to join together, may be null
      * @param separator  the separator character to use
      * @return the joined String, <code>null</code> if null iterator input
-     * @since 2.0
      */
     public static String join(Iterator iterator, char separator) {
         if (iterator == null) {
@@ -2517,7 +2483,6 @@ public class StringUtils {
      * @param searchChar  the character to search for, may be null
      * @param replaceChar  the character to replace, may be null
      * @return modified String, <code>null</code> if null string input
-     * @since 2.0
      */
     public static String replaceChars(String str, char searchChar, char replaceChar) {
         if (str == null) {
@@ -2560,7 +2525,6 @@ public class StringUtils {
      * @param searchChars  a set of characters to search for, may be null
      * @param replaceChars  a set of characters to replace, may be null
      * @return modified String, <code>null</code> if null string input
-     * @since 2.0
      */
     public static String replaceChars(String str, String searchChars, String replaceChars) {
         if (str == null || str.length() == 0 || searchChars == null || searchChars.length()== 0) {
@@ -2660,7 +2624,6 @@ public class StringUtils {
      * @param start  the position to start overlaying at
      * @param end  the position to stop overlaying before
      * @return overlayed String, <code>null</code> if null String input
-     * @since 2.0
      */
     public static String overlay(String str, String overlay, int start, int end) {
         if (str == null) {
@@ -3114,7 +3077,6 @@ public class StringUtils {
      * @param padChar  the character to pad with
      * @return right padded String or original String if no padding is necessary,
      *  <code>null</code> if null String input
-     * @since 2.0
      */
     public static String rightPad(String str, int size, char padChar) {
         if (str == null) {
@@ -3226,7 +3188,6 @@ public class StringUtils {
      * @param padChar  the character to pad with
      * @return left padded String or original String if no padding is necessary,
      *  <code>null</code> if null String input
-     * @since 2.0
      */
     public static String leftPad(String str, int size, char padChar) {
         if (str == null) {
@@ -3347,7 +3308,6 @@ public class StringUtils {
      * @param size  the int size of new String, negative treated as zero
      * @param padChar  the character to pad the new String with
      * @return centered String, <code>null</code> if null String input
-     * @since 2.0
      */
     public static String center(String str, int size, char padChar) {
         if (str == null || size <= 0) {
@@ -3468,7 +3428,6 @@ public class StringUtils {
      * @return the capitalized String, <code>null</code> if null String input
      * @see WordUtils#capitalize(String)
      * @see #uncapitalize(String)
-     * @since 2.0
      */
     public static String capitalize(String str) {
         int strLen;
@@ -3512,7 +3471,6 @@ public class StringUtils {
      * @return the uncapitalized String, <code>null</code> if null String input
      * @see WordUtils#uncapitalize(String)
      * @see #capitalize(String)
-     * @since 2.0
      */
     public static String uncapitalize(String str) {
         int strLen;
@@ -3861,7 +3819,6 @@ public class StringUtils {
      *
      * @param str  the String to check, may be null
      * @return <code>true</code> if only contains whitespace, and is non-null
-     * @since 2.0
      */
     public static boolean isWhitespace(String str) {
         if (str == null) {
@@ -3959,7 +3916,6 @@ public class StringUtils {
      * @param str  the String to reverse, may be null
      * @param separatorChar  the separator character to use
      * @return the reversed String, <code>null</code> if null String input
-     * @since 2.0
      */
     public static String reverseDelimited(String str, char separatorChar) {
         if (str == null) {
@@ -4040,7 +3996,6 @@ public class StringUtils {
      * @param maxWidth  maximum length of result String, must be at least 4
      * @return abbreviated String, <code>null</code> if null String input
      * @throws IllegalArgumentException if the width is too small
-     * @since 2.0
      */
     public static String abbreviate(String str, int maxWidth) {
         return abbreviate(str, 0, maxWidth);
@@ -4079,7 +4034,6 @@ public class StringUtils {
      * @param maxWidth  maximum length of result String, must be at least 4
      * @return abbreviated String, <code>null</code> if null String input
      * @throws IllegalArgumentException if the width is too small
-     * @since 2.0
      */
     public static String abbreviate(String str, int offset, int maxWidth) {
         if (str == null) {
@@ -4134,7 +4088,6 @@ public class StringUtils {
      * @param str2  the second String, may be null
      * @return the portion of str2 where it differs from str1; returns the 
      * empty String if they are equal
-     * @since 2.0
      */
     public static String difference(String str1, String str2) {
         if (str1 == null) {
@@ -4171,7 +4124,6 @@ public class StringUtils {
      * @param str1  the first String, may be null
      * @param str2  the second String, may be null
      * @return the index where str2 and str1 begin to differ; -1 if they are equal
-     * @since 2.0
      */
     public static int differenceAt(String str1, String str2) {
         if (str1 == str2) {
