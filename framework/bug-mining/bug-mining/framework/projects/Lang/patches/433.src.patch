diff --git a/src/main/java/org/apache/commons/lang3/ArrayUtils.java b/src/main/java/org/apache/commons/lang3/ArrayUtils.java
index 9ed6441e7..4df429045 100644
--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java
+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java
@@ -1832,11 +1832,12 @@ public class ArrayUtils {
     // Swap
     //-----------------------------------------------------------------------
     /**
-     * Swaps two elements in the given array.
+     * <p>Swaps two elements in the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>There is no special handling for multi-dimensional arrays.
+     *
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero).
      * 
      * <p>Examples:
      *     <ul>
@@ -1846,12 +1847,10 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap(["1", "2", "3"], 0, 5) -&gt; ["1", "2", "3"]</li>
      *         <li>ArrayUtils.swap(["1", "2", "3"], -1, 1) -&gt; ["2", "1", "3"]</li>
      *     </ul>
-     * </p>
      *
      * @param array the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
-     * @since 3.5
      */
     public static void swap(final Object[] array, int offset1, int offset2) {
         if (array == null || array.length == 0) {
@@ -1861,11 +1860,12 @@ public class ArrayUtils {
     }
 
     /**
-     * <p>Swaps two elements in the given long array.
+     * <p>Swaps two elements in the given array.
+     *
+     * <p>There is no special handling for multi-dimensional arrays.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero).
      *
      * <p>Examples:
      *     <ul>
@@ -1875,12 +1875,10 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([true, false, true], 0, 5) -&gt; [true, false, true]</li>
      *         <li>ArrayUtils.swap([true, false, true], -1, 1) -&gt; [false, true, true]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
-     * @since 3.5
      */
     public static void swap(final long[] array, int offset1, int offset2) {
         if (array == null || array.length == 0) {
@@ -1890,11 +1888,10 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps two elements in the given int array.
+     * <p>Swaps two elements in the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero).
      *
      * <p>Examples:
      *     <ul>
@@ -1904,12 +1901,10 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -&gt; [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -&gt; [2, 1, 3]</li>
      *     </ul>
-     * </p>
      *
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
-     * @since 3.5
      */
     public static void swap(final int[] array, int offset1, int offset2) {
         if (array == null || array.length == 0) {
@@ -1919,11 +1914,10 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps two elements in the given short array.
+     * <p>Swaps two elements in the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero).
      *
      * <p>Examples:
      *     <ul>
@@ -1933,12 +1927,10 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -&gt; [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -&gt; [2, 1, 3]</li>
      *     </ul>
-     * </p>
      * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
-     * @since 3.5
      */
     public static void swap(final short[] array, int offset1, int offset2) {
         if (array == null || array.length == 0) {
@@ -1948,11 +1940,10 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps two elements in the given char array.
+     * <p>Swaps two elements in the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero).
      * 
      * <p>Examples:
      *     <ul>
@@ -1962,12 +1953,10 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -&gt; [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -&gt; [2, 1, 3]</li>
      *     </ul>
-     * </p>
      *
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
-     * @since 3.5
      */
     public static void swap(final char[] array, int offset1, int offset2) {
         if (array == null || array.length == 0) {
@@ -1977,11 +1966,10 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps two elements in the given byte array.
+     * <p>Swaps two elements in the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero).
      *
      * <p>Examples:
      *     <ul>
@@ -1991,12 +1979,10 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -&gt; [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -&gt; [2, 1, 3]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
-     * @since 3.5
      */
     public static void swap(final byte[] array, int offset1, int offset2) {
         if (array == null || array.length == 0) {
@@ -2006,11 +1992,10 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps two elements in the given double array.
+     * <p>Swaps two elements in the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero).
      *
      * <p>Examples:
      *     <ul>
@@ -2020,12 +2005,10 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -&gt; [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -&gt; [2, 1, 3]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
-     * @since 3.5
      */
     public static void swap(final double[] array, int offset1, int offset2) {
         if (array == null || array.length == 0) {
@@ -2035,11 +2018,10 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps two elements in the given float array.
+     * <p>Swaps two elements in the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero).
      *
      * <p>Examples:
      *     <ul>
@@ -2049,12 +2031,10 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -&gt; [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -&gt; [2, 1, 3]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
-     * @since 3.5
      */
     public static void swap(final float[] array, int offset1, int offset2) {
         if (array == null || array.length == 0) {
@@ -2064,11 +2044,10 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps two elements in the given boolean array.
+     * <p>Swaps two elements in the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero).
      *
      * <p>Examples:
      *     <ul>
@@ -2078,12 +2057,10 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -&gt; [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -&gt; [2, 1, 3]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
-     * @since 3.5
      */
     public static void swap(final boolean[] array, int offset1, int offset2) {
         if (array == null || array.length == 0) {
@@ -2093,13 +2070,12 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps a series of elements in the given boolean array.
-     *
-     * <p>This method does nothing for a {@code null} or empty input array or
-     * for overflow indices. Negative indices are promoted to 0(zero). If any
-     * of the sub-arrays to swap falls outside of the given array, then the
-     * swap is stopped at the end of the array and as many as possible elements
-     * are swapped.</p>
+     * <p>Swaps a series of elements in the given array.
+     * 
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero). 
+     * If any of the sub-arrays to swap falls outside of the given array, 
+     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
      * 
      * <p>Examples:
      *     <ul>
@@ -2109,15 +2085,13 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([true, false, true, false], -3, 2, 2) -&gt; [true, false, true, false]</li>
      *         <li>ArrayUtils.swap([true, false, true, false], 0, 3, 3) -&gt; [false, false, true, true]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array the array to swap, may be {@code null}
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
-     * @since 3.5
      */
-    public static void swap(final boolean[] array, int offset1, int offset2, int len) {
+    public static void swap(final boolean[] array,  int offset1, int offset2, int len) {
         if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
             return;
         }
@@ -2136,14 +2110,13 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps a series of elements in the given byte array.
-     *
-     * <p>This method does nothing for a {@code null} or empty input array or
-     * for overflow indices. Negative indices are promoted to 0(zero). If any
-     * of the sub-arrays to swap falls outside of the given array, then the
-     * swap is stopped at the end of the array and as many as possible elements
-     * are swapped.</p>
-     *
+     * <p>Swaps a series of elements in the given array.
+     * 
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero). 
+     * If any of the sub-arrays to swap falls outside of the given array, 
+     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
+     * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -&gt; [3, 2, 1, 4]</li>
@@ -2152,15 +2125,14 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -&gt; [3, 4, 1, 2]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -&gt; [4, 2, 3, 1]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array the array to swap, may be {@code null}
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
-     * @since 3.5
      */
-    public static void swap(final byte[] array, int offset1, int offset2, int len) {
+
+    public static void swap(final byte[] array,  int offset1, int offset2, int len) {
         if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
             return;
         }
@@ -2179,13 +2151,12 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps a series of elements in the given char array.
-     *
-     * <p>This method does nothing for a {@code null} or empty input array or
-     * for overflow indices. Negative indices are promoted to 0(zero). If any
-     * of the sub-arrays to swap falls outside of the given array, then the
-     * swap is stopped at the end of the array and as many as possible elements
-     * are swapped.</p>
+     * <p>Swaps a series of elements in the given array.
+     * 
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero). 
+     * If any of the sub-arrays to swap falls outside of the given array, 
+     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
      * 
      * <p>Examples:
      *     <ul>
@@ -2195,15 +2166,13 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -&gt; [3, 4, 1, 2]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -&gt; [4, 2, 3, 1]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array the array to swap, may be {@code null}
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
-     * @since 3.5
      */
-    public static void swap(final char[] array, int offset1, int offset2, int len) {
+    public static void swap(final char[] array,  int offset1, int offset2, int len) {
         if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
             return;
         }
@@ -2222,13 +2191,12 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps a series of elements in the given double array.
-     *
-     * <p>This method does nothing for a {@code null} or empty input array or
-     * for overflow indices. Negative indices are promoted to 0(zero). If any
-     * of the sub-arrays to swap falls outside of the given array, then the
-     * swap is stopped at the end of the array and as many as possible elements
-     * are swapped.</p>
+     * <p>Swaps a series of elements in the given array.
+     * 
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero). 
+     * If any of the sub-arrays to swap falls outside of the given array, 
+     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
      * 
      * <p>Examples:
      *     <ul>
@@ -2238,13 +2206,11 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -&gt; [3, 4, 1, 2]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -&gt; [4, 2, 3, 1]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array the array to swap, may be {@code null}
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
-     * @since 3.5
      */
     public static void swap(final double[] array,  int offset1, int offset2, int len) {
         if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
@@ -2265,14 +2231,13 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps a series of elements in the given float array.
-     *
-     * <p>This method does nothing for a {@code null} or empty input array or
-     * for overflow indices. Negative indices are promoted to 0(zero). If any
-     * of the sub-arrays to swap falls outside of the given array, then the
-     * swap is stopped at the end of the array and as many as possible elements
-     * are swapped.</p>
-     *
+     * <p>Swaps a series of elements in the given array.
+     * 
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero). 
+     * If any of the sub-arrays to swap falls outside of the given array, 
+     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
+     * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -&gt; [3, 2, 1, 4]</li>
@@ -2281,15 +2246,13 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -&gt; [3, 4, 1, 2]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -&gt; [4, 2, 3, 1]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array the array to swap, may be {@code null}
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
-     * @since 3.5
      */
-    public static void swap(final float[] array, int offset1, int offset2, int len) {
+    public static void swap(final float[] array,  int offset1, int offset2, int len) {
         if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
             return;
         }
@@ -2309,14 +2272,13 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps a series of elements in the given int array.
-     *
-     * <p>This method does nothing for a {@code null} or empty input array or
-     * for overflow indices. Negative indices are promoted to 0(zero). If any
-     * of the sub-arrays to swap falls outside of the given array, then the
-     * swap is stopped at the end of the array and as many as possible elements
-     * are swapped.</p>
-     *
+     * <p>Swaps a series of elements in the given array.
+     * 
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero). 
+     * If any of the sub-arrays to swap falls outside of the given array, 
+     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
+     * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -&gt; [3, 2, 1, 4]</li>
@@ -2325,13 +2287,11 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -&gt; [3, 4, 1, 2]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -&gt; [4, 2, 3, 1]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array the array to swap, may be {@code null}
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
-     * @since 3.5
      */
     public static void swap(final int[] array,  int offset1, int offset2, int len) {
         if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
@@ -2352,14 +2312,13 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps a series of elements in the given long array.
-     *
-     * <p>This method does nothing for a {@code null} or empty input array or
-     * for overflow indices. Negative indices are promoted to 0(zero). If any
-     * of the sub-arrays to swap falls outside of the given array, then the
-     * swap is stopped at the end of the array and as many as possible elements
-     * are swapped.</p>
-     *
+     * <p>Swaps a series of elements in the given array.
+     * 
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero). 
+     * If any of the sub-arrays to swap falls outside of the given array, 
+     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
+     * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -&gt; [3, 2, 1, 4]</li>
@@ -2368,13 +2327,11 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -&gt; [3, 4, 1, 2]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -&gt; [4, 2, 3, 1]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array the array to swap, may be {@code null}
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
-     * @since 3.5
      */
     public static void swap(final long[] array,  int offset1, int offset2, int len) {
         if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
@@ -2395,14 +2352,13 @@ public class ArrayUtils {
     }
 
     /**
-     * Swaps a series of elements in the given array.
-     *
-     * <p>This method does nothing for a {@code null} or empty input array or
-     * for overflow indices. Negative indices are promoted to 0(zero). If any
-     * of the sub-arrays to swap falls outside of the given array, then the
-     * swap is stopped at the end of the array and as many as possible elements
-     * are swapped.</p>
-     *
+     * <p>Swaps a series of elements in the given array.
+     * 
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero). 
+     * If any of the sub-arrays to swap falls outside of the given array, 
+     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
+     * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap(["1", "2", "3", "4"], 0, 2, 1) -&gt; ["3", "2", "1", "4"]</li>
@@ -2411,15 +2367,13 @@ public class ArrayUtils {
      *         <li>ArrayUtils.swap(["1", "2", "3", "4"], -3, 2, 2) -&gt; ["3", "4", "1", "2"]</li>
      *         <li>ArrayUtils.swap(["1", "2", "3", "4"], 0, 3, 3) -&gt; ["4", "2", "3", "1"]</li>
      *     </ul>
-     * </p>
-     *
+     * 
      * @param array the array to swap, may be {@code null}
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
-     * @since 3.5
      */
-    public static void swap(final Object[] array,  int offset1, int offset2, int len) {
+   public static void swap(final Object[] array,  int offset1, int offset2, int len) {
         if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
             return;
         }
@@ -2438,29 +2392,26 @@ public class ArrayUtils {
     }
 
    /**
-    * Swaps a series of elements in the given short array.
-    *
-    * <p>This method does nothing for a {@code null} or empty input array or
-    * for overflow indices. Negative indices are promoted to 0(zero). If any
-    * of the sub-arrays to swap falls outside of the given array, then the
-    * swap is stopped at the end of the array and as many as possible elements
-    * are swapped.</p>
-    *
-    * <p>Examples:
-    *     <ul>
-    *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -&gt; [3, 2, 1, 4]</li>
-    *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -&gt; [1, 2, 3, 4]</li>
-    *         <li>ArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -&gt; [3, 4, 1, 2]</li>
-    *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -&gt; [3, 4, 1, 2]</li>
-    *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -&gt; [4, 2, 3, 1]</li>
-    *     </ul>
-    * </p>
-    *
+    * <p>Swaps a series of elements in the given array.
+    * 
+     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
+     * Negative indices are promoted to 0(zero). 
+     * If any of the sub-arrays to swap falls outside of the given array, 
+     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
+     * 
+     * <p>Examples:
+     *     <ul>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -&gt; [3, 2, 1, 4]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -&gt; [1, 2, 3, 4]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -&gt; [3, 4, 1, 2]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -&gt; [3, 4, 1, 2]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -&gt; [4, 2, 3, 1]</li>
+     *     </ul>
+    * 
     * @param array the array to swap, may be {@code null}
     * @param offset1 the index of the first element in the series to swap
     * @param offset2 the index of the second element in the series to swap
     * @param len the number of elements to swap starting with the given indices
-    * @since 3.5
     */
     public static void swap(final short[] array,  int offset1, int offset2, int len) {
         if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
@@ -2486,16 +2437,16 @@ public class ArrayUtils {
     // Shift
     //-----------------------------------------------------------------------
     /**
-     * Shifts the order of the given array.
+     * <p>Shifts the order of the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
+     * <p>There is no special handling for multi-dimensional arrays.
+     *
+     * <p>This method does nothing for a {@code null} input array.
      *
      * @param array  the array to shift, may be {@code null}
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
      */
     public static void shift(final Object[] array, int offset) {
         if (array == null) {
@@ -2505,16 +2456,14 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of the given long array.
+     * <p>Shifts the order of the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
+     * <p>This method does nothing for a {@code null} input array.
      *
      * @param array  the array to shift, may be {@code null}
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
      */
     public static void shift(final long[] array, int offset) {
         if (array == null) {
@@ -2524,16 +2473,14 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of the given int array.
+     * <p>Shifts the order of the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
+     * <p>This method does nothing for a {@code null} input array.
      *
      * @param array  the array to shift, may be {@code null}
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
      */
     public static void shift(final int[] array, int offset) {
         if (array == null) {
@@ -2543,16 +2490,14 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of the given short array.
+     * <p>Shifts the order of the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
+     * <p>This method does nothing for a {@code null} input array.
      *
      * @param array  the array to shift, may be {@code null}
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
      */
     public static void shift(final short[] array, int offset) {
         if (array == null) {
@@ -2562,16 +2507,14 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of the given char array.
+     * <p>Shifts the order of the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
+     * <p>This method does nothing for a {@code null} input array.
      *
      * @param array  the array to shift, may be {@code null}
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
      */
     public static void shift(final char[] array, int offset) {
         if (array == null) {
@@ -2581,16 +2524,14 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of the given byte array.
+     * <p>Shifts the order of the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
+     * <p>This method does nothing for a {@code null} input array.
      *
      * @param array  the array to shift, may be {@code null}
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
      */
     public static void shift(final byte[] array, int offset) {
         if (array == null) {
@@ -2600,16 +2541,14 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of the given double array.
+     * <p>Shifts the order of the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
+     * <p>This method does nothing for a {@code null} input array.
      *
      * @param array  the array to shift, may be {@code null}
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
      */
     public static void shift(final double[] array, int offset) {
         if (array == null) {
@@ -2619,16 +2558,14 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of the given float array.
+     * <p>Shifts the order of the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
+     * <p>This method does nothing for a {@code null} input array.
      *
      * @param array  the array to shift, may be {@code null}
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
      */
     public static void shift(final float[] array, int offset) {
         if (array == null) {
@@ -2638,16 +2575,14 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of the given boolean array.
+     * <p>Shifts the order of the given array.
      *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
+     * <p>This method does nothing for a {@code null} input array.
      *
      * @param array  the array to shift, may be {@code null}
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
      */
     public static void shift(final boolean[] array, int offset) {
         if (array == null) {
@@ -2657,10 +2592,11 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of a series of elements in the given boolean array.
-     *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
+     * <p>
+     * Shifts the order of the given array in the given range.
+     * 
+     * <p>
+     * This method does nothing for a {@code null} input array.
      * 
      * @param array
      *            the array to shift, may be {@code null}
@@ -2673,7 +2609,7 @@ public class ArrayUtils {
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
+     * @since 3.2
      */
     public static void shift(final boolean[] array, int startIndexInclusive, int endIndexExclusive, int offset) {
         if (array == null) {
@@ -2717,10 +2653,11 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of a series of elements in the given byte array.
-     *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
+     * <p>
+     * Shifts the order of the given array in the given range.
+     * 
+     * <p>
+     * This method does nothing for a {@code null} input array.
      * 
      * @param array
      *            the array to shift, may be {@code null}
@@ -2733,7 +2670,7 @@ public class ArrayUtils {
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
+     * @since 3.2
      */
     public static void shift(final byte[] array, int startIndexInclusive, int endIndexExclusive, int offset) {
         if (array == null) {
@@ -2777,11 +2714,12 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of a series of elements in the given char array.
-     *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
-     *
+     * <p>
+     * Shifts the order of the given array in the given range.
+     * 
+     * <p>
+     * This method does nothing for a {@code null} input array.
+     * 
      * @param array
      *            the array to shift, may be {@code null}
      * @param startIndexInclusive
@@ -2793,7 +2731,7 @@ public class ArrayUtils {
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
+     * @since 3.2
      */
     public static void shift(final char[] array, int startIndexInclusive, int endIndexExclusive, int offset) {
         if (array == null) {
@@ -2837,11 +2775,12 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of a series of elements in the given double array.
-     *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
-     *
+     * <p>
+     * Shifts the order of the given array in the given range.
+     * 
+     * <p>
+     * This method does nothing for a {@code null} input array.
+     * 
      * @param array
      *            the array to shift, may be {@code null}
      * @param startIndexInclusive
@@ -2853,7 +2792,7 @@ public class ArrayUtils {
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
+     * @since 3.2
      */
     public static void shift(final double[] array, int startIndexInclusive, int endIndexExclusive, int offset) {
         if (array == null) {
@@ -2897,11 +2836,12 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of a series of elements in the given float array.
-     *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
-     *
+     * <p>
+     * Shifts the order of the given array in the given range.
+     * 
+     * <p>
+     * This method does nothing for a {@code null} input array.
+     * 
      * @param array
      *            the array to shift, may be {@code null}
      * @param startIndexInclusive
@@ -2913,7 +2853,7 @@ public class ArrayUtils {
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
+     * @since 3.2
      */
     public static void shift(final float[] array, int startIndexInclusive, int endIndexExclusive, int offset) {
         if (array == null) {
@@ -2957,11 +2897,12 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of a series of elements in the given int array.
-     *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
-     *
+     * <p>
+     * Shifts the order of the given array in the given range.
+     * 
+     * <p>
+     * This method does nothing for a {@code null} input array.
+     * 
      * @param array
      *            the array to shift, may be {@code null}
      * @param startIndexInclusive
@@ -2973,7 +2914,7 @@ public class ArrayUtils {
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
+     * @since 3.2
      */
     public static void shift(final int[] array, int startIndexInclusive, int endIndexExclusive, int offset) {
         if (array == null) {
@@ -3017,11 +2958,12 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of a series of elements in the given long array.
-     *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
-     *
+     * <p>
+     * Shifts the order of the given array in the given range.
+     * 
+     * <p>
+     * This method does nothing for a {@code null} input array.
+     * 
      * @param array
      *            the array to shift, may be {@code null}
      * @param startIndexInclusive
@@ -3033,7 +2975,6 @@ public class ArrayUtils {
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
      */
     public static void shift(final long[] array, int startIndexInclusive, int endIndexExclusive, int offset) {
         if (array == null) {
@@ -3077,11 +3018,12 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of a series of elements in the given array.
-     *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
-     *
+     * <p>
+     * Shifts the order of the given array in the given range.
+     * 
+     * <p>
+     * This method does nothing for a {@code null} input array.
+     * 
      * @param array
      *            the array to shift, may be {@code null}
      * @param startIndexInclusive
@@ -3093,7 +3035,6 @@ public class ArrayUtils {
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
      */
     public static void shift(final Object[] array, int startIndexInclusive, int endIndexExclusive, int offset) {
         if (array == null) {
@@ -3137,11 +3078,12 @@ public class ArrayUtils {
     }
 
     /**
-     * Shifts the order of a series of elements in the given short array.
-     *
-     * <p>There is no special handling for multi-dimensional arrays. This method
-     * does nothing for {@code null} or empty input arrays.</p>
-     *
+     * <p>
+     * Rotate the elements of the given array in the given range.
+     * 
+     * <p>
+     * This method does nothing for a {@code null} input array.
+     * 
      * @param array
      *            the array to shift, may be {@code null}
      * @param startIndexInclusive
@@ -3153,7 +3095,7 @@ public class ArrayUtils {
      * @param offset
      *          The number of positions to rotate the elements.  If the offset is larger than the number of elements to
      *          rotate, than the effective offset is modulo the number of elements to rotate.
-     * @since 3.5
+     * @since 3.2
      */
     public static void shift(final short[] array, int startIndexInclusive, int endIndexExclusive, int offset) {
         if (array == null) {
@@ -4952,11 +4894,11 @@ public class ArrayUtils {
 
     // ----------------------------------------------------------------------
     /**
-     * <p>Checks if an array of Objects is not empty and not {@code null}.
+     * <p>Checks if an array of Objects is not empty or not {@code null}.
      *
      * @param <T> the component type of the array
      * @param array  the array to test
-     * @return {@code true} if the array is not empty and not {@code null}
+     * @return {@code true} if the array is not empty or not {@code null}
      * @since 2.5
      */
      public static <T> boolean isNotEmpty(final T[] array) {
@@ -4964,10 +4906,10 @@ public class ArrayUtils {
      }
 
     /**
-     * <p>Checks if an array of primitive longs is not empty and not {@code null}.
+     * <p>Checks if an array of primitive longs is not empty or not {@code null}.
      *
      * @param array  the array to test
-     * @return {@code true} if the array is not empty and not {@code null}
+     * @return {@code true} if the array is not empty or not {@code null}
      * @since 2.5
      */
     public static boolean isNotEmpty(final long[] array) {
@@ -4975,10 +4917,10 @@ public class ArrayUtils {
     }
 
     /**
-     * <p>Checks if an array of primitive ints is not empty and not {@code null}.
+     * <p>Checks if an array of primitive ints is not empty or not {@code null}.
      *
      * @param array  the array to test
-     * @return {@code true} if the array is not empty and not {@code null}
+     * @return {@code true} if the array is not empty or not {@code null}
      * @since 2.5
      */
     public static boolean isNotEmpty(final int[] array) {
@@ -4986,10 +4928,10 @@ public class ArrayUtils {
     }
 
     /**
-     * <p>Checks if an array of primitive shorts is not empty and not {@code null}.
+     * <p>Checks if an array of primitive shorts is not empty or not {@code null}.
      *
      * @param array  the array to test
-     * @return {@code true} if the array is not empty and not {@code null}
+     * @return {@code true} if the array is not empty or not {@code null}
      * @since 2.5
      */
     public static boolean isNotEmpty(final short[] array) {
@@ -4997,10 +4939,10 @@ public class ArrayUtils {
     }
 
     /**
-     * <p>Checks if an array of primitive chars is not empty and not {@code null}.
+     * <p>Checks if an array of primitive chars is not empty or not {@code null}.
      *
      * @param array  the array to test
-     * @return {@code true} if the array is not empty and not {@code null}
+     * @return {@code true} if the array is not empty or not {@code null}
      * @since 2.5
      */
     public static boolean isNotEmpty(final char[] array) {
@@ -5008,10 +4950,10 @@ public class ArrayUtils {
     }
 
     /**
-     * <p>Checks if an array of primitive bytes is not empty and not {@code null}.
+     * <p>Checks if an array of primitive bytes is not empty or not {@code null}.
      *
      * @param array  the array to test
-     * @return {@code true} if the array is not empty and not {@code null}
+     * @return {@code true} if the array is not empty or not {@code null}
      * @since 2.5
      */
     public static boolean isNotEmpty(final byte[] array) {
@@ -5019,10 +4961,10 @@ public class ArrayUtils {
     }
 
     /**
-     * <p>Checks if an array of primitive doubles is not empty and not {@code null}.
+     * <p>Checks if an array of primitive doubles is not empty or not {@code null}.
      *
      * @param array  the array to test
-     * @return {@code true} if the array is not empty and not {@code null}
+     * @return {@code true} if the array is not empty or not {@code null}
      * @since 2.5
      */
     public static boolean isNotEmpty(final double[] array) {
@@ -5030,10 +4972,10 @@ public class ArrayUtils {
     }
 
     /**
-     * <p>Checks if an array of primitive floats is not empty and not {@code null}.
+     * <p>Checks if an array of primitive floats is not empty or not {@code null}.
      *
      * @param array  the array to test
-     * @return {@code true} if the array is not empty and not {@code null}
+     * @return {@code true} if the array is not empty or not {@code null}
      * @since 2.5
      */
     public static boolean isNotEmpty(final float[] array) {
@@ -5041,10 +4983,10 @@ public class ArrayUtils {
     }
 
     /**
-     * <p>Checks if an array of primitive booleans is not empty and not {@code null}.
+     * <p>Checks if an array of primitive booleans is not empty or not {@code null}.
      *
      * @param array  the array to test
-     * @return {@code true} if the array is not empty and not {@code null}
+     * @return {@code true} if the array is not empty or not {@code null}
      * @since 2.5
      */
     public static boolean isNotEmpty(final boolean[] array) {
@@ -7697,17 +7639,14 @@ public class ArrayUtils {
     }
 
     /**
-     * Removes the occurrences of the specified element from the specified boolean array.
-     *
      * <p>
-     * All subsequent elements are shifted to the left (subtracts one from their indices).
-     * If the array doesn't contains such an element, no elements are removed from the array.
-     * <code>null</code> will be returned if the input array is <code>null</code>.
-     * </p>
-     *
+     * Removes the occurrences of the specified element from the specified array. All subsequent elements are shifted to
+     * the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are
+     * removed from the array. <code>null</code> will be returned if the input array is <code>null</code>
+     * 
      * @param element the element to remove
      * @param array the input array
-     *
+     * 
      * @return A new array containing the existing elements except the occurrences of the specified element.
      * @since 3.5
      */
@@ -7716,30 +7655,27 @@ public class ArrayUtils {
         if (index == INDEX_NOT_FOUND) {
             return clone(array);
         }
-
+        
         int[] indices = new int[array.length - index];
         indices[0] = index;
         int count = 1;
-
+        
         while ((index = indexOf(array, element, indices[count - 1] + 1)) != INDEX_NOT_FOUND) {
             indices[count++] = index;
         }
-
-        return removeAll(array, Arrays.copyOf(indices, count));
+        
+        return removeAll(array, Arrays.copyOf(indices, count));        
     }
 
     /**
-     * Removes the occurrences of the specified element from the specified char array.
-     *
      * <p>
-     * All subsequent elements are shifted to the left (subtracts one from their indices).
-     * If the array doesn't contains such an element, no elements are removed from the array.
-     * <code>null</code> will be returned if the input array is <code>null</code>.
-     * </p>
-     *
+     * Removes the occurrences of the specified element from the specified array. All subsequent elements are shifted to
+     * the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are
+     * removed from the array. <code>null</code> will be returned if the input array is <code>null</code>
+     * 
      * @param element the element to remove
      * @param array the input array
-     *
+     * 
      * @return A new array containing the existing elements except the occurrences of the specified element.
      * @since 3.5
      */
@@ -7748,30 +7684,27 @@ public class ArrayUtils {
         if (index == INDEX_NOT_FOUND) {
             return clone(array);
         }
-
+        
         int[] indices = new int[array.length - index];
         indices[0] = index;
         int count = 1;
-
+        
         while ((index = indexOf(array, element, indices[count - 1] + 1)) != INDEX_NOT_FOUND) {
             indices[count++] = index;
         }
-
-        return removeAll(array, Arrays.copyOf(indices, count));
+        
+        return removeAll(array, Arrays.copyOf(indices, count));        
     }
 
     /**
-     * Removes the occurrences of the specified element from the specified byte array.
-     *
      * <p>
-     * All subsequent elements are shifted to the left (subtracts one from their indices).
-     * If the array doesn't contains such an element, no elements are removed from the array.
-     * <code>null</code> will be returned if the input array is <code>null</code>.
-     * </p>
-     *
+     * Removes the occurrences of the specified element from the specified array. All subsequent elements are shifted to
+     * the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are
+     * removed from the array. <code>null</code> will be returned if the input array is <code>null</code>
+     * 
      * @param element the element to remove
      * @param array the input array
-     *
+     * 
      * @return A new array containing the existing elements except the occurrences of the specified element.
      * @since 3.5
      */
@@ -7780,30 +7713,27 @@ public class ArrayUtils {
         if (index == INDEX_NOT_FOUND) {
             return clone(array);
         }
-
+        
         int[] indices = new int[array.length - index];
         indices[0] = index;
         int count = 1;
-
+        
         while ((index = indexOf(array, element, indices[count - 1] + 1)) != INDEX_NOT_FOUND) {
             indices[count++] = index;
         }
-
+        
         return removeAll(array, Arrays.copyOf(indices, count));
     }
 
     /**
-     * Removes the occurrences of the specified element from the specified short array.
-     *
      * <p>
-     * All subsequent elements are shifted to the left (subtracts one from their indices).
-     * If the array doesn't contains such an element, no elements are removed from the array.
-     * <code>null</code> will be returned if the input array is <code>null</code>.
-     * </p>
-     *
+     * Removes the occurrences of the specified element from the specified array. All subsequent elements are shifted to
+     * the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are
+     * removed from the array. <code>null</code> will be returned if the input array is <code>null</code>
+     * 
      * @param element the element to remove
      * @param array the input array
-     *
+     * 
      * @return A new array containing the existing elements except the occurrences of the specified element.
      * @since 3.5
      */
@@ -7812,30 +7742,27 @@ public class ArrayUtils {
         if (index == INDEX_NOT_FOUND) {
             return clone(array);
         }
-
+        
         int[] indices = new int[array.length - index];
         indices[0] = index;
         int count = 1;
-
+        
         while ((index = indexOf(array, element, indices[count - 1] + 1)) != INDEX_NOT_FOUND) {
             indices[count++] = index;
         }
-
+        
         return removeAll(array, Arrays.copyOf(indices, count));
     }
 
     /**
-     * Removes the occurrences of the specified element from the specified int array.
-     *
      * <p>
-     * All subsequent elements are shifted to the left (subtracts one from their indices).
-     * If the array doesn't contains such an element, no elements are removed from the array.
-     * <code>null</code> will be returned if the input array is <code>null</code>.
-     * </p>
-     *
+     * Removes the occurrences of the specified element from the specified array. All subsequent elements are shifted to
+     * the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are
+     * removed from the array. <code>null</code> will be returned if the input array is <code>null</code>
+     * 
      * @param element the element to remove
      * @param array the input array
-     *
+     * 
      * @return A new array containing the existing elements except the occurrences of the specified element.
      * @since 3.5
      */
@@ -7844,30 +7771,27 @@ public class ArrayUtils {
         if (index == INDEX_NOT_FOUND) {
             return clone(array);
         }
-
+        
         int[] indices = new int[array.length - index];
         indices[0] = index;
         int count = 1;
-
+        
         while ((index = indexOf(array, element, indices[count - 1] + 1)) != INDEX_NOT_FOUND) {
             indices[count++] = index;
         }
-
+        
         return removeAll(array, Arrays.copyOf(indices, count));
     }
 
     /**
-     * Removes the occurrences of the specified element from the specified long array.
-     *
      * <p>
-     * All subsequent elements are shifted to the left (subtracts one from their indices).
-     * If the array doesn't contains such an element, no elements are removed from the array.
-     * <code>null</code> will be returned if the input array is <code>null</code>.
-     * </p>
-     *
+     * Removes the occurrences of the specified element from the specified array. All subsequent elements are shifted to
+     * the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are
+     * removed from the array. <code>null</code> will be returned if the input array is <code>null</code>
+     * 
      * @param element the element to remove
      * @param array the input array
-     *
+     * 
      * @return A new array containing the existing elements except the occurrences of the specified element.
      * @since 3.5
      */
@@ -7876,30 +7800,27 @@ public class ArrayUtils {
         if (index == INDEX_NOT_FOUND) {
             return clone(array);
         }
-
+        
         int[] indices = new int[array.length - index];
         indices[0] = index;
         int count = 1;
-
+        
         while ((index = indexOf(array, element, indices[count - 1] + 1)) != INDEX_NOT_FOUND) {
             indices[count++] = index;
         }
-
+        
         return removeAll(array, Arrays.copyOf(indices, count));
     }
 
     /**
-     * Removes the occurrences of the specified element from the specified float array.
-     *
      * <p>
-     * All subsequent elements are shifted to the left (subtracts one from their indices).
-     * If the array doesn't contains such an element, no elements are removed from the array.
-     * <code>null</code> will be returned if the input array is <code>null</code>.
-     * </p>
-     *
+     * Removes the occurrences of the specified element from the specified array. All subsequent elements are shifted to
+     * the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are
+     * removed from the array. <code>null</code> will be returned if the input array is <code>null</code>
+     * 
      * @param element the element to remove
      * @param array the input array
-     *
+     * 
      * @return A new array containing the existing elements except the occurrences of the specified element.
      * @since 3.5
      */
@@ -7908,30 +7829,27 @@ public class ArrayUtils {
         if (index == INDEX_NOT_FOUND) {
             return clone(array);
         }
-
+        
         int[] indices = new int[array.length - index];
         indices[0] = index;
         int count = 1;
-
+        
         while ((index = indexOf(array, element, indices[count - 1] + 1)) != INDEX_NOT_FOUND) {
             indices[count++] = index;
         }
-
+        
         return removeAll(array, Arrays.copyOf(indices, count));
     }
 
     /**
-     * Removes the occurrences of the specified element from the specified double array.
-     *
      * <p>
-     * All subsequent elements are shifted to the left (subtracts one from their indices).
-     * If the array doesn't contains such an element, no elements are removed from the array.
-     * <code>null</code> will be returned if the input array is <code>null</code>.
-     * </p>
-     *
+     * Removes the occurrences of the specified element from the specified array. All subsequent elements are shifted to
+     * the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are
+     * removed from the array. <code>null</code> will be returned if the input array is <code>null</code>
+     * 
      * @param element the element to remove
      * @param array the input array
-     *
+     * 
      * @return A new array containing the existing elements except the occurrences of the specified element.
      * @since 3.5
      */
@@ -7940,31 +7858,28 @@ public class ArrayUtils {
         if (index == INDEX_NOT_FOUND) {
             return clone(array);
         }
-
+        
         int[] indices = new int[array.length - index];
         indices[0] = index;
         int count = 1;
-
+        
         while ((index = indexOf(array, element, indices[count - 1] + 1)) != INDEX_NOT_FOUND) {
             indices[count++] = index;
         }
-
+        
         return removeAll(array, Arrays.copyOf(indices, count));
     }
 
     /**
-     * Removes the occurrences of the specified element from the specified array.
-     *
      * <p>
-     * All subsequent elements are shifted to the left (subtracts one from their indices).
-     * If the array doesn't contains such an element, no elements are removed from the array.
-     * <code>null</code> will be returned if the input array is <code>null</code>.
-     * </p>
-     *
+     * Removes the occurrences of the specified element from the specified array. All subsequent elements are shifted to
+     * the left (subtracts one from their indices). If the array doesn't contains such an element, no elements are
+     * removed from the array. <code>null</code> will be returned if the input array is <code>null</code>
+     * 
      * @param <T> the type of object in the array
      * @param element the element to remove
      * @param array the input array
-     *
+     * 
      * @return A new array containing the existing elements except the occurrences of the specified element.
      * @since 3.5
      */
@@ -7973,15 +7888,15 @@ public class ArrayUtils {
         if (index == INDEX_NOT_FOUND) {
             return clone(array);
         }
-
+        
         int[] indices = new int[array.length - index];
         indices[0] = index;
         int count = 1;
-
+        
         while ((index = indexOf(array, element, indices[count - 1] + 1)) != INDEX_NOT_FOUND) {
             indices[count++] = index;
         }
-
+        
         return removeAll(array, Arrays.copyOf(indices, count));
     }
 }
diff --git a/src/main/java/org/apache/commons/lang3/ClassUtils.java b/src/main/java/org/apache/commons/lang3/ClassUtils.java
index da2a7b2a3..0a7480ff8 100644
--- a/src/main/java/org/apache/commons/lang3/ClassUtils.java
+++ b/src/main/java/org/apache/commons/lang3/ClassUtils.java
@@ -72,22 +72,6 @@ public class ClassUtils {
      */
     public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);
 
-    /**
-     * Maps names of primitives to their corresponding primitive {@code Class}es.
-     */
-    private static final Map<String, Class<?>> namePrimitiveMap = new HashMap<String, Class<?>>();
-    static {
-         namePrimitiveMap.put("boolean", Boolean.TYPE);
-         namePrimitiveMap.put("byte", Byte.TYPE);
-         namePrimitiveMap.put("char", Character.TYPE);
-         namePrimitiveMap.put("short", Short.TYPE);
-         namePrimitiveMap.put("int", Integer.TYPE);
-         namePrimitiveMap.put("long", Long.TYPE);
-         namePrimitiveMap.put("double", Double.TYPE);
-         namePrimitiveMap.put("float", Float.TYPE);
-         namePrimitiveMap.put("void", Void.TYPE);
-    }
-
     /**
      * Maps primitive {@code Class}es to their corresponding wrapper {@code Class}.
      */
@@ -141,6 +125,7 @@ public class ClassUtils {
         m.put("byte", "B");
         m.put("double", "D");
         m.put("char", "C");
+        m.put("void", "V");
         final Map<String, String> r = new HashMap<String, String>();
         for (final Map.Entry<String, String> e : m.entrySet()) {
             r.put(e.getValue(), e.getKey());
@@ -917,8 +902,9 @@ public class ClassUtils {
             final ClassLoader classLoader, final String className, final boolean initialize) throws ClassNotFoundException {
         try {
             Class<?> clazz;
-            if (namePrimitiveMap.containsKey(className)) {
-                clazz = namePrimitiveMap.get(className);
+            if (abbreviationMap.containsKey(className)) {
+                final String clsName = "[" + abbreviationMap.get(className);
+                clazz = Class.forName(clsName, initialize, classLoader).getComponentType();
             } else {
                 clazz = Class.forName(toCanonicalName(className), initialize, classLoader);
             }
diff --git a/src/main/java/org/apache/commons/lang3/DigitalBase10SizeUnit.java b/src/main/java/org/apache/commons/lang3/DigitalBase10SizeUnit.java
new file mode 100644
index 000000000..02c041599
--- /dev/null
+++ b/src/main/java/org/apache/commons/lang3/DigitalBase10SizeUnit.java
@@ -0,0 +1,393 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.lang3;
+
+/**
+ * A {@code DigitalBase10SizeUnit} represents digital size at a given unit of granularity and provides utility methods
+ * to convert across units, and to perform sizing operations in these units. A {@code DigitalBase10SizeUnit} does not
+ * maintain size information, but only helps organize and use size representations that may be maintained separately
+ * across various contexts.
+ * <p>
+ * A bit is defined as one eighth (8) of a byte, a byte as one thousandth (1000) of a kilobyte, a kilobyte as as one
+ * thousandth (1000) of a megabyte, a megabyte as one thousandth (1000) of a terabyte.
+ * </p>
+ *
+ * @since 3.5
+ * @see <a href="https://en.wikipedia.org/wiki/Binary_prefix">Binary prefix</a>
+ * @see DigitalBase2SizeUnit
+ */
+public enum DigitalBase10SizeUnit {
+
+    /**
+     * Bits.
+     */
+    BITS("b", "bit") {
+        @Override
+        public long convert(final long s, final DigitalBase10SizeUnit u) {
+            return u.toBytes(s);
+        }
+
+        @Override
+        public long toBits(final long size) {
+            return size;
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return size / K1;
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return size / K4;
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return size / K2;
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return size / K3;
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size / K5;
+        }
+    },
+
+    /**
+     * Bytes.
+     */
+    BYTES("B", "byte") {
+        @Override
+        public long convert(final long s, final DigitalBase10SizeUnit u) {
+            return u.toBytes(s);
+        }
+
+        @Override
+        public long toBits(long size) {
+            return x(size, MULB, Long.MAX_VALUE / (K1 / K0));
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return size;
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return size / K3;
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return size / K1;
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return size / K2;
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size / K4;
+        }
+    },
+
+    /**
+     * Gigbytes (Gigabytes).
+     */
+    GIGABYTES("gigabyte", "G") {
+        @Override
+        public long convert(final long s, final DigitalBase10SizeUnit u) {
+            return u.toGigabytes(s);
+        }
+
+        @Override
+        public long toBits(long size) {
+            return x(size, K3, Long.MAX_VALUE / K2);
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return x(size, K3, Long.MAX_VALUE / K3);
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return size;
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return x(size, K3 / K1, Long.MAX_VALUE / (K3 / K1));
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return x(size, K3 / K2, Long.MAX_VALUE / (K3 / K2));
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size / (K4 / K3);
+        }
+    },
+
+    /**
+     * Kibibytes (Kilobytes)
+     */
+    KILOBYTES("kilobytes", "K") {
+        @Override
+        public long convert(final long s, final DigitalBase10SizeUnit u) {
+            return u.toKilobytes(s);
+        }
+
+        @Override
+        public long toBits(long size) {
+            return x(size, K1, Long.MAX_VALUE / K1);
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return x(size, K1, Long.MAX_VALUE / K1);
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return size / (K3 / K1);
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return size;
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return size / (K2 / K1);
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size / (K4 / K1);
+        }
+    },
+
+    /**
+     * Mebibytes (Megabytes)
+     */
+    MEGABYTES("megabytes", "M") {
+        @Override
+        public long convert(final long s, final DigitalBase10SizeUnit u) {
+            return u.toMegabytes(s);
+        }
+
+        @Override
+        public long toBits(long size) {
+            return x(size, K2, Long.MAX_VALUE / K1);
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return x(size, K2, Long.MAX_VALUE / K2);
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return size / (K3 / K2);
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return x(size, K2 / K1, Long.MAX_VALUE / (K2 / K1));
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return size;
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size / (K4 / K2);
+        }
+    },
+
+    /**
+     * Tebibytes (Terabytes)
+     */
+    TERABYTES("terabyte", "T") {
+        @Override
+        public long convert(final long s, final DigitalBase10SizeUnit u) {
+            return u.toTerabytes(s);
+        }
+
+        @Override
+        public long toBits(long size) {
+            return x(size, K4, Long.MAX_VALUE / K3);
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return x(size, K4, Long.MAX_VALUE / K4);
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return x(size, K4 / K3, Long.MAX_VALUE / (K4 / K3));
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return x(size, K4 / K1, Long.MAX_VALUE / (K4 / K1));
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return x(size, K4 / K2, Long.MAX_VALUE / (K4 / K2));
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size;
+        }
+    };
+
+    private static final long MULB = 8L;
+    private static final long MULK = 1000L;
+    private static final long K0 = 1L;
+    private static final long K1 = K0 * MULK;
+    private static final long K2 = K1 * MULK;
+    private static final long K3 = K2 * MULK;
+    private static final long K4 = K3 * MULK;
+    private static final long K5 = K4 * MULK;
+
+    private static long x(final long d, final long m, final long over) {
+        if (d > over) {
+            return Long.MAX_VALUE;
+        }
+        if (d < -over) {
+            return Long.MIN_VALUE;
+        }
+        return d * m;
+    }
+
+    private final String name;
+    private final String symbol;
+
+    /**
+     * Creates a new enum with SI symbol and name.
+     * 
+     * @param symbol
+     *            customary symbol
+     * @param name
+     *            customary name
+     * 
+     * @see <a href="https://en.wikipedia.org/wiki/Metric_prefix">SI</a>
+     */
+    private DigitalBase10SizeUnit(String symbol, String name) {
+        this.name = symbol;
+        this.symbol = name;
+    }
+
+    protected abstract long convert(final long sourceSize, final DigitalBase10SizeUnit sourceUnit);
+
+    /**
+     * Gets the name.
+     * 
+     * @return the name.
+     */
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * Gets the symbol.
+     * 
+     * @return the symbol.
+     */
+    public String getSymbol() {
+        return symbol;
+    }
+
+    /**
+     * Equivalent to {@code BITS.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toBits(final long size);
+
+    /**
+     * Equivalent to {@code BYTES.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toBytes(final long size);
+
+    /**
+     * Equivalent to {@code GIGABYTES.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toGigabytes(final long size);
+
+    /**
+     * Equivalent to {@code KILOBYTES.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toKilobytes(final long size);
+
+    /**
+     * Equivalent to {@code MEGABYTES.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toMegabytes(final long size);
+
+    /**
+     * Equivalent to {@code TERABYTES.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toTerabytes(final long size);
+
+}
\ No newline at end of file
diff --git a/src/main/java/org/apache/commons/lang3/DigitalBase2SizeUnit.java b/src/main/java/org/apache/commons/lang3/DigitalBase2SizeUnit.java
new file mode 100644
index 000000000..39152a0ec
--- /dev/null
+++ b/src/main/java/org/apache/commons/lang3/DigitalBase2SizeUnit.java
@@ -0,0 +1,434 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one or more
+ * contributor license agreements.  See the NOTICE file distributed with
+ * this work for additional information regarding copyright ownership.
+ * The ASF licenses this file to You under the Apache License, Version 2.0
+ * (the "License"); you may not use this file except in compliance with
+ * the License.  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.apache.commons.lang3;
+
+/**
+ * A {@code DigitalBase2SizeUnit} represents digital size at a given unit of granularity and provides utility methods to
+ * convert across units, and to perform sizing operations in these units. A {@code DigitalBase2SizeUnit} does not
+ * maintain size information, but only helps organize and use size representations that may be maintained separately
+ * across various contexts.
+ * <p>
+ * A bit is defined as one eighth (8) of a byte, a byte as one thousand twenty fourth (1024) of a kilobyte, a kilobyte
+ * as as one thousand twenty fourth (1024) of a megabyte, a megabyte as one thousand twenty fourth (1024) of a terabyte.
+ * </p>
+ *
+ * @since 3.5
+ * @see <a href="https://en.wikipedia.org/wiki/Binary_prefix">Binary prefix</a>
+ * @see DigitalBase10SizeUnit
+ */
+public enum DigitalBase2SizeUnit {
+
+    /**
+     * Bits.
+     */
+    BITS("b", "bit") {
+        @Override
+        public long convert(final long s, final DigitalBase2SizeUnit u) {
+            return u.toBytes(s);
+        }
+
+        @Override
+        public long toBits(final long size) {
+            return size;
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return size / K1;
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return size / K4;
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return size / K2;
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return size / K3;
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size / K5;
+        }
+    },
+
+    /**
+     * Bytes.
+     */
+    BYTES("B", "byte") {
+        @Override
+        public long convert(final long s, final DigitalBase2SizeUnit u) {
+            return u.toBytes(s);
+        }
+
+        @Override
+        public long toBits(long size) {
+            return x(size, MULB, Long.MAX_VALUE / (K1 / K0));
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return size;
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return size / K3;
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return size / K1;
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return size / K2;
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size / K4;
+        }
+    },
+
+    /**
+     * Gigbytes (Gigabytes).
+     */
+    GIGABYTES("Gi", "gibibyte", "gigabyte", "G") {
+        @Override
+        public long convert(final long s, final DigitalBase2SizeUnit u) {
+            return u.toGigabytes(s);
+        }
+
+        @Override
+        public long toBits(long size) {
+            return x(size, K3, Long.MAX_VALUE / K2);
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return x(size, K3, Long.MAX_VALUE / K3);
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return size;
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return x(size, K3 / K1, Long.MAX_VALUE / (K3 / K1));
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return x(size, K3 / K2, Long.MAX_VALUE / (K3 / K2));
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size / (K4 / K3);
+        }
+    },
+
+    /**
+     * Kibibytes (Kilobytes)
+     */
+    KILOBYTES("Ki", "kibibyte", "kilobytes", "K") {
+        @Override
+        public long convert(final long s, final DigitalBase2SizeUnit u) {
+            return u.toKilobytes(s);
+        }
+
+        @Override
+        public long toBits(long size) {
+            return x(size, K1, Long.MAX_VALUE / K1);
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return x(size, K1, Long.MAX_VALUE / K1);
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return size / (K3 / K1);
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return size;
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return size / (K2 / K1);
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size / (K4 / K1);
+        }
+    },
+
+    /**
+     * Mebibytes (Megabytes)
+     */
+    MEGABYTES("Mi", "mebibyte", "megabytes", "M") {
+        @Override
+        public long convert(final long s, final DigitalBase2SizeUnit u) {
+            return u.toMegabytes(s);
+        }
+
+        @Override
+        public long toBits(long size) {
+            return x(size, K2, Long.MAX_VALUE / K1);
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return x(size, K2, Long.MAX_VALUE / K2);
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return size / (K3 / K2);
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return x(size, K2 / K1, Long.MAX_VALUE / (K2 / K1));
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return size;
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size / (K4 / K2);
+        }
+    },
+
+    /**
+     * Tebibytes (Terabytes)
+     */
+    TERABYTES("Ti", "tebibyte", "terabyte", "T") {
+        @Override
+        public long convert(final long s, final DigitalBase2SizeUnit u) {
+            return u.toTerabytes(s);
+        }
+
+        @Override
+        public long toBits(long size) {
+            return x(size, K4, Long.MAX_VALUE / K3);
+        }
+
+        @Override
+        public long toBytes(final long size) {
+            return x(size, K4, Long.MAX_VALUE / K4);
+        }
+
+        @Override
+        public long toGigabytes(final long size) {
+            return x(size, K4 / K3, Long.MAX_VALUE / (K4 / K3));
+        }
+
+        @Override
+        public long toKilobytes(final long size) {
+            return x(size, K4 / K1, Long.MAX_VALUE / (K4 / K1));
+        }
+
+        @Override
+        public long toMegabytes(final long size) {
+            return x(size, K4 / K2, Long.MAX_VALUE / (K4 / K2));
+        }
+
+        @Override
+        public long toTerabytes(final long size) {
+            return size;
+        }
+    };
+
+    private static final long MULB = 8L;
+    private static final long MULK = 1024L;
+    private static final long K0 = 1L;
+    private static final long K1 = K0 * MULK;
+    private static final long K2 = K1 * MULK;
+    private static final long K3 = K2 * MULK;
+    private static final long K4 = K3 * MULK;
+    private static final long K5 = K4 * MULK;
+
+    private static long x(final long d, final long m, final long over) {
+        if (d > over) {
+            return Long.MAX_VALUE;
+        }
+        if (d < -over) {
+            return Long.MIN_VALUE;
+        }
+        return d * m;
+    }
+
+    private final String name;
+    private final String symbol;
+    private final String customarySymbol;
+    private final String customaryName;
+
+    /**
+     * Creates a new enum with IEC symbol and name
+     * 
+     * @param iecSymbol
+     *            IEC symbol
+     * @param iecName
+     *            IEC name
+     * @see <a href="https://en.wikipedia.org/wiki/IEC_80000-13">IEC 80000-13</a>
+     */
+    private DigitalBase2SizeUnit(String iecSymbol, String iecName) {
+        this.name = iecName;
+        this.symbol = iecName;
+        this.customarySymbol = iecSymbol;
+        this.customaryName = iecName;
+    }
+
+    /**
+     * Creates a new enum with IEC symbol and name
+     * 
+     * @param iecSymbol
+     *            IEC symbol
+     * @param iecName
+     *            IEC name
+     * @param customarySymbol
+     *            customary symbol
+     * @param customaryName
+     *            customary name
+     * @see <a href="https://en.wikipedia.org/wiki/IEC_80000-13">IEC 80000-13</a>
+     */
+    private DigitalBase2SizeUnit(String iecSymbol, String iecName, String customarySymbol, String customaryName) {
+        this.name = iecName;
+        this.symbol = iecName;
+        this.customarySymbol = customarySymbol;
+        this.customaryName = customaryName;
+    }
+
+    protected abstract long convert(final long sourceSize, final DigitalBase2SizeUnit sourceUnit);
+
+    /**
+     * Gets the customary name.
+     * 
+     * @return the customary name.
+     */
+    public String getCustomaryName() {
+        return customaryName;
+    }
+
+    /**
+     * Gets the customary symbol.
+     * 
+     * @return the customary symbol.
+     */
+    public String getCustomarySymbol() {
+        return customarySymbol;
+    }
+
+    /**
+     * Gets the name.
+     * 
+     * @return the name.
+     */
+    public String getName() {
+        return name;
+    }
+
+    /**
+     * Gets the symbol.
+     * 
+     * @return the symbol.
+     */
+    public String getSymbol() {
+        return symbol;
+    }
+
+    /**
+     * Equivalent to {@code BITS.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toBits(final long size);
+
+    /**
+     * Equivalent to {@code BYTES.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toBytes(final long size);
+
+    /**
+     * Equivalent to {@code GIGABYTES.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toGigabytes(final long size);
+
+    /**
+     * Equivalent to {@code KILOBYTES.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toKilobytes(final long size);
+
+    /**
+     * Equivalent to {@code MEGABYTES.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toMegabytes(final long size);
+
+    /**
+     * Equivalent to {@code TERABYTES.convert(size, this)}.
+     * 
+     * @param size
+     *            the size
+     * @return the converted size
+     * @see #convert
+     */
+    public abstract long toTerabytes(final long size);
+
+}
\ No newline at end of file
diff --git a/src/main/java/org/apache/commons/lang3/ObjectUtils.java b/src/main/java/org/apache/commons/lang3/ObjectUtils.java
index d328105e0..8f1478f66 100644
--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java
+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java
@@ -129,12 +129,9 @@ public class ObjectUtils {
     }
 
     /**
-     * Checks if any value in the given array is not {@code null}.
-     *
-     * <p>
+     * <p>Checks if any value in the array is not {@code null}.
      * If all the values are {@code null} or the array is {@code null}
-     * or empty then {@code false} is returned. Otherwise {@code true} is returned.
-     * </p>
+     * or empty then {@code false} is returned. Otherwise {@code true} is returned.</p>
      *
      * <pre>
      * ObjectUtils.anyNotNull(*)                = true
@@ -156,14 +153,11 @@ public class ObjectUtils {
     }
 
     /**
-     * Checks if all values in the array are not {@code nulls}.
-     *
-     * <p>
-     * If any value is {@code null} or the array is {@code null} then
-     * {@code false} is returned. If all elements in array are not
-     * {@code null} or the array is empty (contains no elements) {@code true}
-     * is returned.
-     * </p>
+     * <p>Checks if all values in the array are not {@code null}s.
+     * If any value is {@code null} or the array is {@code null}
+     * then {@code false} is returned.
+     * If all elements in array are not {@code null} or the array is empty (contains no elements)
+     * {@code true} is returned.</p>
      * 
      * <pre>
      * ObjectUtils.allNotNull(*)             = true
diff --git a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java
index 84b30fd64..3db461f1a 100644
--- a/src/main/java/org/apache/commons/lang3/RandomStringUtils.java
+++ b/src/main/java/org/apache/commons/lang3/RandomStringUtils.java
@@ -81,23 +81,7 @@ public class RandomStringUtils {
     public static String randomAscii(final int count) {
         return random(count, 32, 127, false, false);
     }
-
-    /**
-     * <p>Creates a random string whose length is between the inclusive minimum and
-     * the exclusive maximum.</p>
-     *
-     * <p>Characters will be chosen from the set of characters whose
-     * ASCII value is between {@code 32} and {@code 126} (inclusive).</p>
-     *
-     * @param minLengthInclusive the inclusive minimum length of the string to generate
-     * @param maxLengthExclusive the exclusive maximum length of the string to generate
-     * @return the random string
-     * @since 3.5
-     */
-    public static String randomAscii(final int minLengthInclusive, final int maxLengthExclusive) {
-        return randomAscii(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));
-    }
-
+    
     /**
      * <p>Creates a random string whose length is the number of characters
      * specified.</p>
@@ -111,22 +95,7 @@ public class RandomStringUtils {
     public static String randomAlphabetic(final int count) {
         return random(count, true, false);
     }
-
-    /**
-     * <p>Creates a random string whose length is between the inclusive minimum and
-     * the exclusive maximum.</p>
-     *
-     * <p>Characters will be chosen from the set of alphabetic characters.</p>
-     *
-     * @param minLengthInclusive the inclusive minimum length of the string to generate
-     * @param maxLengthExclusive the exclusive maximum length of the string to generate
-     * @return the random string
-     * @since 3.5
-     */
-    public static String randomAlphabetic(final int minLengthInclusive, final int maxLengthExclusive) {
-        return randomAlphabetic(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));
-    }
-
+    
     /**
      * <p>Creates a random string whose length is the number of characters
      * specified.</p>
@@ -140,22 +109,7 @@ public class RandomStringUtils {
     public static String randomAlphanumeric(final int count) {
         return random(count, true, true);
     }
-
-    /**
-     * <p>Creates a random string whose length is between the inclusive minimum and
-     * the exclusive maximum.</p>
-     *
-     * <p>Characters will be chosen from the set of alpha-numeric characters.</p>
-     *
-     * @param minLengthInclusive the inclusive minimum length of the string to generate
-     * @param maxLengthExclusive the exclusive maximum length of the string to generate
-     * @return the random string
-     * @since 3.5
-     */
-    public static String randomAlphanumeric(final int minLengthInclusive, final int maxLengthExclusive) {
-        return randomAlphanumeric(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));
-    }
-
+    
     /**
      * <p>Creates a random string whose length is the number of characters specified.</p>
      *
@@ -170,22 +124,7 @@ public class RandomStringUtils {
     public static String randomGraph(final int count) {
         return random(count, 33, 126, false, false);
     }
-
-    /**
-     * <p>Creates a random string whose length is between the inclusive minimum and
-     * the exclusive maximum.</p>
-     *
-     * <p>Characters will be chosen from the set of \p{Graph} characters.</p>
-     *
-     * @param minLengthInclusive the inclusive minimum length of the string to generate
-     * @param maxLengthExclusive the exclusive maximum length of the string to generate
-     * @return the random string
-     * @since 3.5
-     */
-    public static String randomGraph(final int minLengthInclusive, final int maxLengthExclusive) {
-        return randomGraph(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));
-    }
-
+    
     /**
      * <p>Creates a random string whose length is the number of characters
      * specified.</p>
@@ -200,21 +139,6 @@ public class RandomStringUtils {
         return random(count, false, true);
     }
 
-    /**
-     * <p>Creates a random string whose length is between the inclusive minimum and
-     * the exclusive maximum.</p>
-     *
-     * <p>Characters will be chosen from the set of \p{Digit} characters.</p>
-     *
-     * @param minLengthInclusive the inclusive minimum length of the string to generate
-     * @param maxLengthExclusive the exclusive maximum length of the string to generate
-     * @return the random string
-     * @since 3.5
-     */
-    public static String randomNumeric(final int minLengthInclusive, final int maxLengthExclusive) {
-        return randomNumeric(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));
-    }
-
     /**
      * <p>Creates a random string whose length is the number of characters specified.</p>
      *
@@ -230,21 +154,6 @@ public class RandomStringUtils {
         return random(count, 32, 126, false, false);
     }
 
-    /**
-     * <p>Creates a random string whose length is between the inclusive minimum and
-     * the exclusive maximum.</p>
-     *
-     * <p>Characters will be chosen from the set of \p{Print} characters.</p>
-     *
-     * @param minLengthInclusive the inclusive minimum length of the string to generate
-     * @param maxLengthExclusive the exclusive maximum length of the string to generate
-     * @return the random string
-     * @since 3.5
-     */
-    public static String randomPrint(final int minLengthInclusive, final int maxLengthExclusive) {
-        return randomPrint(RandomUtils.nextInt(minLengthInclusive, maxLengthExclusive));
-    }
-
     /**
      * <p>Creates a random string whose length is the number of characters
      * specified.</p>
diff --git a/src/main/java/org/apache/commons/lang3/RandomUtils.java b/src/main/java/org/apache/commons/lang3/RandomUtils.java
index 3ea44938a..a1fad2a3b 100644
--- a/src/main/java/org/apache/commons/lang3/RandomUtils.java
+++ b/src/main/java/org/apache/commons/lang3/RandomUtils.java
@@ -51,9 +51,8 @@ public class RandomUtils {
      * <p>
      * Returns a random boolean value
      * </p>
-     *
+     * 
      * @return the random boolean
-     * @since 3.5
      */
     public static boolean nextBoolean() {
         return RANDOM.nextBoolean();
diff --git a/src/main/java/org/apache/commons/lang3/SerializationUtils.java b/src/main/java/org/apache/commons/lang3/SerializationUtils.java
index a5a7b49be..68ebbd5b6 100644
--- a/src/main/java/org/apache/commons/lang3/SerializationUtils.java
+++ b/src/main/java/org/apache/commons/lang3/SerializationUtils.java
@@ -219,10 +219,12 @@ public class SerializationUtils {
         try {
             // stream closed in the finally
             in = new ObjectInputStream(inputStream);
-            @SuppressWarnings("unchecked")
+            @SuppressWarnings("unchecked") // may fail with CCE if serialised form is incorrect
             final T obj = (T) in.readObject();
             return obj;
 
+        } catch (final ClassCastException ex) {
+            throw new SerializationException(ex);
         } catch (final ClassNotFoundException ex) {
             throw new SerializationException(ex);
         } catch (final IOException ex) {
@@ -281,19 +283,6 @@ public class SerializationUtils {
      static class ClassLoaderAwareObjectInputStream extends ObjectInputStream {
         private static final Map<String, Class<?>> primitiveTypes = 
                 new HashMap<String, Class<?>>();
-
-        static {
-            primitiveTypes.put("byte", byte.class);
-            primitiveTypes.put("short", short.class);
-            primitiveTypes.put("int", int.class);
-            primitiveTypes.put("long", long.class);
-            primitiveTypes.put("float", float.class);
-            primitiveTypes.put("double", double.class);
-            primitiveTypes.put("boolean", boolean.class);
-            primitiveTypes.put("char", char.class);
-            primitiveTypes.put("void", void.class);
-        }
-
         private final ClassLoader classLoader;
         
         /**
@@ -306,6 +295,16 @@ public class SerializationUtils {
         public ClassLoaderAwareObjectInputStream(final InputStream in, final ClassLoader classLoader) throws IOException {
             super(in);
             this.classLoader = classLoader;
+
+            primitiveTypes.put("byte", byte.class);
+            primitiveTypes.put("short", short.class);
+            primitiveTypes.put("int", int.class);
+            primitiveTypes.put("long", long.class);
+            primitiveTypes.put("float", float.class);
+            primitiveTypes.put("double", double.class);
+            primitiveTypes.put("boolean", boolean.class);
+            primitiveTypes.put("char", char.class);
+            primitiveTypes.put("void", void.class);
         }
 
         /**
diff --git a/src/main/java/org/apache/commons/lang3/StringUtils.java b/src/main/java/org/apache/commons/lang3/StringUtils.java
index 02c7106a4..9bc639657 100644
--- a/src/main/java/org/apache/commons/lang3/StringUtils.java
+++ b/src/main/java/org/apache/commons/lang3/StringUtils.java
@@ -3139,7 +3139,7 @@ public class StringUtils {
      *  array. A zero or negative value implies no limit.
      * @return an array of parsed Strings, {@code null} if null String was input
      */
-    public static String[] splitByWholeSeparator( final String str, final String separator, final int max) {
+    public static String[] splitByWholeSeparator( final String str, final String separator, final int max ) {
         return splitByWholeSeparatorWorker(str, separator, max, false);
     }
 
@@ -4589,7 +4589,6 @@ public class StringUtils {
      * @param objects the varargs providing the values to join together. {@code null} elements are treated as ""
      * @return the joined String.
      * @throws java.lang.IllegalArgumentException if a null varargs is provided
-     * @since 3.5
      */
     public static String joinWith(final String separator, final Object... objects) {
         if (objects == null) {
@@ -7043,7 +7042,6 @@ public class StringUtils {
      * @return the rotated String,
      *          or the original String if {@code shift == 0},
      *          or {@code null} if null String input
-     * @since 3.5
      */
     public static String rotate(String str, int shift) {
         if (str == null) {
@@ -8222,7 +8220,7 @@ public class StringUtils {
         if (startWhitespaces) {
             return EMPTY;
         }
-        return new String(newChars, 0, count - (whitespacesCount > 0 ? 1 : 0)).trim();
+        return new String(newChars, 0, count - (whitespacesCount > 0 ? 1 : 0));
     }
 
     /**
@@ -8564,89 +8562,4 @@ public class StringUtils {
 
         return wrapWith.concat(str).concat(wrapWith);
     }
-
-    /**
-     * <p>
-     * Wraps a string with a char if that char is missing from the start or end of the given string.
-     * </p>
-     * 
-     * <pre>
-     * StringUtils.wrap(null, *)        = null
-     * StringUtils.wrap("", *)          = ""
-     * StringUtils.wrap("ab", '\0')     = "ab"
-     * StringUtils.wrap("ab", 'x')      = "xabx"
-     * StringUtils.wrap("ab", '\'')     = "'ab'"
-     * StringUtils.wrap("\"ab\"", '\"') = "\"ab\""
-     * StringUtils.wrap("/", '/')  = "/"
-     * StringUtils.wrap("a/b/c", '/')  = "/a/b/c/"
-     * StringUtils.wrap("/a/b/c", '/')  = "/a/b/c/"
-     * StringUtils.wrap("a/b/c/", '/')  = "/a/b/c/"
-     * </pre>
-     * 
-     * @param str
-     *            the string to be wrapped, may be {@code null}
-     * @param wrapWith
-     *            the char that will wrap {@code str}
-     * @return the wrapped string, or {@code null} if {@code str==null}
-     * @since 3.5
-     */
-    public static String wrapIfMissing(final String str, final char wrapWith) {
-        if (isEmpty(str) || wrapWith == '\0') {
-            return str;
-        }
-        StringBuilder builder = new StringBuilder(str.length() + 2);
-        if (str.charAt(0) != wrapWith) {
-            builder.append(wrapWith);
-        }
-        builder.append(str);
-        if (str.charAt(str.length() - 1) != wrapWith) {
-            builder.append(wrapWith);
-        }
-        return builder.toString();
-    }
-
-    /**
-     * <p>
-     * Wraps a string with a string if that string is missing from the start or end of the given string.
-     * </p>
-     * 
-     * <pre>
-     * StringUtils.wrap(null, *)         = null
-     * StringUtils.wrap("", *)           = ""
-     * StringUtils.wrap("ab", null)      = "ab"
-     * StringUtils.wrap("ab", "x")       = "xabx"
-     * StringUtils.wrap("ab", "\"")      = "\"ab\""
-     * StringUtils.wrap("\"ab\"", "\"")  = "\"ab\""
-     * StringUtils.wrap("ab", "'")       = "'ab'"
-     * StringUtils.wrap("'abcd'", "'")   = "'abcd'"
-     * StringUtils.wrap("\"abcd\"", "'") = "'\"abcd\"'"
-     * StringUtils.wrap("'abcd'", "\"")  = "\"'abcd'\""
-     * StringUtils.wrap("/", "/")  = "/"
-     * StringUtils.wrap("a/b/c", "/")  = "/a/b/c/"
-     * StringUtils.wrap("/a/b/c", "/")  = "/a/b/c/"
-     * StringUtils.wrap("a/b/c/", "/")  = "/a/b/c/"
-     * </pre>
-     * 
-     * @param str
-     *            the string to be wrapped, may be {@code null}
-     * @param wrapWith
-     *            the char that will wrap {@code str}
-     * @return the wrapped string, or {@code null} if {@code str==null}
-     * @since 3.5
-     */
-    public static String wrapIfMissing(final String str, final String wrapWith) {
-        if (isEmpty(str) || isEmpty(wrapWith)) {
-            return str;
-        }
-        StringBuilder builder = new StringBuilder(str.length() + wrapWith.length() + wrapWith.length());
-        if (!str.startsWith(wrapWith)) {
-            builder.append(wrapWith);
-        }
-        builder.append(str);
-        if (!str.endsWith(wrapWith)) {
-            builder.append(wrapWith);
-        }
-        return builder.toString();
-    }
-
 }
diff --git a/src/main/java/org/apache/commons/lang3/XMLCharacter.java b/src/main/java/org/apache/commons/lang3/XMLCharacter.java
new file mode 100644
index 000000000..ec42b2ada
--- /dev/null
+++ b/src/main/java/org/apache/commons/lang3/XMLCharacter.java
@@ -0,0 +1,84 @@
+/*
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements. See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership. The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the  "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+/*
+ * From Apache Xalan XMLCharacterRecognizer.
+ */
+package org.apache.commons.lang3;
+
+/**
+ * Verifies whether specified primitives and objects conforms to the XML 1.0 definition of whitespace.
+ * 
+ * <p>
+ * Copied and tweaked from Apache Xalan {@code XMLCharacterRecognizer}
+ * </p>
+ *
+ * @since 3.5
+ */
+public class XMLCharacter {
+
+    /**
+     * Returns whether the specified {@code ch} conforms to the XML 1.0 definition of whitespace. Refer to
+     * <a href="http://www.w3.org/TR/1998/REC-xml-19980210#NT-S"> the definition of <CODE>S</CODE></a> for details.
+     *
+     * @param ch
+     *            Character to check as XML whitespace.
+     * @return true if {@code ch} is XML whitespace; otherwise false.
+     */
+    public static boolean isWhitespace(final char ch) {
+        return ch == 0x20 || ch == 0x09 || ch == 0xD || ch == 0xA;
+    }
+
+    /**
+     * Detects if the string is whitespace.
+     *
+     * @param ch
+     *            Character array to check as XML whitespace.
+     * @param start
+     *            Start index of characters in the array
+     * @param length
+     *            Number of characters in the array
+     * @return true if the characters in the array are XML whitespace; otherwise, false.
+     */
+    public static boolean isWhitespace(final char ch[], final int start, final int length) {
+        final int end = start + length;
+        for (int s = start; s < end; s++) {
+            if (!isWhitespace(ch[s])) {
+                return false;
+            }
+        }
+        return length > 0;
+    }
+
+    /**
+     * Detects if the string is whitespace.
+     *
+     * @param charSequence
+     *            StringBuffer to check as XML whitespace.
+     * @return True if characters in buffer are XML whitespace, false otherwise
+     */
+    public static boolean isWhitespace(final CharSequence charSequence) {
+        final int length = charSequence.length();
+        for (int i = 0; i < length; i++) {
+            if (!isWhitespace(charSequence.charAt(i))) {
+                return false;
+            }
+        }
+        return length > 0;
+    }
+
+}
diff --git a/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java b/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java
index e79a1c915..56d2fcd91 100644
--- a/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java
+++ b/src/main/java/org/apache/commons/lang3/builder/CompareToBuilder.java
@@ -418,8 +418,30 @@ public class CompareToBuilder implements Builder<Integer> {
             return this;
         }
         if (lhs.getClass().isArray()) {
-            // factor out array case in order to keep method small enough to be inlined
-            appendArray(lhs, rhs, comparator);
+            // switch on type of array, to dispatch to the correct handler
+            // handles multi dimensional arrays
+            // throws a ClassCastException if rhs is not the correct array type
+            if (lhs instanceof long[]) {
+                append((long[]) lhs, (long[]) rhs);
+            } else if (lhs instanceof int[]) {
+                append((int[]) lhs, (int[]) rhs);
+            } else if (lhs instanceof short[]) {
+                append((short[]) lhs, (short[]) rhs);
+            } else if (lhs instanceof char[]) {
+                append((char[]) lhs, (char[]) rhs);
+            } else if (lhs instanceof byte[]) {
+                append((byte[]) lhs, (byte[]) rhs);
+            } else if (lhs instanceof double[]) {
+                append((double[]) lhs, (double[]) rhs);
+            } else if (lhs instanceof float[]) {
+                append((float[]) lhs, (float[]) rhs);
+            } else if (lhs instanceof boolean[]) {
+                append((boolean[]) lhs, (boolean[]) rhs);
+            } else {
+                // not an array of primitives
+                // throws a ClassCastException if rhs is not an array
+                append((Object[]) lhs, (Object[]) rhs, comparator);
+            }
         } else {
             // the simple case, not an array, just test the element
             if (comparator == null) {
@@ -435,33 +457,6 @@ public class CompareToBuilder implements Builder<Integer> {
         return this;
     }
 
-    private void appendArray(final Object lhs, final Object rhs, final Comparator<?> comparator) {
-        // switch on type of array, to dispatch to the correct handler
-        // handles multi dimensional arrays
-        // throws a ClassCastException if rhs is not the correct array type
-        if (lhs instanceof long[]) {
-            append((long[]) lhs, (long[]) rhs);
-        } else if (lhs instanceof int[]) {
-            append((int[]) lhs, (int[]) rhs);
-        } else if (lhs instanceof short[]) {
-            append((short[]) lhs, (short[]) rhs);
-        } else if (lhs instanceof char[]) {
-            append((char[]) lhs, (char[]) rhs);
-        } else if (lhs instanceof byte[]) {
-            append((byte[]) lhs, (byte[]) rhs);
-        } else if (lhs instanceof double[]) {
-            append((double[]) lhs, (double[]) rhs);
-        } else if (lhs instanceof float[]) {
-            append((float[]) lhs, (float[]) rhs);
-        } else if (lhs instanceof boolean[]) {
-            append((boolean[]) lhs, (boolean[]) rhs);
-        } else {
-            // not an array of primitives
-            // throws a ClassCastException if rhs is not an array
-            append((Object[]) lhs, (Object[]) rhs, comparator);
-        }
-    }
-
     //-------------------------------------------------------------------------
     /**
      * Appends to the <code>builder</code> the comparison of
diff --git a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
index 6a1b5df7a..b6c59de13 100644
--- a/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
+++ b/src/main/java/org/apache/commons/lang3/builder/EqualsBuilder.java
@@ -171,12 +171,14 @@ public class EqualsBuilder implements Builder<Boolean> {
      * @param lhs <code>this</code> object to register
      * @param rhs the other object to register
      */
-    private static void register(final Object lhs, final Object rhs) {
-        Set<Pair<IDKey, IDKey>> registry = getRegistry();
-        if (registry == null) {
-            registry = new HashSet<Pair<IDKey, IDKey>>();
-            REGISTRY.set(registry);
+    static void register(final Object lhs, final Object rhs) {
+        synchronized (EqualsBuilder.class) {
+            if (getRegistry() == null) {
+                REGISTRY.set(new HashSet<Pair<IDKey, IDKey>>());
+            }
         }
+
+        final Set<Pair<IDKey, IDKey>> registry = getRegistry();
         final Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);
         registry.add(pair);
     }
@@ -193,13 +195,17 @@ public class EqualsBuilder implements Builder<Boolean> {
      * @param rhs the other object to unregister
      * @since 3.0
      */
-    private static void unregister(final Object lhs, final Object rhs) {
+    static void unregister(final Object lhs, final Object rhs) {
         Set<Pair<IDKey, IDKey>> registry = getRegistry();
         if (registry != null) {
             final Pair<IDKey, IDKey> pair = getRegisterPair(lhs, rhs);
             registry.remove(pair);
-            if (registry.isEmpty()) {
-                REGISTRY.remove();
+            synchronized (EqualsBuilder.class) {
+                //read again
+                registry = getRegistry();
+                if (registry != null && registry.isEmpty()) {
+                    REGISTRY.remove();
+                }
             }
         }
     }
diff --git a/src/main/java/org/apache/commons/lang3/builder/EqualsExclude.java b/src/main/java/org/apache/commons/lang3/builder/EqualsExclude.java
index fe09f815e..1ed29f05d 100755
--- a/src/main/java/org/apache/commons/lang3/builder/EqualsExclude.java
+++ b/src/main/java/org/apache/commons/lang3/builder/EqualsExclude.java
@@ -26,8 +26,6 @@ import java.lang.annotation.Target;
  * Use this annotation to exclude a field from being being used by
  * the various <code>reflectionEquals</code> methods defined on
  * {@link EqualsBuilder}.
- *
- * @since 3.5
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
diff --git a/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java b/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java
index beab5fc51..98ed5c5b6 100644
--- a/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java
+++ b/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java
@@ -497,13 +497,13 @@ public class HashCodeBuilder implements Builder<Integer> {
      * @param value
      *            The object to register.
      */
-    private static void register(final Object value) {
-        Set<IDKey> registry = getRegistry();
-        if (registry == null) {
-            registry = new HashSet<IDKey>();
-            REGISTRY.set(registry);
+    static void register(final Object value) {
+        synchronized (HashCodeBuilder.class) {
+            if (getRegistry() == null) {
+                REGISTRY.set(new HashSet<IDKey>());
+            }
         }
-        registry.add(new IDKey(value));
+        getRegistry().add(new IDKey(value));
     }
 
     /**
@@ -518,12 +518,16 @@ public class HashCodeBuilder implements Builder<Integer> {
      *            The object to unregister.
      * @since 2.3
      */
-    private static void unregister(final Object value) {
+    static void unregister(final Object value) {
         Set<IDKey> registry = getRegistry();
         if (registry != null) {
             registry.remove(new IDKey(value));
-            if (registry.isEmpty()) {
-                REGISTRY.remove();
+            synchronized (HashCodeBuilder.class) {
+                //read again
+                registry = getRegistry();
+                if (registry != null && registry.isEmpty()) {
+                    REGISTRY.remove();
+                }
             }
         }
     }
diff --git a/src/main/java/org/apache/commons/lang3/builder/HashCodeExclude.java b/src/main/java/org/apache/commons/lang3/builder/HashCodeExclude.java
index 65d9bef42..25bac4c20 100755
--- a/src/main/java/org/apache/commons/lang3/builder/HashCodeExclude.java
+++ b/src/main/java/org/apache/commons/lang3/builder/HashCodeExclude.java
@@ -26,8 +26,6 @@ import java.lang.annotation.Target;
  * Use this annotation to exclude a field from being being used by
  * the various <code>reflectionHashcode</code> methods defined on
  * {@link HashCodeBuilder}.
- *
- * @since 3.5
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
diff --git a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
index 61ce6660b..b2b63a65d 100644
--- a/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
+++ b/src/main/java/org/apache/commons/lang3/builder/ReflectionToStringBuilder.java
@@ -233,7 +233,7 @@ public class ReflectionToStringBuilder extends ToStringBuilder {
      * @param outputTransients
      *            whether to include transient fields
      * @param outputStatics
-     *            whether to include static fields
+     *            whether to include transient fields
      * @return the String result
      * @throws IllegalArgumentException
      *             if the Object is <code>null</code>
diff --git a/src/main/java/org/apache/commons/lang3/builder/ToStringExclude.java b/src/main/java/org/apache/commons/lang3/builder/ToStringExclude.java
index 4cd31cc1f..c080e317a 100755
--- a/src/main/java/org/apache/commons/lang3/builder/ToStringExclude.java
+++ b/src/main/java/org/apache/commons/lang3/builder/ToStringExclude.java
@@ -25,8 +25,6 @@ import java.lang.annotation.RetentionPolicy;
 /**
  * Use this annotation to exclude a field from being being used by
  * the {@link ReflectionToStringBuilder}.
- *
- * @since 3.5
  */
 @Retention(RetentionPolicy.RUNTIME)
 @Target(ElementType.FIELD)
diff --git a/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java b/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java
index 8ad04ccec..475af1b27 100644
--- a/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java
+++ b/src/main/java/org/apache/commons/lang3/event/EventListenerSupport.java
@@ -190,8 +190,8 @@ public class EventListenerSupport<L> implements Serializable {
      * @param allowDuplicate the flag for determining if duplicate listener
      * objects are allowed to be registered.
      *
-     * @throws NullPointerException if <code>listener</code> is <code>null</code>.
-     * @since 3.5
+     * @throws NullPointerException if <code>listener</code> is
+     * <code>null</code>.
      */
     public void addListener(final L listener, boolean allowDuplicate) {
         Validate.notNull(listener, "Listener object cannot be null.");
diff --git a/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java b/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java
index 4fc6774f4..9a5f5a89f 100644
--- a/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java
+++ b/src/main/java/org/apache/commons/lang3/exception/ExceptionUtils.java
@@ -743,6 +743,9 @@ public class ExceptionUtils {
      * techniques are required when interacting with non-java jvm code such as
      * Jyton, Scala, or Groovy, since these languages do not consider any
      * exceptions as checked.
+     * 
+     * @since 3.5
+     * @see #wrapAndThrow(Throwable)
      *
      * @param throwable
      *            The throwable to rethrow.
@@ -751,8 +754,6 @@ public class ExceptionUtils {
      *         which the calling site requires. "Returning" the results of this
      *         method, as done in the propagateExample above, will satisfy the
      *         java compiler requirement that all code paths return a value.
-     * @since 3.5
-     * @see #wrapAndThrow(Throwable)
      */
     public static <R> R rethrow(Throwable throwable) {
         // claim that the typeErasure invocation throws a RuntimeException
@@ -779,7 +780,11 @@ public class ExceptionUtils {
      * The downside to using this approach is that invoking code which needs to
      * handle specific checked exceptions must sniff up the exception chain to
      * determine if the caught exception was caused by the checked exception.
-     *
+     * 
+     * @since 3.5
+     * @see #rethrow(Throwable)
+     * @see #hasCause(Throwable, Class)
+     * 
      * @param throwable
      *            The throwable to rethrow.
      * @param <R> The type of the returned value.
@@ -787,9 +792,6 @@ public class ExceptionUtils {
      *         which the calling site requires. "Returning" the results of this
      *         method will satisfy the java compiler requirement that all code
      *         paths return a value.
-     * @since 3.5
-     * @see #rethrow(Throwable)
-     * @see #hasCause(Throwable, Class)
      */
     public static <R> R wrapAndThrow(Throwable throwable) {
         if (throwable instanceof RuntimeException) {
@@ -804,15 +806,16 @@ public class ExceptionUtils {
     /**
      * Does the throwable's causal chain have an immediate or wrapped exception
      * of the given type?
-     *
+     * 
+     * @since 3.5
+     * @see #wrapAndThrow(Throwable)
+     * 
      * @param chain
      *            The root of a Throwable causal chain.
      * @param type
      *            The exception type to test.
      * @return true, if chain is an instance of type or is an
      *         UndeclaredThrowableException wrapping a cause.
-     * @since 3.5
-     * @see #wrapAndThrow(Throwable)
      */
     public static boolean hasCause(Throwable chain,
             Class<? extends Throwable> type) {
diff --git a/src/main/java/org/apache/commons/lang3/mutable/MutableByte.java b/src/main/java/org/apache/commons/lang3/mutable/MutableByte.java
index 61a175a8e..efe6dd1f0 100644
--- a/src/main/java/org/apache/commons/lang3/mutable/MutableByte.java
+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableByte.java
@@ -227,7 +227,6 @@ public class MutableByte extends Number implements Comparable<MutableByte>, Muta
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public byte addAndGet(final byte operand) {
         this.value += operand;
@@ -241,7 +240,6 @@ public class MutableByte extends Number implements Comparable<MutableByte>, Muta
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public byte addAndGet(final Number operand) {
         this.value += operand.byteValue();
@@ -254,7 +252,6 @@ public class MutableByte extends Number implements Comparable<MutableByte>, Muta
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public byte getAndAdd(final byte operand) {
         byte last = value;
@@ -269,7 +266,6 @@ public class MutableByte extends Number implements Comparable<MutableByte>, Muta
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public byte getAndAdd(final Number operand) {
         byte last = value;
diff --git a/src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java b/src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java
index 657886ece..aa089fe70 100644
--- a/src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java
+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableDouble.java
@@ -244,7 +244,6 @@ public class MutableDouble extends Number implements Comparable<MutableDouble>,
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public double addAndGet(final double operand) {
         this.value += operand;
@@ -258,7 +257,6 @@ public class MutableDouble extends Number implements Comparable<MutableDouble>,
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public double addAndGet(final Number operand) {
         this.value += operand.doubleValue();
@@ -271,7 +269,6 @@ public class MutableDouble extends Number implements Comparable<MutableDouble>,
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public double getAndAdd(final double operand) {
         double last = value;
@@ -286,7 +283,6 @@ public class MutableDouble extends Number implements Comparable<MutableDouble>,
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public double getAndAdd(final Number operand) {
         double last = value;
diff --git a/src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java b/src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java
index 00a500062..9893c031a 100644
--- a/src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java
+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableFloat.java
@@ -244,7 +244,6 @@ public class MutableFloat extends Number implements Comparable<MutableFloat>, Mu
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public float addAndGet(final float operand) {
         this.value += operand;
@@ -258,7 +257,6 @@ public class MutableFloat extends Number implements Comparable<MutableFloat>, Mu
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public float addAndGet(final Number operand) {
         this.value += operand.floatValue();
@@ -271,7 +269,6 @@ public class MutableFloat extends Number implements Comparable<MutableFloat>, Mu
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public float getAndAdd(final float operand) {
         float last = value;
@@ -286,7 +283,6 @@ public class MutableFloat extends Number implements Comparable<MutableFloat>, Mu
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public float getAndAdd(final Number operand) {
         float last = value;
diff --git a/src/main/java/org/apache/commons/lang3/mutable/MutableInt.java b/src/main/java/org/apache/commons/lang3/mutable/MutableInt.java
index a25be7c78..25bc5b98f 100644
--- a/src/main/java/org/apache/commons/lang3/mutable/MutableInt.java
+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableInt.java
@@ -227,7 +227,6 @@ public class MutableInt extends Number implements Comparable<MutableInt>, Mutabl
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public int addAndGet(final int operand) {
         this.value += operand;
@@ -241,7 +240,6 @@ public class MutableInt extends Number implements Comparable<MutableInt>, Mutabl
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public int addAndGet(final Number operand) {
         this.value += operand.intValue();
@@ -254,7 +252,6 @@ public class MutableInt extends Number implements Comparable<MutableInt>, Mutabl
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public int getAndAdd(final int operand) {
         int last = value;
@@ -269,7 +266,6 @@ public class MutableInt extends Number implements Comparable<MutableInt>, Mutabl
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public int getAndAdd(final Number operand) {
         int last = value;
diff --git a/src/main/java/org/apache/commons/lang3/mutable/MutableLong.java b/src/main/java/org/apache/commons/lang3/mutable/MutableLong.java
index bbb7b02c7..51d14c790 100644
--- a/src/main/java/org/apache/commons/lang3/mutable/MutableLong.java
+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableLong.java
@@ -227,7 +227,6 @@ public class MutableLong extends Number implements Comparable<MutableLong>, Muta
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public long addAndGet(final long operand) {
         this.value += operand;
@@ -241,7 +240,6 @@ public class MutableLong extends Number implements Comparable<MutableLong>, Muta
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public long addAndGet(final Number operand) {
         this.value += operand.longValue();
@@ -254,7 +252,6 @@ public class MutableLong extends Number implements Comparable<MutableLong>, Muta
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public long getAndAdd(final long operand) {
         long last = value;
@@ -269,7 +266,6 @@ public class MutableLong extends Number implements Comparable<MutableLong>, Muta
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public long getAndAdd(final Number operand) {
         long last = value;
diff --git a/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java b/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java
index a37949c3b..25cea60b6 100644
--- a/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java
+++ b/src/main/java/org/apache/commons/lang3/mutable/MutableShort.java
@@ -227,7 +227,6 @@ public class MutableShort extends Number implements Comparable<MutableShort>, Mu
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public short addAndGet(final short operand) {
         this.value += operand;
@@ -241,7 +240,6 @@ public class MutableShort extends Number implements Comparable<MutableShort>, Mu
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance after adding the operand
-     * @since 3.5
      */
     public short addAndGet(final Number operand) {
         this.value += operand.shortValue();
@@ -254,7 +252,6 @@ public class MutableShort extends Number implements Comparable<MutableShort>, Mu
      *
      * @param operand the quantity to add, not null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public short getAndAdd(final short operand) {
         short last = value;
@@ -269,7 +266,6 @@ public class MutableShort extends Number implements Comparable<MutableShort>, Mu
      * @param operand the quantity to add, not null
      * @throws NullPointerException if {@code operand} is null
      * @return the value associated with this instance immediately before the operand was added
-     * @since 3.5
      */
     public short getAndAdd(final Number operand) {
         short last = value;
diff --git a/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java b/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
index 28bae6688..296a2db38 100644
--- a/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
+++ b/src/main/java/org/apache/commons/lang3/reflect/MethodUtils.java
@@ -109,11 +109,11 @@ public class MethodUtils {
      * @throws NoSuchMethodException if there is no such accessible method
      * @throws InvocationTargetException wraps an exception thrown by the method invoked
      * @throws IllegalAccessException if the requested method is not accessible via reflection
-     *
+     *  
      * @since 3.5
      */
-    public static Object invokeMethod(final Object object, final boolean forceAccess, final String methodName)
-            throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
+    public static Object invokeMethod(final Object object, final boolean forceAccess, final String methodName) 
+    		throws NoSuchMethodException, IllegalAccessException, InvocationTargetException {
         return invokeMethod(object, forceAccess, methodName, ArrayUtils.EMPTY_OBJECT_ARRAY, null);
     }
 
@@ -166,7 +166,7 @@ public class MethodUtils {
      * @throws NoSuchMethodException if there is no such accessible method
      * @throws InvocationTargetException wraps an exception thrown by the method invoked
      * @throws IllegalAccessException if the requested method is not accessible via reflection
-     *
+     * 
      * @since 3.5
      */
     public static Object invokeMethod(final Object object, final boolean forceAccess, final String methodName,
@@ -194,7 +194,6 @@ public class MethodUtils {
      * @throws NoSuchMethodException if there is no such accessible method
      * @throws InvocationTargetException wraps an exception thrown by the method invoked
      * @throws IllegalAccessException if the requested method is not accessible via reflection
-     * @since 3.5
      */
     public static Object invokeMethod(final Object object, final boolean forceAccess, final String methodName,
             Object[] args, Class<?>[] parameterTypes)
@@ -202,36 +201,36 @@ public class MethodUtils {
             InvocationTargetException {
         parameterTypes = ArrayUtils.nullToEmpty(parameterTypes);
         args = ArrayUtils.nullToEmpty(args);
-
+        
         final String messagePrefix;
         Method method = null;
         boolean isOriginallyAccessible = false;
         Object result = null;
-
+        
         try {
             if (forceAccess) {
-                messagePrefix = "No such method: ";
-                method = getMatchingMethod(object.getClass(),
+            	messagePrefix = "No such method: ";
+            	method = getMatchingMethod(object.getClass(),
                         methodName, parameterTypes);
-                if (method != null) {
-                    isOriginallyAccessible = method.isAccessible();
-                    if (!isOriginallyAccessible) {
-                        method.setAccessible(true);
-                    }
-                }
-            } else {
-                messagePrefix = "No such accessible method: ";
-                method = getMatchingAccessibleMethod(object.getClass(),
+            	if (method != null) {
+            	    isOriginallyAccessible = method.isAccessible();
+            	    if (!isOriginallyAccessible) {
+            	        method.setAccessible(true);
+            	    }
+            	}
+            }  else {
+            	messagePrefix = "No such accessible method: ";
+            	method = getMatchingAccessibleMethod(object.getClass(),
                         methodName, parameterTypes);
             }
-
+            
             if (method == null) {
                 throw new NoSuchMethodException(messagePrefix
                         + methodName + "() on object: "
                         + object.getClass().getName());
             }
             args = toVarArgs(method, args);
-
+            
             result = method.invoke(object, args);
         }
         finally {
@@ -239,10 +238,10 @@ public class MethodUtils {
                 method.setAccessible(isOriginallyAccessible);
             }
         }
-
+        
         return result;
     }
-
+    
     /**
      * <p>Invokes a named method whose parameter type matches the object type.</p>
      *
@@ -266,7 +265,7 @@ public class MethodUtils {
             Object[] args, Class<?>[] parameterTypes)
             throws NoSuchMethodException, IllegalAccessException,
             InvocationTargetException {
-        return invokeMethod(object, false, methodName, args, parameterTypes);
+    	return invokeMethod(object, false, methodName, args, parameterTypes);
     }
 
     /**
@@ -285,8 +284,8 @@ public class MethodUtils {
      *  method invoked
      * @throws IllegalAccessException if the requested method is not accessible
      *  via reflection
-     *
-     * @since 3.4
+     *  
+     *  @since 3.4
      */
     public static Object invokeExactMethod(final Object object, final String methodName) throws NoSuchMethodException,
             IllegalAccessException, InvocationTargetException {
@@ -726,33 +725,33 @@ public class MethodUtils {
      */
     public static Method getMatchingMethod(final Class<?> cls, final String methodName,
             final Class<?>... parameterTypes) {
-        Validate.notNull(cls, "Null class not allowed.");
-        Validate.notEmpty(methodName, "Null or blank methodName not allowed.");
-
-        // Address methods in superclasses
-        Method[] methodArray = cls.getDeclaredMethods();
-        List<Class<?>> superclassList = ClassUtils.getAllSuperclasses(cls);
-        for (Class<?> klass : superclassList) {
-            methodArray = ArrayUtils.addAll(methodArray, klass.getDeclaredMethods());
-        }
-
-        Method inexactMatch = null;
-        for (Method method : methodArray) {
-            if (methodName.equals(method.getName()) &&
-                    ArrayUtils.isEquals(parameterTypes, method.getParameterTypes())) {
-                return method;
-            } else if (methodName.equals(method.getName()) &&
-                    ClassUtils.isAssignable(parameterTypes, method.getParameterTypes(), true)) {
-                if (inexactMatch == null) {
-                    inexactMatch = method;
-                } else if (distance(parameterTypes, method.getParameterTypes())
-                        < distance(parameterTypes, inexactMatch.getParameterTypes())) {
-                    inexactMatch = method;
-                }
-            }
-
-        }
-        return inexactMatch;
+    	Validate.notNull(cls, "Null class not allowed.");
+    	Validate.notEmpty(methodName, "Null or blank methodName not allowed.");
+    	
+    	// Address methods in superclasses
+    	Method[] methodArray = cls.getDeclaredMethods();
+    	List<Class<?>> superclassList = ClassUtils.getAllSuperclasses(cls);
+    	for (Class<?> klass: superclassList) {
+    		methodArray = ArrayUtils.addAll(methodArray, klass.getDeclaredMethods());
+    	}
+    	
+    	Method inexactMatch = null;
+    	for (Method method: methodArray) {
+    		if (methodName.equals(method.getName()) && 
+    				ArrayUtils.isEquals(parameterTypes, method.getParameterTypes())) {
+    			return method;
+    		} else if (methodName.equals(method.getName()) &&  
+    				ClassUtils.isAssignable(parameterTypes, method.getParameterTypes(), true)) {
+    			if (inexactMatch == null) {
+    				inexactMatch = method;
+    			} else if (distance(parameterTypes, method.getParameterTypes()) 
+    					< distance(parameterTypes, inexactMatch.getParameterTypes())) {
+    				inexactMatch = method;
+    			}
+    		}
+    		
+    	}
+    	return inexactMatch;
     }
     
     /**
diff --git a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
index 30e9940ba..6eb286ab9 100644
--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
@@ -464,10 +464,6 @@ public class TypeUtils {
             final Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);
             final Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);
 
-            if (toTypeArg == null && fromTypeArg instanceof Class) {
-                continue;
-            }
-
             // parameters must either be absent from the subject type, within
             // the bounds of the wildcard type, or be an exact match to the
             // parameters of the target type.
diff --git a/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java b/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java
index 126af84cc..abc7f3e54 100644
--- a/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java
+++ b/src/main/java/org/apache/commons/lang3/text/StrSubstitutor.java
@@ -1206,7 +1206,6 @@ public class StrSubstitutor {
      * substitution.
      * 
      * @return the preserve escape flag
-     * @since 3.5
      */
     public boolean isPreserveEscapes() {
         return preserveEscapes;
@@ -1222,7 +1221,6 @@ public class StrSubstitutor {
      * <code>${this-is-escaped}</code>).  The default value is <b>false</b>
      * 
      * @param preserveEscapes true if escapes are to be preserved
-     * @since 3.5
      */
     public void setPreserveEscapes(final boolean preserveEscapes) {
         this.preserveEscapes = preserveEscapes;
diff --git a/src/main/java/org/apache/commons/lang3/text/WordUtils.java b/src/main/java/org/apache/commons/lang3/text/WordUtils.java
index b46b72cad..da9285688 100644
--- a/src/main/java/org/apache/commons/lang3/text/WordUtils.java
+++ b/src/main/java/org/apache/commons/lang3/text/WordUtils.java
@@ -584,7 +584,6 @@ public class WordUtils {
      * @param word The CharSequence to check, may be null
      * @param words The array of String words to search for, may be null
      * @return {@code true} if all search words are found, {@code false} otherwise
-     * @since 3.5
      */
     public static boolean containsAllWords(CharSequence word, CharSequence... words) {
         if (StringUtils.isEmpty(word) || ArrayUtils.isEmpty(words)) {
diff --git a/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java b/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java
index 3f78753eb..45e2d3200 100644
--- a/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java
+++ b/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java
@@ -42,12 +42,8 @@ public class DateFormatUtils {
 
     /**
      * ISO 8601 formatter for date-time without time zone.
-     *
-     * <p>
-     * The format used is {@code yyyy-MM-dd'T'HH:mm:ss}. This format uses the
-     * default TimeZone in effect at the time of loading DateFormatUtils class.
-     * </p>
-     *
+     * The format used is {@code yyyy-MM-dd'T'HH:mm:ss}.
+     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      * @since 3.5
      */
     public static final FastDateFormat ISO_8601_EXTENDED_DATETIME_FORMAT
@@ -61,12 +57,8 @@ public class DateFormatUtils {
 
     /**
      * ISO 8601 formatter for date-time with time zone.
-     *
-     * <p>
-     * The format used is {@code yyyy-MM-dd'T'HH:mm:ssZZ}. This format uses the
-     * default TimeZone in effect at the time of loading DateFormatUtils class.
-     * </p>
-     *
+     * The format used is {@code yyyy-MM-dd'T'HH:mm:ssZZ}.
+     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      * @since 3.5
      */
     public static final FastDateFormat ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT
@@ -80,12 +72,8 @@ public class DateFormatUtils {
 
     /**
      * ISO 8601 formatter for date without time zone.
-     *
-     * <p>
-     * The format used is {@code yyyy-MM-dd}. This format uses the
-     * default TimeZone in effect at the time of loading DateFormatUtils class.
-     * </p>
-     *
+     * The format used is {@code yyyy-MM-dd}.
+     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      * @since 3.5
      */
     public static final FastDateFormat ISO_8601_EXTENDED_DATE_FORMAT
@@ -99,14 +87,11 @@ public class DateFormatUtils {
 
     /**
      * ISO 8601-like formatter for date with time zone.
-     *
-     * <p>
-     * The format used is {@code yyyy-MM-ddZZ}. This pattern does not comply
-     * with the formal ISO 8601 specification as the standard does not allow
-     * a time zone  without a time. This format uses the default TimeZone in
-     * effect at the time of loading DateFormatUtils class.
-     * </p>
-     *
+     * The format used is {@code yyyy-MM-ddZZ}.
+     * This pattern does not comply with the formal ISO 8601 specification
+     * as the standard does not allow a time zone  without a time.
+     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
+     * 
      * @deprecated - as of 4.0, ISO_DATE_TIME_ZONE_FORMAT will be removed.
      */
     @Deprecated
@@ -114,14 +99,10 @@ public class DateFormatUtils {
             = FastDateFormat.getInstance("yyyy-MM-ddZZ");
 
     /**
-     * Non-compliant formatter for time without time zone (ISO 8601 does not
-     * prefix 'T' for standalone time value).
-     *
-     * <p>
-     * The format used is {@code 'T'HH:mm:ss}. This format uses the default
-     * TimeZone in effect at the time of loading DateFormatUtils class.
-     * </p>
-     *
+     * Non-compliant formatter for time without time zone. (ISO 8601 does not prefix 'T' for standalone time value)
+     * The format used is {@code 'T'HH:mm:ss}.
+     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
+     * 
      * @deprecated - as of 4.0, ISO_TIME_FORMAT will be removed.
      */
     @Deprecated
@@ -129,14 +110,10 @@ public class DateFormatUtils {
             = FastDateFormat.getInstance("'T'HH:mm:ss");
 
     /**
-     * Non-compliant formatter for time with time zone (ISO 8601 does not
-     * prefix 'T' for standalone time value).
-     *
-     * <p>
-     * The format used is {@code 'T'HH:mm:ssZZ}. This format uses the default
-     * TimeZone in effect at the time of loading DateFormatUtils class.
-     * </p>
-     *
+     * Non-compliant formatter for time with time zone. (ISO 8601 does not prefix 'T' for standalone time value)
+     * The format used is {@code 'T'HH:mm:ssZZ}.
+     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
+     * 
      * @deprecated - as of 4.0, ISO_TIME_TIME_ZONE_FORMAT will be removed.
      */
     @Deprecated
@@ -145,12 +122,8 @@ public class DateFormatUtils {
 
     /**
      * ISO 8601 formatter for time without time zone.
-     *
-     * <p>
-     * The format used is {@code HH:mm:ss}. This format uses the default
-     * TimeZone in effect at the time of loading DateFormatUtils class.
-     * </p>
-     *
+     * The format used is {@code HH:mm:ss}.
+     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      * @since 3.5
      */
     public static final FastDateFormat ISO_8601_EXTENDED_TIME_FORMAT
@@ -164,12 +137,8 @@ public class DateFormatUtils {
 
     /**
      * ISO 8601 formatter for time with time zone.
-     *
-     * <p>
-     * The format used is {@code HH:mm:ssZZ}. This format uses the default
-     * TimeZone in effect at the time of loading DateFormatUtils class.
-     * </p>
-     *
+     * The format used is {@code HH:mm:ssZZ}.
+     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      * @since 3.5
      */
     public static final FastDateFormat ISO_8601_EXTENDED_TIME_TIME_ZONE_FORMAT
@@ -183,12 +152,8 @@ public class DateFormatUtils {
 
     /**
      * SMTP (and probably other) date headers.
-     *
-     * <p>
      * The format used is {@code EEE, dd MMM yyyy HH:mm:ss Z} in US locale.
-     * This format uses the default TimeZone in effect at the time of loading
-     * DateFormatUtils class.
-     * </p>
+     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      */
     public static final FastDateFormat SMTP_DATETIME_FORMAT
             = FastDateFormat.getInstance("EEE, dd MMM yyyy HH:mm:ss Z", Locale.US);
diff --git a/src/main/java/org/apache/commons/lang3/time/DatePrinter.java b/src/main/java/org/apache/commons/lang3/time/DatePrinter.java
index 342405af5..5bf393b5b 100644
--- a/src/main/java/org/apache/commons/lang3/time/DatePrinter.java
+++ b/src/main/java/org/apache/commons/lang3/time/DatePrinter.java
@@ -65,11 +65,11 @@ public interface DatePrinter {
     /**
      * <p>Formats a millisecond {@code long} value into the
      * supplied {@code StringBuffer}.</p>
+     * @deprecated Use {{@link #format(long, Appendable)}.
      *
      * @param millis  the millisecond value to format
      * @param buf  the buffer to format into
      * @return the specified string buffer
-     * @deprecated Use {{@link #format(long, Appendable)}.
      */
     @Deprecated
     StringBuffer format(long millis, StringBuffer buf);
@@ -77,11 +77,11 @@ public interface DatePrinter {
     /**
      * <p>Formats a {@code Date} object into the
      * supplied {@code StringBuffer} using a {@code GregorianCalendar}.</p>
+     * @deprecated Use {{@link #format(Date, Appendable)}.
      *
      * @param date  the date to format
      * @param buf  the buffer to format into
      * @return the specified string buffer
-     * @deprecated Use {{@link #format(Date, Appendable)}.
      */
     @Deprecated
     StringBuffer format(Date date, StringBuffer buf);
@@ -91,11 +91,11 @@ public interface DatePrinter {
      * The TimeZone set on the Calendar is only used to adjust the time offset.
      * The TimeZone specified during the construction of the Parser will determine the TimeZone
      * used in the formatted string.
+     * @deprecated Use {{@link #format(Calendar, Appendable)}.
      *
      * @param calendar  the calendar to format
      * @param buf  the buffer to format into
      * @return the specified string buffer
-     * @deprecated Use {{@link #format(Calendar, Appendable)}.
      */
     @Deprecated
     StringBuffer format(Calendar calendar, StringBuffer buf);
@@ -167,12 +167,13 @@ public interface DatePrinter {
     /**
      * <p>Formats a {@code Date}, {@code Calendar} or
      * {@code Long} (milliseconds) object.</p>
-     *
+     * 
+     * See {@link java.text.DateFormat#format(Object, StringBuffer, FieldPosition)}
+     * 
      * @param obj  the object to format
      * @param toAppendTo  the buffer to append to
      * @param pos  the position - ignored
      * @return the buffer passed in
-     * @see java.text.DateFormat#format(Object, StringBuffer, FieldPosition)
      */
     StringBuffer format(Object obj, StringBuffer toAppendTo, FieldPosition pos);
 }
diff --git a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java
index 688830cf8..15dab8d8f 100644
--- a/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java
+++ b/src/main/java/org/apache/commons/lang3/time/FastDateFormat.java
@@ -448,12 +448,12 @@ public class FastDateFormat extends Format implements DateParser, DatePrinter {
     /**
      * <p>Formats a millisecond {@code long} value into the
      * supplied {@code StringBuffer}.</p>
+     * @deprecated Use {{@link #format(long, Appendable)}.
      *
      * @param millis  the millisecond value to format
      * @param buf  the buffer to format into
      * @return the specified string buffer
      * @since 2.1
-     * @deprecated Use {{@link #format(long, Appendable)}.
      */
     @Deprecated
     @Override
@@ -464,11 +464,11 @@ public class FastDateFormat extends Format implements DateParser, DatePrinter {
     /**
      * <p>Formats a {@code Date} object into the
      * supplied {@code StringBuffer} using a {@code GregorianCalendar}.</p>
+     * @deprecated Use {{@link #format(Date, Appendable)}.
      *
      * @param date  the date to format
      * @param buf  the buffer to format into
      * @return the specified string buffer
-     * @deprecated Use {{@link #format(Date, Appendable)}.
      */
     @Deprecated
     @Override
@@ -479,11 +479,11 @@ public class FastDateFormat extends Format implements DateParser, DatePrinter {
     /**
      * <p>Formats a {@code Calendar} object into the
      * supplied {@code StringBuffer}.</p>
+     * @deprecated Use {{@link #format(Calendar, Appendable)}.
      *
      * @param calendar  the calendar to format
      * @param buf  the buffer to format into
      * @return the specified string buffer
-     * @deprecated Use {{@link #format(Calendar, Appendable)}.
      */
     @Deprecated
     @Override
@@ -658,11 +658,11 @@ public class FastDateFormat extends Format implements DateParser, DatePrinter {
     /**
      * <p>Performs the formatting by applying the rules to the
      * specified calendar.</p>
+     * @deprecated Use {@link #format(Calendar, Appendable)}
      *
      * @param calendar the calendar to format
      * @param buf  the buffer to format into
      * @return the specified string buffer
-     * @deprecated Use {@link #format(Calendar, Appendable)}
      */
     @Deprecated
     protected StringBuffer applyRules(final Calendar calendar, final StringBuffer buf) {
