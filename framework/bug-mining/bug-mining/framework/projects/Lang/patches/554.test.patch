diff --git a/src/test/java/org/apache/commons/lang3/RandomUtilsTest.java b/src/test/java/org/apache/commons/lang3/RandomUtilsTest.java
index 0c8d60992..b05c71906 100644
--- a/src/test/java/org/apache/commons/lang3/RandomUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/RandomUtilsTest.java
@@ -19,7 +19,6 @@ package org.apache.commons.lang3;
 import static org.junit.jupiter.api.Assertions.assertArrayEquals;
 import static org.junit.jupiter.api.Assertions.assertEquals;
 import static org.junit.jupiter.api.Assertions.assertFalse;
-import static org.junit.jupiter.api.Assertions.assertNotEquals;
 import static org.junit.jupiter.api.Assertions.assertNotNull;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 import static org.junit.jupiter.api.Assertions.assertTrue;
@@ -263,28 +262,4 @@ public class RandomUtilsTest {
         final double result = RandomUtils.nextDouble(0, Double.MAX_VALUE);
         assertTrue(result >= 0 && result <= Double.MAX_VALUE);
     }
-
-    /**
-     * Test a large value for long. A previous implementation using
-     * {@link RandomUtils#nextDouble(double, double)} could generate a value equal
-     * to the upper limit.
-     *
-     * <pre>
-     * return (long) nextDouble(startInclusive, endExclusive);
-     * </pre>
-     *
-     * <p>See LANG-1592.</p>
-     */
-    @Test
-    public void testLargeValueRangeLong() {
-        final long startInclusive = 12900000000001L;
-        final long endExclusive = 12900000000016L;
-        // Note: The method using 'return (long) nextDouble(startInclusive, endExclusive)'
-        // takes thousands of calls to generate an error. This size loop fails most
-        // of the time with the previous method.
-        final int n = (int) (endExclusive - startInclusive) * 1000;
-        for (int i = 0; i < n; i++) {
-            assertNotEquals(endExclusive, RandomUtils.nextLong(startInclusive, endExclusive));
-        }
-    }
 }
