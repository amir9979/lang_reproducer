diff --git a/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java b/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java
index 17cd6e60a..4315e4742 100644
--- a/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java
+++ b/src/main/java/org/apache/commons/lang3/time/DateFormatUtils.java
@@ -43,7 +43,6 @@ public class DateFormatUtils {
     /**
      * ISO 8601 formatter for date-time without time zone.
      * The format used is {@code yyyy-MM-dd'T'HH:mm:ss}.
-     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      */
     public static final FastDateFormat ISO_DATETIME_FORMAT
             = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ss");
@@ -51,7 +50,6 @@ public class DateFormatUtils {
     /**
      * ISO 8601 formatter for date-time with time zone.
      * The format used is {@code yyyy-MM-dd'T'HH:mm:ssZZ}.
-     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      */
     public static final FastDateFormat ISO_DATETIME_TIME_ZONE_FORMAT
             = FastDateFormat.getInstance("yyyy-MM-dd'T'HH:mm:ssZZ");
@@ -59,7 +57,6 @@ public class DateFormatUtils {
     /**
      * ISO 8601 formatter for date without time zone.
      * The format used is {@code yyyy-MM-dd}.
-     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      */
     public static final FastDateFormat ISO_DATE_FORMAT
             = FastDateFormat.getInstance("yyyy-MM-dd");
@@ -69,7 +66,6 @@ public class DateFormatUtils {
      * The format used is {@code yyyy-MM-ddZZ}.
      * This pattern does not comply with the formal ISO 8601 specification
      * as the standard does not allow a time zone  without a time.
-     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      */
     public static final FastDateFormat ISO_DATE_TIME_ZONE_FORMAT
             = FastDateFormat.getInstance("yyyy-MM-ddZZ");
@@ -77,7 +73,6 @@ public class DateFormatUtils {
     /**
      * ISO 8601 formatter for time without time zone.
      * The format used is {@code 'T'HH:mm:ss}.
-     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      */
     public static final FastDateFormat ISO_TIME_FORMAT
             = FastDateFormat.getInstance("'T'HH:mm:ss");
@@ -85,7 +80,6 @@ public class DateFormatUtils {
     /**
      * ISO 8601 formatter for time with time zone.
      * The format used is {@code 'T'HH:mm:ssZZ}.
-     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      */
     public static final FastDateFormat ISO_TIME_TIME_ZONE_FORMAT
             = FastDateFormat.getInstance("'T'HH:mm:ssZZ");
@@ -95,7 +89,6 @@ public class DateFormatUtils {
      * The format used is {@code HH:mm:ss}.
      * This pattern does not comply with the formal ISO 8601 specification
      * as the standard requires the 'T' prefix for times.
-     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      */
     public static final FastDateFormat ISO_TIME_NO_T_FORMAT
             = FastDateFormat.getInstance("HH:mm:ss");
@@ -105,7 +98,6 @@ public class DateFormatUtils {
      * The format used is {@code HH:mm:ssZZ}.
      * This pattern does not comply with the formal ISO 8601 specification
      * as the standard requires the 'T' prefix for times.
-     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      */
     public static final FastDateFormat ISO_TIME_NO_T_TIME_ZONE_FORMAT
             = FastDateFormat.getInstance("HH:mm:ssZZ");
@@ -113,7 +105,6 @@ public class DateFormatUtils {
     /**
      * SMTP (and probably other) date headers.
      * The format used is {@code EEE, dd MMM yyyy HH:mm:ss Z} in US locale.
-     * This format uses the default TimeZone in effect at the time of loading DateFormatUtils class.
      */
     public static final FastDateFormat SMTP_DATETIME_FORMAT
             = FastDateFormat.getInstance("EEE, dd MMM yyyy HH:mm:ss Z", Locale.US);
diff --git a/src/main/java/org/apache/commons/lang3/time/DatePrinter.java b/src/main/java/org/apache/commons/lang3/time/DatePrinter.java
index 68086285d..d1bfb91b9 100644
--- a/src/main/java/org/apache/commons/lang3/time/DatePrinter.java
+++ b/src/main/java/org/apache/commons/lang3/time/DatePrinter.java
@@ -49,11 +49,8 @@ public interface DatePrinter {
 
     /**
      * <p>Formats a {@code Calendar} object.</p>
-     * The TimeZone set on the Calendar is only used to adjust the time offset.
-     * The TimeZone specified during the construction of the Parser will determine the TimeZone
-     * used in the formatted string.
      *
-     * @param calendar  the calendar to format.
+     * @param calendar  the calendar to format
      * @return the formatted string
      */
     String format(Calendar calendar);
@@ -79,10 +76,8 @@ public interface DatePrinter {
     StringBuffer format(Date date, StringBuffer buf);
 
     /**
-     * <p>Formats a {@code Calendar} object into the supplied {@code StringBuffer}.</p>
-     * The TimeZone set on the Calendar is only used to adjust the time offset.
-     * The TimeZone specified during the construction of the Parser will determine the TimeZone
-     * used in the formatted string.
+     * <p>Formats a {@code Calendar} object into the
+     * supplied {@code StringBuffer}.</p>
      *
      * @param calendar  the calendar to format
      * @param buf  the buffer to format into
diff --git a/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java b/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
index 4a20333ae..ac73646a9 100644
--- a/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
+++ b/src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java
@@ -477,8 +477,7 @@ public class FastDatePrinter implements DatePrinter, Serializable {
      */
     @Override
     public StringBuffer format(final Calendar calendar, final StringBuffer buf) {
-        // do not pass in calendar directly, this will cause TimeZone of FastDatePrinter to be ignored
-        return format(calendar.getTime(), buf);
+        return applyRules(calendar, buf);
     }
 
     /**
