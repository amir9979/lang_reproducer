diff --git a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
index 9e07c33b1..54c810d04 100644
--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
@@ -1788,7 +1788,7 @@ public class TypeUtils {
 
         final Type useOwner = p.getOwnerType();
         final Class<?> raw = (Class<?>) p.getRawType();
-
+        final Type[] typeArguments = p.getActualTypeArguments();
         if (useOwner == null) {
             buf.append(raw.getName());
         } else {
@@ -1800,46 +1800,10 @@ public class TypeUtils {
             buf.append('.').append(raw.getSimpleName());
         }
 
-        final int[] recursiveTypeIndexes = findRecursiveTypes(p);
-
-        if (recursiveTypeIndexes.length > 0) {
-            appendRecursiveTypes(buf, recursiveTypeIndexes, p.getActualTypeArguments());
-        } else {
-            appendAllTo(buf.append('<'), ", ", p.getActualTypeArguments()).append('>');
-        }
-
+        appendAllTo(buf.append('<'), ", ", typeArguments).append('>');
         return buf.toString();
     }
 
-    private static void appendRecursiveTypes(StringBuilder buf, int[] recursiveTypeIndexes, Type[] argumentTypes) {
-        for (int i = 0; i < recursiveTypeIndexes.length; i++) {
-            appendAllTo(buf.append('<'), ", ", argumentTypes[i].toString()).append('>');
-        }
-
-        final Type[] argumentsFiltered = ArrayUtils.removeAll(argumentTypes, recursiveTypeIndexes);
-
-        if (argumentsFiltered.length > 0) {
-            appendAllTo(buf.append('<'), ", ", argumentsFiltered).append('>');
-        }
-    }
-
-    private static int[] findRecursiveTypes(ParameterizedType p) {
-        Type[] filteredArgumentTypes = Arrays.copyOf(p.getActualTypeArguments(), p.getActualTypeArguments().length);
-        int[] indexesToRemove = new int[] {};
-        for (int i = 0; i < filteredArgumentTypes.length; i++) {
-            if (filteredArgumentTypes[i] instanceof TypeVariable<?>) {
-                if (containsVariableTypeSameParametrizedTypeBound(((TypeVariable<?>) filteredArgumentTypes[i]), p)) {
-                    indexesToRemove = ArrayUtils.add(indexesToRemove, i);
-                }
-            }
-        }
-        return indexesToRemove;
-    }
-
-    private static boolean containsVariableTypeSameParametrizedTypeBound(TypeVariable<?> typeVariable, ParameterizedType p) {
-        return ArrayUtils.contains(typeVariable.getBounds(), p);
-    }
-
     /**
      * Format a {@link WildcardType} as a {@link String}.
      * @param w {@code WildcardType} to format
@@ -1876,7 +1840,7 @@ public class TypeUtils {
      * @return {@code buf}
      * @since 3.2
      */
-    private static <T> StringBuilder appendAllTo(final StringBuilder buf, final String sep, final T... types) {
+    private static StringBuilder appendAllTo(final StringBuilder buf, final String sep, final Type... types) {
         Validate.notEmpty(Validate.noNullElements(types));
         if (types.length > 0) {
             buf.append(toString(types[0]));
@@ -1887,8 +1851,4 @@ public class TypeUtils {
         return buf;
     }
 
-    private static <T> String toString(T object) {
-        return object instanceof Type ? toString((Type) object) : object.toString();
-    }
-
 }
