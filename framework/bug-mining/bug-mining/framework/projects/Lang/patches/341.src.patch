diff --git a/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java b/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java
index b465bff56..dd11b8caf 100644
--- a/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java
+++ b/src/main/java/org/apache/commons/lang3/text/ExtendedMessageFormat.java
@@ -157,7 +157,7 @@ public class ExtendedMessageFormat extends MessageFormat {
         while (pos.getIndex() < pattern.length()) {
             switch (c[pos.getIndex()]) {
             case QUOTE:
-                appendQuotedString(pattern, pos, stripCustom);
+                appendQuotedString(pattern, pos, stripCustom, true);
                 break;
             case START_FE:
                 fmtCount++;
@@ -384,7 +384,7 @@ public class ExtendedMessageFormat extends MessageFormat {
                 }
                 break;
             case QUOTE:
-                getQuotedString(pattern, pos);
+                getQuotedString(pattern, pos, false);
                 break;
             default:
                 break;
@@ -413,7 +413,7 @@ public class ExtendedMessageFormat extends MessageFormat {
             final char c = pattern.charAt(pos.getIndex());
             switch (c) {
             case QUOTE:
-                appendQuotedString(pattern, pos, sb);
+                appendQuotedString(pattern, pos, sb, false);
                 break;
             case START_FE:
                 depth++;
@@ -471,23 +471,26 @@ public class ExtendedMessageFormat extends MessageFormat {
      * @param pattern pattern to parse
      * @param pos current parse position
      * @param appendTo optional StringBuilder to append
+     * @param escapingOn whether to process escaped quotes
      * @return <code>appendTo</code>
      */
     private StringBuilder appendQuotedString(final String pattern, final ParsePosition pos,
-            final StringBuilder appendTo) {
-        assert pattern.toCharArray()[pos.getIndex()] == QUOTE : 
-            "Quoted string must start with quote character";
-
-        // handle quote character at the beginning of the string
-        if(appendTo != null) {
-            appendTo.append(QUOTE);
-        }
-        next(pos);
-
+            final StringBuilder appendTo, final boolean escapingOn) {
         final int start = pos.getIndex();
         final char[] c = pattern.toCharArray();
+        if (escapingOn && c[start] == QUOTE) {
+            next(pos);
+            return appendTo == null ? null : appendTo.append(QUOTE);
+        }
         int lastHold = start;
         for (int i = pos.getIndex(); i < pattern.length(); i++) {
+            if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE)) {
+                appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(
+                        QUOTE);
+                pos.setIndex(i + ESCAPED_QUOTE.length());
+                lastHold = pos.getIndex();
+                continue;
+            }
             switch (c[pos.getIndex()]) {
             case QUOTE:
                 next(pos);
@@ -506,9 +509,11 @@ public class ExtendedMessageFormat extends MessageFormat {
      *
      * @param pattern pattern to parse
      * @param pos current parse position
+     * @param escapingOn whether to process escaped quotes
      */
-    private void getQuotedString(final String pattern, final ParsePosition pos) {
-        appendQuotedString(pattern, pos, null);
+    private void getQuotedString(final String pattern, final ParsePosition pos,
+            final boolean escapingOn) {
+        appendQuotedString(pattern, pos, null, escapingOn);
     }
 
     /**
