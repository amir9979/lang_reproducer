diff --git a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
index d9659fe33..c28d3bdb1 100644
--- a/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
+++ b/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java
@@ -388,7 +388,7 @@ public class TypeUtils {
      * the type arguments for the subject class's type variables in that it can
      * only determine those parameters that map from the subject {@link Class}
      * object to the supertype.
-     *
+     * 
      * <p>
      * Example: {@link java.util.TreeSet
      * TreeSet} sets its parameter as the parameter for
@@ -924,7 +924,7 @@ public class TypeUtils {
      * interface {@link Map} are {@link Object} for the subtype
      * {@link java.util.Properties Properties} even though the subtype does not
      * directly implement the {@code Map} interface.
-     *
+     * 
      * <p>
      * This method returns {@code null} if {@code type} is not assignable to
      * {@code toClass}. It returns an empty map if none of the classes or
@@ -1182,11 +1182,6 @@ public class TypeUtils {
             return false;
         }
 
-        // cannot cast an array type to a parameterized type.
-        if (type instanceof GenericArrayType) {
-            return false;
-        }
-
         // all types are assignable to themselves
         if (toParameterizedType.equals(type)) {
             return true;
@@ -1487,7 +1482,7 @@ public class TypeUtils {
      * Strips out the redundant upper bound types in type
      * variable types and wildcard types (or it would with wildcard types if
      * multiple upper bounds were allowed).
-     *
+     * 
      * <p>
      * Example, with the variable type declaration:
      * </p>
