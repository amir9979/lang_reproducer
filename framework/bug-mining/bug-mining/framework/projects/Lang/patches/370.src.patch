diff --git a/src/main/java/org/apache/commons/lang3/text/StrLookup.java b/src/main/java/org/apache/commons/lang3/text/StrLookup.java
index 446ee4cac..c4d42b3ee 100644
--- a/src/main/java/org/apache/commons/lang3/text/StrLookup.java
+++ b/src/main/java/org/apache/commons/lang3/text/StrLookup.java
@@ -16,7 +16,9 @@
  */
 package org.apache.commons.lang3.text;
 
+import java.util.Enumeration;
 import java.util.Map;
+import java.util.Properties;
 
 /**
  * Lookup a String key to a String value.
@@ -40,11 +42,6 @@ public abstract class StrLookup<V> {
      */
     private static final StrLookup<String> NONE_LOOKUP = new MapStrLookup<String>(null);
 
-    /**
-     * Lookup based on system properties.
-     */
-    private static final StrLookup<String> SYSTEM_PROPERTIES_LOOKUP = new SystemPropertiesStrLookup();
-
     //-----------------------------------------------------------------------
     /**
      * Returns a lookup which always returns null.
@@ -55,6 +52,29 @@ public abstract class StrLookup<V> {
         return NONE_LOOKUP;
     }
 
+    /**
+     * Creates a copy of the given properties instance.
+     * 
+     * @param input the Properties instance to copy.
+     * @return a copy of {@code input}.
+     */
+    private static Properties copyProperties(Properties input) {
+        if (input == null) {
+            return null;
+        }
+
+        Properties output = new Properties();
+        @SuppressWarnings("unchecked") // Property names are Strings.
+        Enumeration<String> propertyNames = (Enumeration<String>) input.propertyNames();
+
+        while (propertyNames.hasMoreElements()) {
+            String propertyName = propertyNames.nextElement();
+            output.setProperty(propertyName, input.getProperty(propertyName));
+        }
+
+        return output;
+    }
+
     /**
      * Returns a new lookup which uses a copy of the current
      * {@link System#getProperties() System properties}.
@@ -67,7 +87,19 @@ public abstract class StrLookup<V> {
      * @return a lookup using system properties, not null
      */
     public static StrLookup<String> systemPropertiesLookup() {
-        return SYSTEM_PROPERTIES_LOOKUP;
+        Properties systemProperties = null;
+
+        try {
+            systemProperties = System.getProperties();
+        } catch (final SecurityException ex) {
+            // Squelched.  All lookup(String) will return null.
+        }
+
+        Properties properties = copyProperties(systemProperties);
+        @SuppressWarnings("unchecked") // System property keys and values are always Strings
+        final Map<String, String> propertiesMap = (Map) properties;
+
+        return new MapStrLookup<String>(propertiesMap);
     }
 
     /**
@@ -156,25 +188,4 @@ public abstract class StrLookup<V> {
             return obj.toString();
         }
     }
-
-    //-----------------------------------------------------------------------
-    /**
-     * Lookup implementation based on system properties.
-     */
-    private static class SystemPropertiesStrLookup extends StrLookup<String> {
-        /**
-         * {@inheritDoc} This implementation directly accesses system properties.
-         */
-        @Override
-        public String lookup(String key) {
-            if (key.length() > 0) {
-                try {
-                    return System.getProperty(key);
-                } catch (SecurityException scex) {
-                    // Squelched. All lookup(String) will return null.
-                }
-            }
-            return null;
-        }
-    }
 }
