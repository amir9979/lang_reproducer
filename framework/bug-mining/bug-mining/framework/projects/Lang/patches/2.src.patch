diff --git a/src/java/org/apache/commons/lang/SerializationUtils.java b/src/java/org/apache/commons/lang/SerializationUtils.java
index bbf5ef742..6c61356af 100644
--- a/src/java/org/apache/commons/lang/SerializationUtils.java
+++ b/src/java/org/apache/commons/lang/SerializationUtils.java
@@ -80,9 +80,8 @@ import java.io.Serializable;
  * @author <a href="mailto:dlr@finemaltcoding.com">Daniel Rall</a>
  * @author Stephen Colebourne
  * @author Jeff Varszegi
- * @author Gary Gregory
  * @since 1.0
- * @version $Id: SerializationUtils.java,v 1.11 2003/08/21 05:35:23 ggregory Exp $
+ * @version $Id: SerializationUtils.java,v 1.10 2003/08/18 02:22:23 bayard Exp $
  */
 public class SerializationUtils {
     
@@ -92,7 +91,6 @@ public class SerializationUtils {
      *
      * <p>This constructor is public to permit tools that require a JavaBean instance
      * to operate.</p>
-     * @since 2.0
      */
     public SerializationUtils() {
         super();
diff --git a/src/java/org/apache/commons/lang/enum/EnumUtils.java b/src/java/org/apache/commons/lang/enum/EnumUtils.java
index cab64a75e..ba031fbf8 100644
--- a/src/java/org/apache/commons/lang/enum/EnumUtils.java
+++ b/src/java/org/apache/commons/lang/enum/EnumUtils.java
@@ -63,15 +63,13 @@ import java.util.Map;
  * @see Enum
  * @see ValuedEnum
  * @author Stephen Colebourne
- * @author Gary Gregory
  * @since 1.0
- * @version $Id: EnumUtils.java,v 1.10 2003/08/21 05:29:08 ggregory Exp $
+ * @version $Id: EnumUtils.java,v 1.9 2003/08/18 02:22:24 bayard Exp $
  */
 public class EnumUtils {
 
     /**
      * Public constructor. This class should not normally be instantiated.
-     * @since 2.0
      */
     public EnumUtils() {
     }
diff --git a/src/java/org/apache/commons/lang/exception/NestableDelegate.java b/src/java/org/apache/commons/lang/exception/NestableDelegate.java
index f81d0b770..80f1ead5b 100644
--- a/src/java/org/apache/commons/lang/exception/NestableDelegate.java
+++ b/src/java/org/apache/commons/lang/exception/NestableDelegate.java
@@ -79,7 +79,7 @@ import java.util.List;
  * @author Sean C. Sullivan
  * @author Stephen Colebourne
  * @since 1.0
- * @version $Id: NestableDelegate.java,v 1.19 2003/08/21 05:33:10 ggregory Exp $
+ * @version $Id: NestableDelegate.java,v 1.18 2003/08/18 02:22:24 bayard Exp $
  */
 public class NestableDelegate implements Serializable {
 
@@ -100,14 +100,12 @@ public class NestableDelegate implements Serializable {
     /**
      * Whether to print the stack trace top-down.
      * This public flag may be set by calling code, typically in initialisation.
-     * @since 2.0
      */
     public static boolean topDown = true;
     
     /**
      * Whether to trim the repeated stack trace.
      * This public flag may be set by calling code, typically in initialisation.
-     * @since 2.0
      */
     public static boolean trimStackFrames = true;
 
@@ -117,7 +115,6 @@ public class NestableDelegate implements Serializable {
      *
      * @param nestable the Nestable implementation (<i>must</i> extend
      * {@link java.lang.Throwable})
-     * @since 2.0
      */
     public NestableDelegate(Nestable nestable) {
         if (nestable instanceof Throwable) {
@@ -138,7 +135,6 @@ public class NestableDelegate implements Serializable {
      * @throws IndexOutOfBoundsException if the <code>index</code> argument is
      * negative or not less than the count of <code>Throwable</code>s in the
      * chain
-     * @since 2.0
      */
     public String getMessage(int index) {
         Throwable t = this.getThrowable(index);
@@ -160,7 +156,6 @@ public class NestableDelegate implements Serializable {
      * java.lang.Throwable}.
      * @return The concatenated message for this and all nested
      * <code>Throwable</code>s
-     * @since 2.0
      */
     public String getMessage(String baseMsg) {
         StringBuffer msg = new StringBuffer();
@@ -191,7 +186,6 @@ public class NestableDelegate implements Serializable {
      * operation.
      *
      * @return the error messages
-     * @since 2.0
      */
     public String[] getMessages() {
         Throwable[] throwables = this.getThrowables();
@@ -215,7 +209,6 @@ public class NestableDelegate implements Serializable {
      * @throws IndexOutOfBoundsException if the <code>index</code> argument is
      * negative or not less than the count of <code>Throwable</code>s in the
      * chain
-     * @since 2.0
      */
     public Throwable getThrowable(int index) {
         if (index == 0) {
@@ -230,7 +223,6 @@ public class NestableDelegate implements Serializable {
      * <code>Nestable</code> contained by this delegate.
      *
      * @return the throwable count
-     * @since 2.0
      */
     public int getThrowableCount() {
         return ExceptionUtils.getThrowableCount(this.nestable);
@@ -242,7 +234,6 @@ public class NestableDelegate implements Serializable {
      * element for each <code>Throwable</code>.
      *
      * @return the <code>Throwable</code>s
-     * @since 2.0
      */
     public Throwable[] getThrowables() {
         return ExceptionUtils.getThrowables(this.nestable);
@@ -262,7 +253,6 @@ public class NestableDelegate implements Serializable {
      * @throws IndexOutOfBoundsException if the <code>fromIndex</code> argument
      * is negative or not less than the count of <code>Throwable</code>s in the
      * chain
-     * @since 2.0
      */
     public int indexOfThrowable(Class type, int fromIndex) {
         if (fromIndex < 0) {
@@ -365,7 +355,6 @@ public class NestableDelegate implements Serializable {
      *
      * @param t The <code>Throwable</code>.
      * @return  An array of strings describing each stack frame.
-     * @since 2.0
      */
     protected String[] getStackFrames(Throwable t) {
         StringWriter sw = new StringWriter();
@@ -386,7 +375,6 @@ public class NestableDelegate implements Serializable {
      * one just on top.
      *
      * @param stacks The list containing String[] elements
-     * @since 2.0
      */
     protected void trimStackFrames(List stacks) {
          for (int size=stacks.size(), i=size-1; i > 0; i--) {
