diff --git a/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java b/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java
index d9d8f5306..d998721d6 100644
--- a/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java
+++ b/src/test/org/apache/commons/lang/builder/ToStringBuilderTest.java
@@ -168,7 +168,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionLongArray() {
@@ -177,7 +177,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionIntArray() {
@@ -186,7 +186,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionShortArray() {
@@ -195,7 +195,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionyteArray() {
@@ -204,7 +204,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionCharArray() {
@@ -213,7 +213,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionDoubleArray() {
@@ -222,7 +222,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionFloatArray() {
@@ -231,7 +231,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionBooleanArray() {
@@ -240,7 +240,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
     
     // Reflection Array Array tests
@@ -251,7 +251,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
 
@@ -261,7 +261,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionIntArrayArray() {
@@ -270,7 +270,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionhortArrayArray() {
@@ -279,7 +279,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionByteArrayArray() {
@@ -288,7 +288,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionCharArrayArray() {
@@ -297,7 +297,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionDoubleArrayArray() {
@@ -306,7 +306,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionBooleanArrayArray() {
@@ -316,7 +316,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
         array = null;
         assertReflectionArray("<null>", array);
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
     
     // Reflection hierarchy tests
@@ -326,7 +326,7 @@ public class ToStringBuilderTest extends TestCase {
         String baseStr = this.toBaseString(base);
         assertEquals(baseStr + "[elementData={<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>,<null>},size=0,modCount=0]", ToStringBuilder.reflectionToString(base, null, true));
         assertEquals(baseStr + "[size=0]", ToStringBuilder.reflectionToString(base, null, false));
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionHierarchy() {
@@ -353,7 +353,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, List.class));
         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));
         assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     static class ReflectionTestFixtureA {
@@ -394,7 +394,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(
             this.toBaseString(objects) + "[{" + this.toBaseString(objects) + "}]",
             ToStringBuilder.reflectionToString(objects));
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     /**
@@ -411,7 +411,7 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(
             this.toBaseString(objectsLevel2) + "[{{" + this.toBaseString(objectsLevel2) + "}}]",
             ToStringBuilder.reflectionToString(objectsLevel2));
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     public void testReflectionArrayArrayCycle() throws Exception {
@@ -433,7 +433,7 @@ public class ToStringBuilderTest extends TestCase {
                 + basicToString
                 + "}}]",
             ToStringBuilder.reflectionToString(objects));
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     /**
@@ -514,9 +514,9 @@ public class ToStringBuilderTest extends TestCase {
     public void testSimpleReflectionObjectCycle() throws Exception {
         SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();
         simple.o = simple;
-        assertTrue(ToStringStyle.getRegistry().isEmpty());
+        assertTrue(ReflectionToStringBuilder.getRegistry().isEmpty());
         assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString());
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
 
     /**
@@ -526,9 +526,9 @@ public class ToStringBuilderTest extends TestCase {
      */
     public void testSelfInstanceVarReflectionObjectCycle() throws Exception {
         SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();
-        assertTrue(ToStringStyle.getRegistry().isEmpty());
+        assertTrue(ReflectionToStringBuilder.getRegistry().isEmpty());
         assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + "]", test.toString());
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
     
     /**
@@ -539,9 +539,9 @@ public class ToStringBuilderTest extends TestCase {
      */
     public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception {
         SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();
-        assertTrue(ToStringStyle.getRegistry().isEmpty());
+        assertTrue(ReflectionToStringBuilder.getRegistry().isEmpty());
         assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString());
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
     
 
@@ -558,9 +558,9 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(
             this.toBaseString(a) + "[b=" + this.toBaseString(b) + "[a=" + this.toBaseString(a) + "]]",
             a.toString());
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
-    
+
     /**
      * Test a nasty combination of arrays and Objects pointing to each other.
      * objects[0] -> SimpleReflectionTestFixture[ o -> objects ]
@@ -586,15 +586,11 @@ public class ToStringBuilderTest extends TestCase {
                 + this.toBaseString(simple)
                 + "}]",
             ToStringBuilder.reflectionToString(simple));
-        this.validateEmptyToStringStyleRegistry();
+        this.validateEmptyReflectionRegistry();
     }
         
-    void validateEmptyToStringStyleRegistry() {
-       if (!ToStringStyle.getRegistry().isEmpty()) {
-           System.out.println(ToStringStyle.getRegistry());
-       }
-       
-        assertTrue(ToStringStyle.getRegistry().isEmpty());        
+    void validateEmptyReflectionRegistry() {
+        assertTrue(ReflectionToStringBuilder.getRegistry().isEmpty());        
     }
     //  End: Reflection cycle tests
 
@@ -835,25 +831,6 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString());
     }
 
-    public void testObjectCycle() {
-        ObjectCycle a = new ObjectCycle();
-        ObjectCycle b = new ObjectCycle();
-        a.obj = b;
-        b.obj = a;
-       
-        String expected = toBaseString(a) + "[" + toBaseString(b) + "[" + toBaseString(a) + "]]";
-        assertEquals(expected, a.toString());
-        validateEmptyToStringStyleRegistry();
-    }
-    
-    static class ObjectCycle {
-        Object obj;
-       
-        public String toString() {
-            return new ToStringBuilder(this).append(obj).toString();
-        }
-    }
-    
     public void testSimpleReflectionStatics() {
         SimpleReflectionStaticFieldsFixture instance1 = new SimpleReflectionStaticFieldsFixture();
         assertEquals(
@@ -971,4 +948,25 @@ public class ToStringBuilderTest extends TestCase {
         assertEquals("<null>", ReflectionToStringBuilder.toString(null));
     }
 
+    /* Unit test for #36061
+    public void testObjectCycle() {
+        ObjectCycle a = new ObjectCycle();
+        ObjectCycle b = new ObjectCycle();
+        a.obj = b;
+        b.obj = a;
+       
+        String expected = toBaseString(a) + "[" + toBaseString(b) + "[" + toBaseString(a) + "]]";
+        assertEquals(expected, a.toString());
+        validateEmptyReflectionRegistry();
+    }
+    
+    static class ObjectCycle {
+        Object obj;
+       
+        public String toString() {
+            return new ToStringBuilder(this).append(obj).toString();
+        }
+    }
+    */
+
 }
