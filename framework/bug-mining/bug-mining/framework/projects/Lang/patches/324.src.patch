diff --git a/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java b/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java
index 1fc3742f1..e667b020b 100644
--- a/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java
+++ b/src/main/java/org/apache/commons/lang3/builder/HashCodeBuilder.java
@@ -99,16 +99,6 @@ import org.apache.commons.lang3.Validate;
  * @version $Id$
  */
 public class HashCodeBuilder implements Builder<Integer> {
-    /**
-     * The default initial value to use in reflection hash code building.
-     */
-    private static final int DEFAULT_INITIAL_VALUE = 17;
-    
-    /**
-     * The default multipler value to use in reflection hash code building.
-     */
-    private static final int DEFAULT_MULTIPLIER_VALUE = 37;
-    
     /**
      * <p>
      * A registry of objects used by reflection methods to detect cyclical object references and avoid infinite loops.
@@ -210,7 +200,7 @@ public class HashCodeBuilder implements Builder<Integer> {
 
     /**
      * <p>
-     * Uses reflection to build a valid hash code from the fields of {@code object}.
+     * This method uses reflection to build a valid hash code.
      * </p>
      *
      * <p>
@@ -234,8 +224,7 @@ public class HashCodeBuilder implements Builder<Integer> {
      * </p>
      *
      * @param initialNonZeroOddNumber
-     *            a non-zero, odd number used as the initial value. This will be the returned
-     *            value if no fields are found to include in the hash code
+     *            a non-zero, odd number used as the initial value
      * @param multiplierNonZeroOddNumber
      *            a non-zero, odd number used as the multiplier
      * @param object
@@ -252,7 +241,7 @@ public class HashCodeBuilder implements Builder<Integer> {
 
     /**
      * <p>
-     * Uses reflection to build a valid hash code from the fields of {@code object}.
+     * This method uses reflection to build a valid hash code.
      * </p>
      *
      * <p>
@@ -276,8 +265,7 @@ public class HashCodeBuilder implements Builder<Integer> {
      * </p>
      *
      * @param initialNonZeroOddNumber
-     *            a non-zero, odd number used as the initial value. This will be the returned
-     *            value if no fields are found to include in the hash code
+     *            a non-zero, odd number used as the initial value
      * @param multiplierNonZeroOddNumber
      *            a non-zero, odd number used as the multiplier
      * @param object
@@ -297,7 +285,7 @@ public class HashCodeBuilder implements Builder<Integer> {
 
     /**
      * <p>
-     * Uses reflection to build a valid hash code from the fields of {@code object}.
+     * This method uses reflection to build a valid hash code.
      * </p>
      *
      * <p>
@@ -324,8 +312,7 @@ public class HashCodeBuilder implements Builder<Integer> {
      * @param <T>
      *            the type of the object involved
      * @param initialNonZeroOddNumber
-     *            a non-zero, odd number used as the initial value. This will be the returned
-     *            value if no fields are found to include in the hash code
+     *            a non-zero, odd number used as the initial value
      * @param multiplierNonZeroOddNumber
      *            a non-zero, odd number used as the multiplier
      * @param object
@@ -361,7 +348,7 @@ public class HashCodeBuilder implements Builder<Integer> {
 
     /**
      * <p>
-     * Uses reflection to build a valid hash code from the fields of {@code object}.
+     * This method uses reflection to build a valid hash code.
      * </p>
      *
      * <p>
@@ -380,8 +367,7 @@ public class HashCodeBuilder implements Builder<Integer> {
      * </p>
      *
      * <p>
-     * Static fields will not be tested. Superclass fields will be included. If no fields are found to include
-     * in the hash code, the result of this method will be constant.
+     * Static fields will not be tested. Superclass fields will be included.
      * </p>
      *
      * @param object
@@ -393,13 +379,12 @@ public class HashCodeBuilder implements Builder<Integer> {
      *             if the object is <code>null</code>
      */
     public static int reflectionHashCode(final Object object, final boolean testTransients) {
-        return reflectionHashCode(DEFAULT_INITIAL_VALUE, DEFAULT_MULTIPLIER_VALUE, object, 
-                testTransients, null);
+        return reflectionHashCode(17, 37, object, testTransients, null);
     }
 
     /**
      * <p>
-     * Uses reflection to build a valid hash code from the fields of {@code object}.
+     * This method uses reflection to build a valid hash code.
      * </p>
      *
      * <p>
@@ -418,8 +403,7 @@ public class HashCodeBuilder implements Builder<Integer> {
      * </p>
      *
      * <p>
-     * Static fields will not be tested. Superclass fields will be included. If no fields are found to include
-     * in the hash code, the result of this method will be constant.
+     * Static fields will not be tested. Superclass fields will be included.
      * </p>
      *
      * @param object
@@ -438,7 +422,7 @@ public class HashCodeBuilder implements Builder<Integer> {
 
     /**
      * <p>
-     * Uses reflection to build a valid hash code from the fields of {@code object}.
+     * This method uses reflection to build a valid hash code.
      * </p>
      *
      * <p>
@@ -457,8 +441,7 @@ public class HashCodeBuilder implements Builder<Integer> {
      * </p>
      *
      * <p>
-     * Static fields will not be tested. Superclass fields will be included. If no fields are found to include
-     * in the hash code, the result of this method will be constant.
+     * Static fields will not be tested. Superclass fields will be included.
      * </p>
      *
      * @param object
@@ -470,8 +453,7 @@ public class HashCodeBuilder implements Builder<Integer> {
      *             if the object is <code>null</code>
      */
     public static int reflectionHashCode(final Object object, final String... excludeFields) {
-        return reflectionHashCode(DEFAULT_INITIAL_VALUE, DEFAULT_MULTIPLIER_VALUE, object, false, 
-                null, excludeFields);
+        return reflectionHashCode(17, 37, object, false, null, excludeFields);
     }
 
     /**
