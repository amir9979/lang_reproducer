diff --git a/src/main/java/org/apache/commons/lang3/ArrayUtils.java b/src/main/java/org/apache/commons/lang3/ArrayUtils.java
index d9b65166a..afb384d72 100644
--- a/src/main/java/org/apache/commons/lang3/ArrayUtils.java
+++ b/src/main/java/org/apache/commons/lang3/ArrayUtils.java
@@ -1853,25 +1853,24 @@ public class ArrayUtils {
      *
      * <p>There is no special handling for multi-dimensional arrays.</p>
      *
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap(["1", "2", "3"], 0, 2) -> ["3", "2", "1"]</li>
      *         <li>ArrayUtils.swap(["1", "2", "3"], 0, 0) -> ["1", "2", "3"]</li>
      *         <li>ArrayUtils.swap(["1", "2", "3"], 1, 0) -> ["2", "1", "3"]</li>
-     *         <li>ArrayUtils.swap(["1", "2", "3"], 0, 5) -> ["1", "2", "3"]</li>
-     *         <li>ArrayUtils.swap(["1", "2", "3"], -1, 1) -> ["2", "1", "3"]</li>
+     *         <li>ArrayUtils.swap(["1", "2", "3"], 0, 5) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      *
      * @param array the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
+     * @throws ArrayIndexOutOfBoundsException if one of the indices is out of range
      */
     public static void swap(final Object[] array, int offset1, int offset2) {
-        if (array == null || array.length == 0) {
+        if (array == null) {
             return;
         }
         swap(array, offset1, offset2, 1);
@@ -1880,27 +1879,24 @@ public class ArrayUtils {
     /**
      * <p>Swaps two elements in the given array.</p>
      *
-     * <p>There is no special handling for multi-dimensional arrays.</p>
-     *
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      *
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([true, false, true], 0, 2) -> [true, false, true]</li>
      *         <li>ArrayUtils.swap([true, false, true], 0, 0) -> [true, false, true]</li>
      *         <li>ArrayUtils.swap([true, false, true], 1, 0) -> [false, true, true]</li>
-     *         <li>ArrayUtils.swap([true, false, true], 0, 5) -> [true, false, true]</li>
-     *         <li>ArrayUtils.swap([true, false, true], -1, 1) -> [false, true, true]</li>
+     *         <li>ArrayUtils.swap([true, false, true], 0, 5) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
+     * @throws ArrayIndexOutOfBoundsException if one of the indices is out of range
      */
     public static void swap(final long[] array, int offset1, int offset2) {
-        if (array == null || array.length == 0) {
+        if (array == null) {
             return;
         }
         swap(array, offset1, offset2, 1);
@@ -1909,25 +1905,24 @@ public class ArrayUtils {
     /**
      * <p>Swaps two elements in the given array.</p>
      *
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      *
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 2) -> [3, 2, 1]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 0) -> [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 1, 0) -> [2, 1, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> [1, 2, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -> [2, 1, 3]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      *
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
+     * @throws ArrayIndexOutOfBoundsException if one of the indices is out of range
      */
     public static void swap(final int[] array, int offset1, int offset2) {
-        if (array == null || array.length == 0) {
+        if (array == null) {
             return;
         }
         swap(array, offset1, offset2, 1);
@@ -1936,25 +1931,24 @@ public class ArrayUtils {
     /**
      * <p>Swaps two elements in the given array.</p>
      *
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      *
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 2) -> [3, 2, 1]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 0) -> [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 1, 0) -> [2, 1, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> [1, 2, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -> [2, 1, 3]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
+     * @throws ArrayIndexOutOfBoundsException if one of the indices is out of range
      */
     public static void swap(final short[] array, int offset1, int offset2) {
-        if (array == null || array.length == 0) {
+        if (array == null) {
             return;
         }
         swap(array, offset1, offset2, 1);
@@ -1963,25 +1957,24 @@ public class ArrayUtils {
     /**
      * <p>Swaps two elements in the given array.</p>
      *
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 2) -> [3, 2, 1]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 0) -> [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 1, 0) -> [2, 1, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> [1, 2, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -> [2, 1, 3]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      *
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
+     * @throws ArrayIndexOutOfBoundsException if one of the indices is out of range
      */
     public static void swap(final char[] array, int offset1, int offset2) {
-        if (array == null || array.length == 0) {
+        if (array == null) {
             return;
         }
         swap(array, offset1, offset2, 1);
@@ -1990,25 +1983,24 @@ public class ArrayUtils {
     /**
      * <p>Swaps two elements in the given array.</p>
      *
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      *
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 2) -> [3, 2, 1]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 0) -> [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 1, 0) -> [2, 1, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> [1, 2, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -> [2, 1, 3]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
+     * @throws ArrayIndexOutOfBoundsException if one of the indices is out of range
      */
     public static void swap(final byte[] array, int offset1, int offset2) {
-        if (array == null || array.length == 0) {
+        if (array == null) {
             return;
         }
         swap(array, offset1, offset2, 1);
@@ -2017,25 +2009,24 @@ public class ArrayUtils {
     /**
      * <p>Swaps two elements in the given array.</p>
      *
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      *
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 2) -> [3, 2, 1]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 0) -> [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 1, 0) -> [2, 1, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> [1, 2, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -> [2, 1, 3]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
+     * @throws ArrayIndexOutOfBoundsException if one of the indices is out of range
      */
     public static void swap(final double[] array, int offset1, int offset2) {
-        if (array == null || array.length == 0) {
+        if (array == null) {
             return;
         }
         swap(array, offset1, offset2, 1);
@@ -2044,25 +2035,24 @@ public class ArrayUtils {
     /**
      * <p>Swaps two elements in the given array.</p>
      *
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      *
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 2) -> [3, 2, 1]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 0) -> [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 1, 0) -> [2, 1, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> [1, 2, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -> [2, 1, 3]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
+     * @throws ArrayIndexOutOfBoundsException if one of the indices is out of range
      */
     public static void swap(final float[] array, int offset1, int offset2) {
-        if (array == null || array.length == 0) {
+        if (array == null) {
             return;
         }
         swap(array, offset1, offset2, 1);
@@ -2071,25 +2061,24 @@ public class ArrayUtils {
     /**
      * <p>Swaps two elements in the given array.</p>
      *
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero).</p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      *
-     * <p>Examples:
+      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 2) -> [3, 2, 1]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 0, 0) -> [1, 2, 3]</li>
      *         <li>ArrayUtils.swap([1, 2, 3], 1, 0) -> [2, 1, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> [1, 2, 3]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3], -1, 1) -> [2, 1, 3]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3], 0, 5) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
      * @param array  the array to swap, may be {@code null}
      * @param offset1 the index of the first element to swap
      * @param offset2 the index of the second element to swap
+     * @throws ArrayIndexOutOfBoundsException if one of the indices is out of range
      */
     public static void swap(final boolean[] array, int offset1, int offset2) {
-        if (array == null || array.length == 0) {
+        if (array == null) {
             return;
         }
         swap(array, offset1, offset2, 1);
@@ -2098,19 +2087,14 @@ public class ArrayUtils {
     /**
      * <p>Swaps a series of elements in the given array.</p>
      * 
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero). 
-     * If any of the sub-arrays to swap falls outside of the given array, 
-     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
-     * </p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      * 
      * <p>Examples:
      *     <ul>
-     *         <li>ArrayUtils.swap([true, false, true, false], 0, 2, 1) -> [true, false, true, false]</li>
-     *         <li>ArrayUtils.swap([true, false, true, false], 0, 0, 1) -> [true, false, true, false]</li>
-     *         <li>ArrayUtils.swap([true, false, true, false], 0, 2, 2) -> [true, false, true, false]</li>
-     *         <li>ArrayUtils.swap([true, false, true, false], -3, 2, 2) -> [true, false, true, false]</li>
-     *         <li>ArrayUtils.swap([true, false, true, false], 0, 3, 3) -> [false, false, true, true]</li>
+     *         <li>ArrayUtils.swap(["1", "2", "3", "4"], 0, 2, 1) -> ["3", "2", "1", "4"]</li>
+     *         <li>ArrayUtils.swap(["1", "2", "3", "4"], 0, 0, 1) -> ["1", "2", "3", "4"]</li>
+     *         <li>ArrayUtils.swap(["1", "2", "3", "4"], 2, 0, 2) -> ["3", "4", "1", "2"]</li>
+     *         <li>ArrayUtils.swap(["1", "2", "3", "4"], 0, 3, 3) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
@@ -2118,41 +2102,30 @@ public class ArrayUtils {
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
+     * @throws ArrayIndexOutOfBoundsException if one of the indices (plus the length of the series to swap) is out of range
      */
     public static void swap(final boolean[] array,  int offset1, int offset2, int len) {
-        if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
+        if (array == null) {
             return;
         }
-        if (offset1 < 0) {
-            offset1 = 0;
-        }
-        if (offset2 < 0) {
-            offset2 = 0;
-        }
-        len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
-        for (int i = 0; i < len; i++, offset1++, offset2++) {
-            boolean aux = array[offset1];
-            array[offset1] = array[offset2];
-            array[offset2] = aux;
-        }
+        for (int i = 0; i < len; i++) {
+	        boolean aux = array[offset1 + i];
+	        array[offset1 + i] = array[offset2 + i];
+	        array[offset2 + i] = aux;
+    	}
     }
 
     /**
      * <p>Swaps a series of elements in the given array.</p>
      * 
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero). 
-     * If any of the sub-arrays to swap falls outside of the given array, 
-     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
-     * </p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      * 
      * <p>Examples:
      *     <ul>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -> [3, 2, 1, 4]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -> [1, 2, 3, 4]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> [4, 2, 3, 1]</li>
+     *         <li>ArrayUtils.swap([true, false, true, false], 0, 2, 1) -> [true, false, true, false]</li>
+     *         <li>ArrayUtils.swap([true, false, true, false], 0, 0, 1) -> [true, false, true, false]</li>
+     *         <li>ArrayUtils.swap([true, false, true, false], 0, 2, 2) -> [true, false, true, false]</li>
+     *         <li>ArrayUtils.swap([true, false, true, false], 0, 5, 3) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
@@ -2160,42 +2133,31 @@ public class ArrayUtils {
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
+     * @throws ArrayIndexOutOfBoundsException if one of the indices (plus the length of the series to swap) is out of range
      */
 
     public static void swap(final byte[] array,  int offset1, int offset2, int len) {
-        if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
+        if (array == null) {
             return;
         }
-        if (offset1 < 0) {
-            offset1 = 0;
-        }
-        if (offset2 < 0) {
-            offset2 = 0;
-        }
-        len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
-        for (int i = 0; i < len; i++, offset1++, offset2++) {
-            byte aux = array[offset1];
-            array[offset1] = array[offset2];
-            array[offset2] = aux;
+        for (int i = 0; i < len; i++) {
+            byte aux = array[offset1 + i];
+            array[offset1 + i] = array[offset2 + i];
+            array[offset2 + i] = aux;
         }
     }
 
     /**
      * <p>Swaps a series of elements in the given array.</p>
      * 
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero). 
-     * If any of the sub-arrays to swap falls outside of the given array, 
-     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
-     * </p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -> [3, 2, 1, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -> [1, 2, 3, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> [4, 2, 3, 1]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
@@ -2203,41 +2165,30 @@ public class ArrayUtils {
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
+     * @throws ArrayIndexOutOfBoundsException if one of the indices (plus the length of the series to swap) is out of range
      */
     public static void swap(final char[] array,  int offset1, int offset2, int len) {
-        if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
+        if (array == null) {
             return;
         }
-        if (offset1 < 0) {
-            offset1 = 0;
-        }
-        if (offset2 < 0) {
-            offset2 = 0;
-        }
-        len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
-        for (int i = 0; i < len; i++, offset1++, offset2++) {
-            char aux = array[offset1];
-            array[offset1] = array[offset2];
-            array[offset2] = aux;
+        for (int i = 0; i < len; i++) {
+            char aux = array[offset1 + i];
+            array[offset1 + i] = array[offset2 + i];
+            array[offset2 + i] = aux;
         }
     }
 
     /**
      * <p>Swaps a series of elements in the given array.</p>
      * 
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero). 
-     * If any of the sub-arrays to swap falls outside of the given array, 
-     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
-     * </p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -> [3, 2, 1, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -> [1, 2, 3, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> [4, 2, 3, 1]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
@@ -2245,41 +2196,30 @@ public class ArrayUtils {
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
+     * @throws ArrayIndexOutOfBoundsException if one of the indices (plus the length of the series to swap) is out of range
      */
     public static void swap(final double[] array,  int offset1, int offset2, int len) {
-        if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
+        if (array == null) {
             return;
         }
-        if (offset1 < 0) {
-            offset1 = 0;
-        }
-        if (offset2 < 0) {
-            offset2 = 0;
-        }
-        len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
-        for (int i = 0; i < len; i++, offset1++, offset2++) {
-            double aux = array[offset1];
-            array[offset1] = array[offset2];
-            array[offset2] = aux;
+        for (int i = 0; i < len; i++) {
+            double aux = array[offset1 + i];
+            array[offset1 + i] = array[offset2 + i];
+            array[offset2 + i] = aux;
         }
     }
 
     /**
      * <p>Swaps a series of elements in the given array.</p>
      * 
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero). 
-     * If any of the sub-arrays to swap falls outside of the given array, 
-     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
-     * </p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -> [3, 2, 1, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -> [1, 2, 3, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> [4, 2, 3, 1]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
@@ -2287,42 +2227,30 @@ public class ArrayUtils {
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
+     * @throws ArrayIndexOutOfBoundsException if one of the indices (plus the length of the series to swap) is out of range
      */
     public static void swap(final float[] array,  int offset1, int offset2, int len) {
-        if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
+        if (array == null) {
             return;
         }
-        if (offset1 < 0) {
-            offset1 = 0;
-        }
-        if (offset2 < 0) {
-            offset2 = 0;
+        for (int i = 0; i < len; i++) {
+            float aux = array[offset1 + i];
+            array[offset1 + i] = array[offset2 + i];
+            array[offset2 + i] = aux;
         }
-        len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
-        for (int i = 0; i < len; i++, offset1++, offset2++) {
-            float aux = array[offset1];
-            array[offset1] = array[offset2];
-            array[offset2] = aux;
-        }
-
     }
 
     /**
      * <p>Swaps a series of elements in the given array.</p>
      * 
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero). 
-     * If any of the sub-arrays to swap falls outside of the given array, 
-     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
-     * </p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -> [3, 2, 1, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -> [1, 2, 3, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> [4, 2, 3, 1]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
@@ -2330,41 +2258,30 @@ public class ArrayUtils {
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
+     * @throws ArrayIndexOutOfBoundsException if one of the indices (plus the length of the series to swap) is out of range
      */
     public static void swap(final int[] array,  int offset1, int offset2, int len) {
-        if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
+        if (array == null) {
             return;
         }
-        if (offset1 < 0) {
-            offset1 = 0;
-        }
-        if (offset2 < 0) {
-            offset2 = 0;
-        }
-        len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
-        for (int i = 0; i < len; i++, offset1++, offset2++) {
-            int aux = array[offset1];
-            array[offset1] = array[offset2];
-            array[offset2] = aux;
+        for (int i = 0; i < len; i++) {
+            int aux = array[offset1 + i];
+            array[offset1 + i] = array[offset2 + i];
+            array[offset2 + i] = aux;
         }
     }
 
     /**
      * <p>Swaps a series of elements in the given array.</p>
      * 
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero). 
-     * If any of the sub-arrays to swap falls outside of the given array, 
-     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
-     * </p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -> [3, 2, 1, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -> [1, 2, 3, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> [4, 2, 3, 1]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
@@ -2372,41 +2289,30 @@ public class ArrayUtils {
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
+     * @throws ArrayIndexOutOfBoundsException if one of the indices (plus the length of the series to swap) is out of range
      */
     public static void swap(final long[] array,  int offset1, int offset2, int len) {
-        if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
+        if (array == null) {
             return;
         }
-        if (offset1 < 0) {
-            offset1 = 0;
-        }
-        if (offset2 < 0) {
-            offset2 = 0;
-        }
-        len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
-        for (int i = 0; i < len; i++, offset1++, offset2++) {
-            long aux = array[offset1];
-            array[offset1] = array[offset2];
-            array[offset2] = aux;
-        }
+        for (int i = 0; i < len; i++) {
+            long aux = array[offset1 + i];
+            array[offset1 + i] = array[offset2 + i];
+            array[offset2 + i] = aux;
+    	}
     }
 
     /**
      * <p>Swaps a series of elements in the given array.</p>
      * 
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero). 
-     * If any of the sub-arrays to swap falls outside of the given array, 
-     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
-     * </p>
+     * <p>This method does nothing for a {@code null} input array.</p>
      * 
      * <p>Examples:
      *     <ul>
-     *         <li>ArrayUtils.swap(["1", "2", "3", "4"], 0, 2, 1) -> ["3", "2", "1", "4"]</li>
-     *         <li>ArrayUtils.swap(["1", "2", "3", "4"], 0, 0, 1) -> ["1", "2", "3", "4"]</li>
-     *         <li>ArrayUtils.swap(["1", "2", "3", "4"], 2, 0, 2) -> ["3", "4", "1", "2"]</li>
-     *         <li>ArrayUtils.swap(["1", "2", "3", "4"], -3, 2, 2) -> ["3", "4", "1", "2"]</li>
-     *         <li>ArrayUtils.swap(["1", "2", "3", "4"], 0, 3, 3) -> ["4", "2", "3", "1"]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -> [3, 2, 1, 4]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -> [1, 2, 3, 4]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -> [3, 4, 1, 2]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
      * 
@@ -2414,41 +2320,30 @@ public class ArrayUtils {
      * @param offset1 the index of the first element in the series to swap
      * @param offset2 the index of the second element in the series to swap
      * @param len the number of elements to swap starting with the given indices
+     * @throws ArrayIndexOutOfBoundsException if one of the indices (plus the length of the series to swap) is out of range
      */
    public static void swap(final Object[] array,  int offset1, int offset2, int len) {
-        if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
+        if (array == null) {
             return;
         }
-        if (offset1 < 0) {
-            offset1 = 0;
-        }
-        if (offset2 < 0) {
-            offset2 = 0;
-        }
-        len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
-        for (int i = 0; i < len; i++, offset1++, offset2++) {
-            Object aux = array[offset1];
-            array[offset1] = array[offset2];
-            array[offset2] = aux;
+        for (int i = 0; i < len; i++) {
+            Object aux = array[offset1 + i];
+            array[offset1 + i] = array[offset2 + i];
+            array[offset2 + i] = aux;
         }
     }
 
    /**
     * <p>Swaps a series of elements in the given array.</p>
     * 
-     * <p>This method does nothing for a {@code null} or empty input array or for overflow indices.
-     * Negative indices are promoted to 0(zero). 
-     * If any of the sub-arrays to swap falls outside of the given array, 
-     * then the swap is stopped at the end of the array and as many as possible elements are swapped.
-     * </p>
+    * <p>This method does nothing for a {@code null} input array.</p>
      * 
      * <p>Examples:
      *     <ul>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 2, 1) -> [3, 2, 1, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 0, 1) -> [1, 2, 3, 4]</li>
      *         <li>ArrayUtils.swap([1, 2, 3, 4], 2, 0, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], -3, 2, 2) -> [3, 4, 1, 2]</li>
-     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> [4, 2, 3, 1]</li>
+     *         <li>ArrayUtils.swap([1, 2, 3, 4], 0, 3, 3) -> ArrayOutOfBoundsException</li>
      *     </ul>
      * </p>
     * 
@@ -2456,25 +2351,16 @@ public class ArrayUtils {
     * @param offset1 the index of the first element in the series to swap
     * @param offset2 the index of the second element in the series to swap
     * @param len the number of elements to swap starting with the given indices
+    * @throws ArrayIndexOutOfBoundsException if one of the indices (plus the length of the series to swap) is out of range
     */
     public static void swap(final short[] array,  int offset1, int offset2, int len) {
-        if (array == null || array.length == 0 || offset1 >= array.length || offset2 >= array.length) {
-            return;
-        }
-        if (offset1 < 0) {
-            offset1 = 0;
-        }
-        if (offset2 < 0) {
-            offset2 = 0;
-        }
-        if (offset1 == offset2) {
+        if (array == null) {
             return;
         }
-        len = Math.min(Math.min(len, array.length - offset1), array.length - offset2);
-        for (int i = 0; i < len; i++, offset1++, offset2++) {
-            short aux = array[offset1];
-            array[offset1] = array[offset2];
-            array[offset2] = aux;
+        for (int i = 0; i < len; i++) {
+            short aux = array[offset1 + i];
+            array[offset1 + i] = array[offset2 + i];
+            array[offset2 + i] = aux;
         }
     }
 
@@ -2649,8 +2535,6 @@ public class ArrayUtils {
         if (offset < 0) {
             offset += n;
         }
-        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity
-        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/
         while (n > 1 && offset > 0) {
             int n_offset = n - offset;
             
@@ -2709,8 +2593,6 @@ public class ArrayUtils {
         if (offset < 0) {
             offset += n;
         }
-        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity
-        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/
         while (n > 1 && offset > 0) {
             int n_offset = n - offset;
             
@@ -2769,8 +2651,6 @@ public class ArrayUtils {
         if (offset < 0) {
             offset += n;
         }
-        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity
-        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/
         while (n > 1 && offset > 0) {
             int n_offset = n - offset;
             
@@ -2829,8 +2709,6 @@ public class ArrayUtils {
         if (offset < 0) {
             offset += n;
         }
-        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity
-        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/
         while (n > 1 && offset > 0) {
             int n_offset = n - offset;
             
@@ -2889,8 +2767,6 @@ public class ArrayUtils {
         if (offset < 0) {
             offset += n;
         }
-        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity
-        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/
         while (n > 1 && offset > 0) {
             int n_offset = n - offset;
             
@@ -2949,8 +2825,6 @@ public class ArrayUtils {
         if (offset < 0) {
             offset += n;
         }
-        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity
-        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/
         while (n > 1 && offset > 0) {
             int n_offset = n - offset;
             
@@ -3008,8 +2882,6 @@ public class ArrayUtils {
         if (offset < 0) {
             offset += n;
         }
-        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity
-        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/
         while (n > 1 && offset > 0) {
             int n_offset = n - offset;
             
@@ -3067,8 +2939,6 @@ public class ArrayUtils {
         if (offset < 0) {
             offset += n;
         }
-        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity
-        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/
         while (n > 1 && offset > 0) {
             int n_offset = n - offset;
             
@@ -3127,8 +2997,6 @@ public class ArrayUtils {
         if (offset < 0) {
             offset += n;
         }
-        // For algorithm explanations and proof of O(n) time complexity and O(1) space complexity
-        // see https://beradrian.wordpress.com/2015/04/07/shift-an-array-in-on-in-place/
         while (n > 1 && offset > 0) {
             int n_offset = n - offset;
             
