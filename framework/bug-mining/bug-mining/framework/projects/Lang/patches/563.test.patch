diff --git a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java
index 5b5f88925..2c5a1f607 100644
--- a/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/ArrayUtilsTest.java
@@ -276,14 +276,6 @@ public class ArrayUtilsTest {
         assertFalse(ArrayUtils.contains(array, (double) 99));
     }
 
-    @Test
-    public void testContainsDoubleNaN() {
-        double[] a = new double[] { Double.NEGATIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY };
-        assertTrue(ArrayUtils.contains(a, Double.POSITIVE_INFINITY));
-        assertTrue(ArrayUtils.contains(a, Double.NEGATIVE_INFINITY));
-        assertTrue(ArrayUtils.contains(a, Double.NaN));
-    }
-
     @SuppressWarnings("cast")
     @Test
     public void testContainsDoubleTolerance() {
@@ -1052,15 +1044,6 @@ public class ArrayUtilsTest {
         assertEquals(-1, ArrayUtils.indexOf(array, (double) 99));
     }
 
-    @Test
-    public void testIndexOfDoubleNaN() {
-        double[] array = new double[] { Double.NEGATIVE_INFINITY, Double.NaN, Double.POSITIVE_INFINITY, Double.NaN };
-        assertEquals(0, ArrayUtils.indexOf(array, Double.NEGATIVE_INFINITY));
-        assertEquals(1, ArrayUtils.indexOf(array, Double.NaN));
-        assertEquals(2, ArrayUtils.indexOf(array, Double.POSITIVE_INFINITY));
-
-    }
-
     @SuppressWarnings("cast")
     @Test
     public void testIndexOfDoubleTolerance() {
diff --git a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
index ec62278f8..f1b0423a7 100644
--- a/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
+++ b/src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
@@ -1334,7 +1334,7 @@ public class NumberUtilsTest {
         assertTrue(NumberUtils.createNumber(Double.toString(Double.MAX_VALUE) + "D") instanceof Double);
         assertTrue(NumberUtils.createNumber(Double.toString(Double.MAX_VALUE) + "F") instanceof Double);
         assertTrue(NumberUtils.createNumber("4.9e-324D") instanceof Double);
-        assertTrue(NumberUtils.createNumber("4.9e-324F") instanceof Double);
+        assertTrue(NumberUtils.createNumber("4.9e-324F") instanceof Double);    
     }
 
     /**
